diff --git a/xstream/src/java/com/thoughtworks/xstream/XStream.java b/xstream/src/java/com/thoughtworks/xstream/XStream.java
index 75353fa86..2852f5bae 100644
--- a/xstream/src/java/com/thoughtworks/xstream/XStream.java
+++ b/xstream/src/java/com/thoughtworks/xstream/XStream.java
@@ -338,7 +338,8 @@ public class XStream {
     private SecurityMapper securityMapper;
     private AnnotationConfiguration annotationConfiguration;
 
-    private transient boolean insecureWarning;
+    private transient boolean securityInitialized;
+    private transient boolean securityWarningGiven;
 
     public static final int NO_REFERENCES = 1001;
     public static final int ID_REFERENCES = 1002;
@@ -696,7 +697,7 @@ protected void setupSecurity() {
         }
         
         addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        securityInitialized = false;
     }
 
     /**
@@ -711,7 +712,7 @@ protected void setupSecurity() {
      * @since 1.4.10
      */
     public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
+        if (!xstream.securityInitialized) {
             xstream.addPermission(NoTypePermission.NONE);
             xstream.addPermission(NullPermission.NULL);
             xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
@@ -1479,8 +1480,8 @@ public Object unmarshal(HierarchicalStreamReader reader, Object root) {
      */
     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
         try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            if (!securityInitialized && !securityWarningGiven) {
+                securityWarningGiven = true;
                 System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
             }
             return marshallingStrategy.unmarshal(
@@ -2359,7 +2360,12 @@ public void autodetectAnnotations(boolean mode) {
      */
     public void addPermission(TypePermission permission) {
         if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (permission == AnyTypePermission.ANY)
+                securityInitialized = false;
+            else if (permission == NoTypePermission.NONE) {
+                securityInitialized = true;
+            }
+            securityInitialized = true;
             securityMapper.addPermission(permission);
         }
     }
@@ -2510,6 +2516,11 @@ public void denyTypesByWildcard(String[] patterns) {
         denyPermission(new WildcardTypePermission(patterns));
     }
 
+    private Object readResolve() {
+        securityWarningGiven = true;
+        return this;
+    }
+
     /**
      * @deprecated As of 1.3, use {@link com.thoughtworks.xstream.InitializationException}
      *             instead
@@ -2538,7 +2549,7 @@ private class InternalBlackList implements Converter {
 
         public boolean canConvert(final Class type) {
             return (type == void.class || type == Void.class)
-                || (insecureWarning
+                || (!securityInitialized
                     && type != null
                     && (type.getName().equals("java.beans.EventHandler")
                         || type.getName().endsWith("$LazyIterator")
diff --git a/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java b/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
index 56f033e5b..d18069eb5 100644
--- a/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
+++ b/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013, 2014, 2017 XStream Committers.
+ * Copyright (C) 2013, 2014, 2017, 2018 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -12,6 +12,7 @@
 
 import java.beans.EventHandler;
 
+import com.thoughtworks.xstream.XStream;
 import com.thoughtworks.xstream.XStreamException;
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
@@ -55,6 +56,29 @@ public void testCannotInjectEventHandler() {
         assertEquals(0, BUFFER.length());
     }
 
+    public void testCannotInjectEventHandlerWithUnconfiguredSecurityFramework() {
+        xstream = new XStream(createDriver());
+        xstream.alias("runnable", Runnable.class);
+        final String xml = ""
+            + "<string class='runnable-array'>\n"
+            + "  <dynamic-proxy>\n"
+            + "    <interface>java.lang.Runnable</interface>\n"
+            + "    <handler class='java.beans.EventHandler'>\n"
+            + "      <target class='com.thoughtworks.acceptance.SecurityVulnerabilityTest$Exec'/>\n"
+            + "      <action>exec</action>\n"
+            + "    </handler>\n"
+            + "  </dynamic-proxy>\n"
+            + "</string>";
+
+        try {
+            xstream.fromXML(xml);
+            fail("Thrown " + XStreamException.class.getName() + " expected");
+        } catch (final XStreamException e) {
+            assertTrue(e.getMessage().contains(EventHandler.class.getName()));
+        }
+        assertEquals(0, BUFFER.length());
+    }
+
     public void testExplicitlyConvertEventHandler() {
         final String xml = ""
                 + "<string class='runnable-array'>\n"
