diff --git a/esigate-core/src/main/java/org/esigate/xml/XsltRenderer.java b/esigate-core/src/main/java/org/esigate/xml/XsltRenderer.java
index 35cd7b0d..308e0eb6 100644
--- a/esigate-core/src/main/java/org/esigate/xml/XsltRenderer.java
+++ b/esigate-core/src/main/java/org/esigate/xml/XsltRenderer.java
@@ -28,6 +28,7 @@
 import javax.xml.transform.dom.DOMResult;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamSource;
+import javax.xml.XMLConstants;
 
 import nu.validator.htmlparser.common.DoctypeExpectation;
 import nu.validator.htmlparser.dom.Dom2Sax;
@@ -44,6 +45,7 @@
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
+
 /**
  * Applies an XSLT transformation to the retrieved data.
  * 
@@ -88,6 +90,8 @@ public XsltRenderer(String xsl) throws IOException {
 
     private static Transformer createTransformer(InputStream templateStream) throws IOException {
         try {
+            // Ensure XSLT cannot use advanced extensions during processing.
+            TRANSFORMER_FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
             return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
         } catch (TransformerConfigurationException e) {
             throw new ProcessingFailedException("Failed to create XSLT template", e);
diff --git a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
index 26736ab8..f8b48235 100644
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -15,26 +15,34 @@
 
 package org.esigate.xml;
 
-import java.io.IOException;
+import static org.junit.Assert.assertEquals;
 
-import junit.framework.TestCase;
+import java.io.IOException;
 
 import org.apache.commons.io.output.StringBuilderWriter;
+import org.junit.Test;
 
-public class XsltRendererTest extends TestCase {
+public class XsltRendererTest {
 
     /**
      * Tests xpath expression evaluation.
      * 
      * @throws IOException
      */
+    @Test
     public void testXslt() throws IOException {
         String src = "<html><body>The body<br></body></html>";
-        String result = extractBody(src);
+        String result = renderSimpleStyleSheet(src);
         assertEquals("<body>The body<br /></body>", result);
     }
 
-    private String extractBody(String src) throws IOException {
+    @Test(expected = ProcessingFailedException.class)
+    public void testSecureRendering() throws IOException {
+        String src = "<html><body>The body<br></body></html>";
+        renderExtensionStyleSheet(src);
+    }
+
+    private String renderSimpleStyleSheet(String src) throws IOException {
         String template = "<?xml version=\"1.0\"?>";
         template +=
                 "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
@@ -52,18 +60,40 @@ private String extractBody(String src) throws IOException {
         return out.toString();
     }
 
+	private String renderExtensionStyleSheet(String src) throws IOException {
+		String template = "<?xml version=\"1.0\"?>";
+		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+
+		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+
+		template += "</xsl:template>";
+
+		template += "</xsl:stylesheet>";
+		StringBuilderWriter out = new StringBuilderWriter();
+		XsltRenderer tested = new XsltRenderer(template);
+		tested.render(null, src, out);
+		return out.toString();
+	}
+
     /**
      * Tests parser does not throw an Exception for an unescaped '&' character.
      * 
      * @throws Exception
      */
+    @Test
     public void testParserSupportsUnescapedAmpersandCharacter() throws Exception {
         String src =
                 "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" "
                         + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
                         + "<html lang=\"fr\" xml:lang=\"fr\" xmlns=\"http://www.w3.org/1999/xhtml\">"
                         + "<head><title>The header</title></head><body>&x=</body></html>";
-        String result = extractBody(src);
+        String result = renderSimpleStyleSheet(src);
         assertEquals("<body>&amp;x=</body>", result);
     }
 
@@ -72,6 +102,7 @@ public void testParserSupportsUnescapedAmpersandCharacter() throws Exception {
      * 
      * @throws Exception
      */
+    @Test
     public void testParserSupportsDuplicatedId() throws Exception {
         String src =
                 "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" "
@@ -79,7 +110,7 @@ public void testParserSupportsDuplicatedId() throws Exception {
                         + "<html lang=\"fr\" xml:lang=\"fr\" xmlns=\"http://www.w3.org/1999/xhtml\">"
                         + "<head><title>The header</title></head><body>"
                         + "<span id=\"test\">a</span><span id=\"test\">b</span></body></html>";
-        String result = extractBody(src);
+        String result = renderSimpleStyleSheet(src);
         assertEquals("<body><span id=\"test\">a</span><span id=\"test\">b</span></body>", result);
     }
 
