<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="/var/folders/vd/8n7hkg4n20l_wk5gslyq_rtw0000gn/T/gumtree18014774563029497868" pos:tabs="1"><comment type="block" format="javadoc" pos:start="1:1" pos:end="15:3">/**
 *    Copyright (C) 2012 ZeroTurnaround LLC &lt;support@zeroturnaround.com&gt;
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */</comment>
<package pos:start="16:1" pos:end="16:31">package <name pos:start="16:9" pos:end="16:30"><name pos:start="16:9" pos:end="16:11">org</name><operator pos:start="16:12" pos:end="16:12">.</operator><name pos:start="16:13" pos:end="16:26">zeroturnaround</name><operator pos:start="16:27" pos:end="16:27">.</operator><name pos:start="16:28" pos:end="16:30">zip</name></name>;</package>

<import pos:start="18:1" pos:end="18:35">import <name pos:start="18:8" pos:end="18:34"><name pos:start="18:8" pos:end="18:11">java</name><operator pos:start="18:12" pos:end="18:12">.</operator><name pos:start="18:13" pos:end="18:14">io</name><operator pos:start="18:15" pos:end="18:15">.</operator><name pos:start="18:16" pos:end="18:34">BufferedInputStream</name></name>;</import>
<import pos:start="19:1" pos:end="19:36">import <name pos:start="19:8" pos:end="19:35"><name pos:start="19:8" pos:end="19:11">java</name><operator pos:start="19:12" pos:end="19:12">.</operator><name pos:start="19:13" pos:end="19:14">io</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:35">BufferedOutputStream</name></name>;</import>
<import pos:start="20:1" pos:end="20:37">import <name pos:start="20:8" pos:end="20:36"><name pos:start="20:8" pos:end="20:11">java</name><operator pos:start="20:12" pos:end="20:12">.</operator><name pos:start="20:13" pos:end="20:14">io</name><operator pos:start="20:15" pos:end="20:15">.</operator><name pos:start="20:16" pos:end="20:36">ByteArrayOutputStream</name></name>;</import>
<import pos:start="21:1" pos:end="21:20">import <name pos:start="21:8" pos:end="21:19"><name pos:start="21:8" pos:end="21:11">java</name><operator pos:start="21:12" pos:end="21:12">.</operator><name pos:start="21:13" pos:end="21:14">io</name><operator pos:start="21:15" pos:end="21:15">.</operator><name pos:start="21:16" pos:end="21:19">File</name></name>;</import>
<import pos:start="22:1" pos:end="22:31">import <name pos:start="22:8" pos:end="22:30"><name pos:start="22:8" pos:end="22:11">java</name><operator pos:start="22:12" pos:end="22:12">.</operator><name pos:start="22:13" pos:end="22:14">io</name><operator pos:start="22:15" pos:end="22:15">.</operator><name pos:start="22:16" pos:end="22:30">FileInputStream</name></name>;</import>
<import pos:start="23:1" pos:end="23:32">import <name pos:start="23:8" pos:end="23:31"><name pos:start="23:8" pos:end="23:11">java</name><operator pos:start="23:12" pos:end="23:12">.</operator><name pos:start="23:13" pos:end="23:14">io</name><operator pos:start="23:15" pos:end="23:15">.</operator><name pos:start="23:16" pos:end="23:31">FileOutputStream</name></name>;</import>
<import pos:start="24:1" pos:end="24:27">import <name pos:start="24:8" pos:end="24:26"><name pos:start="24:8" pos:end="24:11">java</name><operator pos:start="24:12" pos:end="24:12">.</operator><name pos:start="24:13" pos:end="24:14">io</name><operator pos:start="24:15" pos:end="24:15">.</operator><name pos:start="24:16" pos:end="24:26">IOException</name></name>;</import>
<import pos:start="25:1" pos:end="25:27">import <name pos:start="25:8" pos:end="25:26"><name pos:start="25:8" pos:end="25:11">java</name><operator pos:start="25:12" pos:end="25:12">.</operator><name pos:start="25:13" pos:end="25:14">io</name><operator pos:start="25:15" pos:end="25:15">.</operator><name pos:start="25:16" pos:end="25:26">InputStream</name></name>;</import>
<import pos:start="26:1" pos:end="26:28">import <name pos:start="26:8" pos:end="26:27"><name pos:start="26:8" pos:end="26:11">java</name><operator pos:start="26:12" pos:end="26:12">.</operator><name pos:start="26:13" pos:end="26:14">io</name><operator pos:start="26:15" pos:end="26:15">.</operator><name pos:start="26:16" pos:end="26:27">OutputStream</name></name>;</import>
<import pos:start="27:1" pos:end="27:32">import <name pos:start="27:8" pos:end="27:31"><name pos:start="27:8" pos:end="27:11">java</name><operator pos:start="27:12" pos:end="27:12">.</operator><name pos:start="27:13" pos:end="27:15">nio</name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:23">charset</name><operator pos:start="27:24" pos:end="27:24">.</operator><name pos:start="27:25" pos:end="27:31">Charset</name></name>;</import>
<import pos:start="28:1" pos:end="28:24">import <name pos:start="28:8" pos:end="28:23"><name pos:start="28:8" pos:end="28:11">java</name><operator pos:start="28:12" pos:end="28:12">.</operator><name pos:start="28:13" pos:end="28:16">util</name><operator pos:start="28:17" pos:end="28:17">.</operator><name pos:start="28:18" pos:end="28:23">Arrays</name></name>;</import>
<import pos:start="29:1" pos:end="29:28">import <name pos:start="29:8" pos:end="29:27"><name pos:start="29:8" pos:end="29:11">java</name><operator pos:start="29:12" pos:end="29:12">.</operator><name pos:start="29:13" pos:end="29:16">util</name><operator pos:start="29:17" pos:end="29:17">.</operator><name pos:start="29:18" pos:end="29:27">Collection</name></name>;</import>
<import pos:start="30:1" pos:end="30:22">import <name pos:start="30:8" pos:end="30:21"><name pos:start="30:8" pos:end="30:11">java</name><operator pos:start="30:12" pos:end="30:12">.</operator><name pos:start="30:13" pos:end="30:16">util</name><operator pos:start="30:17" pos:end="30:17">.</operator><name pos:start="30:18" pos:end="30:21">Date</name></name>;</import>
<import pos:start="31:1" pos:end="31:29">import <name pos:start="31:8" pos:end="31:28"><name pos:start="31:8" pos:end="31:11">java</name><operator pos:start="31:12" pos:end="31:12">.</operator><name pos:start="31:13" pos:end="31:16">util</name><operator pos:start="31:17" pos:end="31:17">.</operator><name pos:start="31:18" pos:end="31:28">Enumeration</name></name>;</import>
<import pos:start="32:1" pos:end="32:25">import <name pos:start="32:8" pos:end="32:24"><name pos:start="32:8" pos:end="32:11">java</name><operator pos:start="32:12" pos:end="32:12">.</operator><name pos:start="32:13" pos:end="32:16">util</name><operator pos:start="32:17" pos:end="32:17">.</operator><name pos:start="32:18" pos:end="32:24">HashMap</name></name>;</import>
<import pos:start="33:1" pos:end="33:25">import <name pos:start="33:8" pos:end="33:24"><name pos:start="33:8" pos:end="33:11">java</name><operator pos:start="33:12" pos:end="33:12">.</operator><name pos:start="33:13" pos:end="33:16">util</name><operator pos:start="33:17" pos:end="33:17">.</operator><name pos:start="33:18" pos:end="33:24">HashSet</name></name>;</import>
<import pos:start="34:1" pos:end="34:22">import <name pos:start="34:8" pos:end="34:21"><name pos:start="34:8" pos:end="34:11">java</name><operator pos:start="34:12" pos:end="34:12">.</operator><name pos:start="34:13" pos:end="34:16">util</name><operator pos:start="34:17" pos:end="34:17">.</operator><name pos:start="34:18" pos:end="34:21">List</name></name>;</import>
<import pos:start="35:1" pos:end="35:21">import <name pos:start="35:8" pos:end="35:20"><name pos:start="35:8" pos:end="35:11">java</name><operator pos:start="35:12" pos:end="35:12">.</operator><name pos:start="35:13" pos:end="35:16">util</name><operator pos:start="35:17" pos:end="35:17">.</operator><name pos:start="35:18" pos:end="35:20">Map</name></name>;</import>
<import pos:start="36:1" pos:end="36:21">import <name pos:start="36:8" pos:end="36:20"><name pos:start="36:8" pos:end="36:11">java</name><operator pos:start="36:12" pos:end="36:12">.</operator><name pos:start="36:13" pos:end="36:16">util</name><operator pos:start="36:17" pos:end="36:17">.</operator><name pos:start="36:18" pos:end="36:20">Set</name></name>;</import>
<import pos:start="37:1" pos:end="37:30">import <name pos:start="37:8" pos:end="37:29"><name pos:start="37:8" pos:end="37:11">java</name><operator pos:start="37:12" pos:end="37:12">.</operator><name pos:start="37:13" pos:end="37:16">util</name><operator pos:start="37:17" pos:end="37:17">.</operator><name pos:start="37:18" pos:end="37:20">zip</name><operator pos:start="37:21" pos:end="37:21">.</operator><name pos:start="37:22" pos:end="37:29">Deflater</name></name>;</import>
<import pos:start="38:1" pos:end="38:30">import <name pos:start="38:8" pos:end="38:29"><name pos:start="38:8" pos:end="38:11">java</name><operator pos:start="38:12" pos:end="38:12">.</operator><name pos:start="38:13" pos:end="38:16">util</name><operator pos:start="38:17" pos:end="38:17">.</operator><name pos:start="38:18" pos:end="38:20">zip</name><operator pos:start="38:21" pos:end="38:21">.</operator><name pos:start="38:22" pos:end="38:29">ZipEntry</name></name>;</import>
<import pos:start="39:1" pos:end="39:29">import <name pos:start="39:8" pos:end="39:28"><name pos:start="39:8" pos:end="39:11">java</name><operator pos:start="39:12" pos:end="39:12">.</operator><name pos:start="39:13" pos:end="39:16">util</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:20">zip</name><operator pos:start="39:21" pos:end="39:21">.</operator><name pos:start="39:22" pos:end="39:28">ZipFile</name></name>;</import>
<import pos:start="40:1" pos:end="40:36">import <name pos:start="40:8" pos:end="40:35"><name pos:start="40:8" pos:end="40:11">java</name><operator pos:start="40:12" pos:end="40:12">.</operator><name pos:start="40:13" pos:end="40:16">util</name><operator pos:start="40:17" pos:end="40:17">.</operator><name pos:start="40:18" pos:end="40:20">zip</name><operator pos:start="40:21" pos:end="40:21">.</operator><name pos:start="40:22" pos:end="40:35">ZipInputStream</name></name>;</import>
<import pos:start="41:1" pos:end="41:37">import <name pos:start="41:8" pos:end="41:36"><name pos:start="41:8" pos:end="41:11">java</name><operator pos:start="41:12" pos:end="41:12">.</operator><name pos:start="41:13" pos:end="41:16">util</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:20">zip</name><operator pos:start="41:21" pos:end="41:21">.</operator><name pos:start="41:22" pos:end="41:36">ZipOutputStream</name></name>;</import>

<import pos:start="43:1" pos:end="43:24">import <name pos:start="43:8" pos:end="43:23"><name pos:start="43:8" pos:end="43:10">org</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:16">slf4j</name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:23">Logger</name></name>;</import>
<import pos:start="44:1" pos:end="44:31">import <name pos:start="44:8" pos:end="44:30"><name pos:start="44:8" pos:end="44:10">org</name><operator pos:start="44:11" pos:end="44:11">.</operator><name pos:start="44:12" pos:end="44:16">slf4j</name><operator pos:start="44:17" pos:end="44:17">.</operator><name pos:start="44:18" pos:end="44:30">LoggerFactory</name></name>;</import>
<import pos:start="45:1" pos:end="45:48">import <name pos:start="45:8" pos:end="45:47"><name pos:start="45:8" pos:end="45:10">org</name><operator pos:start="45:11" pos:end="45:11">.</operator><name pos:start="45:12" pos:end="45:25">zeroturnaround</name><operator pos:start="45:26" pos:end="45:26">.</operator><name pos:start="45:27" pos:end="45:29">zip</name><operator pos:start="45:30" pos:end="45:30">.</operator><name pos:start="45:31" pos:end="45:37">commons</name><operator pos:start="45:38" pos:end="45:38">.</operator><name pos:start="45:39" pos:end="45:47">FileUtils</name></name>;</import>
<import pos:start="46:1" pos:end="46:52">import <name pos:start="46:8" pos:end="46:51"><name pos:start="46:8" pos:end="46:10">org</name><operator pos:start="46:11" pos:end="46:11">.</operator><name pos:start="46:12" pos:end="46:25">zeroturnaround</name><operator pos:start="46:26" pos:end="46:26">.</operator><name pos:start="46:27" pos:end="46:29">zip</name><operator pos:start="46:30" pos:end="46:30">.</operator><name pos:start="46:31" pos:end="46:37">commons</name><operator pos:start="46:38" pos:end="46:38">.</operator><name pos:start="46:39" pos:end="46:51">FilenameUtils</name></name>;</import>
<import pos:start="47:1" pos:end="47:46">import <name pos:start="47:8" pos:end="47:45"><name pos:start="47:8" pos:end="47:10">org</name><operator pos:start="47:11" pos:end="47:11">.</operator><name pos:start="47:12" pos:end="47:25">zeroturnaround</name><operator pos:start="47:26" pos:end="47:26">.</operator><name pos:start="47:27" pos:end="47:29">zip</name><operator pos:start="47:30" pos:end="47:30">.</operator><name pos:start="47:31" pos:end="47:37">commons</name><operator pos:start="47:38" pos:end="47:38">.</operator><name pos:start="47:39" pos:end="47:45">IOUtils</name></name>;</import>
<import pos:start="48:1" pos:end="48:60">import <name pos:start="48:8" pos:end="48:59"><name pos:start="48:8" pos:end="48:10">org</name><operator pos:start="48:11" pos:end="48:11">.</operator><name pos:start="48:12" pos:end="48:25">zeroturnaround</name><operator pos:start="48:26" pos:end="48:26">.</operator><name pos:start="48:27" pos:end="48:29">zip</name><operator pos:start="48:30" pos:end="48:30">.</operator><name pos:start="48:31" pos:end="48:39">transform</name><operator pos:start="48:40" pos:end="48:40">.</operator><name pos:start="48:41" pos:end="48:59">ZipEntryTransformer</name></name>;</import>
<import pos:start="49:1" pos:end="49:65">import <name pos:start="49:8" pos:end="49:64"><name pos:start="49:8" pos:end="49:10">org</name><operator pos:start="49:11" pos:end="49:11">.</operator><name pos:start="49:12" pos:end="49:25">zeroturnaround</name><operator pos:start="49:26" pos:end="49:26">.</operator><name pos:start="49:27" pos:end="49:29">zip</name><operator pos:start="49:30" pos:end="49:30">.</operator><name pos:start="49:31" pos:end="49:39">transform</name><operator pos:start="49:40" pos:end="49:40">.</operator><name pos:start="49:41" pos:end="49:64">ZipEntryTransformerEntry</name></name>;</import>

<comment type="block" format="javadoc" pos:start="51:1" pos:end="61:3">/**
 * ZIP file manipulation utilities.
 *
 * @author Rein RaudjÃ¤rv
 * @author Innokenty Shuvalov
 *
 * @see #containsEntry(File, String)
 * @see #unpackEntry(File, String)
 * @see #unpack(File, File)
 * @see #pack(File, File)
 */</comment>
<class pos:start="62:1" pos:end="3310:1"><specifier pos:start="62:1" pos:end="62:6">public</specifier> <specifier pos:start="62:8" pos:end="62:12">final</specifier> class <name pos:start="62:20" pos:end="62:26">ZipUtil</name> <block pos:start="62:28" pos:end="3310:1">{

  <decl_stmt pos:start="64:3" pos:end="64:51"><decl pos:start="64:3" pos:end="64:50"><type pos:start="64:3" pos:end="64:29"><specifier pos:start="64:3" pos:end="64:9">private</specifier> <specifier pos:start="64:11" pos:end="64:16">static</specifier> <specifier pos:start="64:18" pos:end="64:22">final</specifier> <name pos:start="64:24" pos:end="64:29">String</name></type> <name pos:start="64:31" pos:end="64:44">PATH_SEPARATOR</name> <init pos:start="64:46" pos:end="64:50">= <expr pos:start="64:48" pos:end="64:50"><literal type="string" pos:start="64:48" pos:end="64:50">"/"</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc" pos:start="66:3" pos:end="66:34">/** Default compression level */</comment>
  <decl_stmt pos:start="67:3" pos:end="67:83"><decl pos:start="67:3" pos:end="67:82"><type pos:start="67:3" pos:end="67:25"><specifier pos:start="67:3" pos:end="67:8">public</specifier> <specifier pos:start="67:10" pos:end="67:15">static</specifier> <specifier pos:start="67:17" pos:end="67:21">final</specifier> <name pos:start="67:23" pos:end="67:25">int</name></type> <name pos:start="67:27" pos:end="67:51">DEFAULT_COMPRESSION_LEVEL</name> <init pos:start="67:53" pos:end="67:82">= <expr pos:start="67:55" pos:end="67:82"><name pos:start="67:55" pos:end="67:82"><name pos:start="67:55" pos:end="67:62">Deflater</name><operator pos:start="67:63" pos:end="67:63">.</operator><name pos:start="67:64" pos:end="67:82">DEFAULT_COMPRESSION</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line" pos:start="69:3" pos:end="69:71">// Use / instead of . to work around an issue with Maven Shade Plugin</comment>
  <decl_stmt pos:start="70:3" pos:end="70:112"><decl pos:start="70:3" pos:end="70:111"><type pos:start="70:3" pos:end="70:29"><specifier pos:start="70:3" pos:end="70:9">private</specifier> <specifier pos:start="70:11" pos:end="70:16">static</specifier> <specifier pos:start="70:18" pos:end="70:22">final</specifier> <name pos:start="70:24" pos:end="70:29">Logger</name></type> <name pos:start="70:31" pos:end="70:33">log</name> <init pos:start="70:35" pos:end="70:111">= <expr pos:start="70:37" pos:end="70:111"><call pos:start="70:37" pos:end="70:111"><name pos:start="70:37" pos:end="70:59"><name pos:start="70:37" pos:end="70:49">LoggerFactory</name><operator pos:start="70:50" pos:end="70:50">.</operator><name pos:start="70:51" pos:end="70:59">getLogger</name></name><argument_list pos:start="70:60" pos:end="70:111">(<argument pos:start="70:61" pos:end="70:110"><expr pos:start="70:61" pos:end="70:110"><literal type="string" pos:start="70:61" pos:end="70:92">"org/zeroturnaround/zip/ZipUtil"</literal><operator pos:start="70:93" pos:end="70:93">.</operator><call pos:start="70:94" pos:end="70:110"><name pos:start="70:94" pos:end="70:100">replace</name><argument_list pos:start="70:101" pos:end="70:110">(<argument pos:start="70:102" pos:end="70:104"><expr pos:start="70:102" pos:end="70:104"><literal type="char" pos:start="70:102" pos:end="70:104">'/'</literal></expr></argument>, <argument pos:start="70:107" pos:end="70:109"><expr pos:start="70:107" pos:end="70:109"><literal type="char" pos:start="70:107" pos:end="70:109">'.'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="70:114" pos:end="70:123">// NOSONAR</comment>

  <constructor pos:start="72:3" pos:end="73:3"><specifier pos:start="72:3" pos:end="72:9">private</specifier> <name pos:start="72:11" pos:end="72:17">ZipUtil</name><parameter_list pos:start="72:18" pos:end="72:19">()</parameter_list> <block pos:start="72:21" pos:end="73:3">{<block_content>
  </block_content>}</block></constructor>

  <comment type="block" pos:start="75:3" pos:end="75:49">/* Extracting single entries from ZIP files. */</comment>

  <comment type="block" format="javadoc" pos:start="77:3" pos:end="85:5">/**
   * Checks if the ZIP file contains the given entry.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   * @return &lt;code&gt;true&lt;/code&gt; if the ZIP file contains the given entry.
   */</comment>
  <function pos:start="86:3" pos:end="98:3"><type pos:start="86:3" pos:end="86:23"><specifier pos:start="86:3" pos:end="86:8">public</specifier> <specifier pos:start="86:10" pos:end="86:15">static</specifier> <name pos:start="86:17" pos:end="86:23">boolean</name></type> <name pos:start="86:25" pos:end="86:37">containsEntry</name><parameter_list pos:start="86:38" pos:end="86:60">(<parameter pos:start="86:39" pos:end="86:46"><decl pos:start="86:39" pos:end="86:46"><type pos:start="86:39" pos:end="86:46"><name pos:start="86:39" pos:end="86:42">File</name></type> <name pos:start="86:44" pos:end="86:46">zip</name></decl></parameter>, <parameter pos:start="86:49" pos:end="86:59"><decl pos:start="86:49" pos:end="86:59"><type pos:start="86:49" pos:end="86:59"><name pos:start="86:49" pos:end="86:54">String</name></type> <name pos:start="86:56" pos:end="86:59">name</name></decl></parameter>)</parameter_list> <block pos:start="86:62" pos:end="98:3">{<block_content pos:start="87:5" pos:end="97:5">
    <decl_stmt pos:start="87:5" pos:end="87:22"><decl pos:start="87:5" pos:end="87:21"><type pos:start="87:5" pos:end="87:11"><name pos:start="87:5" pos:end="87:11">ZipFile</name></type> <name pos:start="87:13" pos:end="87:14">zf</name> <init pos:start="87:16" pos:end="87:21">= <expr pos:start="87:18" pos:end="87:21"><literal type="null" pos:start="87:18" pos:end="87:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="88:5" pos:end="97:5">try <block pos:start="88:9" pos:end="91:5">{<block_content pos:start="89:7" pos:end="90:39">
      <expr_stmt pos:start="89:7" pos:end="89:28"><expr pos:start="89:7" pos:end="89:27"><name pos:start="89:7" pos:end="89:8">zf</name> <operator pos:start="89:10" pos:end="89:10">=</operator> <operator pos:start="89:12" pos:end="89:14">new</operator> <call pos:start="89:16" pos:end="89:27"><name pos:start="89:16" pos:end="89:22">ZipFile</name><argument_list pos:start="89:23" pos:end="89:27">(<argument pos:start="89:24" pos:end="89:26"><expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="90:7" pos:end="90:39">return <expr pos:start="90:14" pos:end="90:38"><call pos:start="90:14" pos:end="90:30"><name pos:start="90:14" pos:end="90:24"><name pos:start="90:14" pos:end="90:15">zf</name><operator pos:start="90:16" pos:end="90:16">.</operator><name pos:start="90:17" pos:end="90:24">getEntry</name></name><argument_list pos:start="90:25" pos:end="90:30">(<argument pos:start="90:26" pos:end="90:29"><expr pos:start="90:26" pos:end="90:29"><name pos:start="90:26" pos:end="90:29">name</name></expr></argument>)</argument_list></call> <operator pos:start="90:32" pos:end="90:33">!=</operator> <literal type="null" pos:start="90:35" pos:end="90:38">null</literal></expr>;</return>
    </block_content>}</block>
    <catch pos:start="92:5" pos:end="94:5">catch <parameter_list pos:start="92:11" pos:end="92:25">(<parameter pos:start="92:12" pos:end="92:24"><decl pos:start="92:12" pos:end="92:24"><type pos:start="92:12" pos:end="92:24"><name pos:start="92:12" pos:end="92:22">IOException</name></type> <name pos:start="92:24" pos:end="92:24">e</name></decl></parameter>)</parameter_list> <block pos:start="92:27" pos:end="94:5">{<block_content pos:start="93:7" pos:end="93:40">
      <throw pos:start="93:7" pos:end="93:40">throw <expr pos:start="93:13" pos:end="93:39"><call pos:start="93:13" pos:end="93:39"><name pos:start="93:13" pos:end="93:36"><name pos:start="93:13" pos:end="93:28">ZipExceptionUtil</name><operator pos:start="93:29" pos:end="93:29">.</operator><name pos:start="93:30" pos:end="93:36">rethrow</name></name><argument_list pos:start="93:37" pos:end="93:39">(<argument pos:start="93:38" pos:end="93:38"><expr pos:start="93:38" pos:end="93:38"><name pos:start="93:38" pos:end="93:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="95:5" pos:end="97:5">finally <block pos:start="95:13" pos:end="97:5">{<block_content pos:start="96:7" pos:end="96:23">
      <expr_stmt pos:start="96:7" pos:end="96:23"><expr pos:start="96:7" pos:end="96:22"><call pos:start="96:7" pos:end="96:22"><name pos:start="96:7" pos:end="96:18">closeQuietly</name><argument_list pos:start="96:19" pos:end="96:22">(<argument pos:start="96:20" pos:end="96:21"><expr pos:start="96:20" pos:end="96:21"><name pos:start="96:20" pos:end="96:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="100:3" pos:end="111:5">/**
   * Returns the compression method of a given entry of the ZIP file.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   * @return Returns &lt;code&gt;ZipEntry.STORED&lt;/code&gt;, &lt;code&gt;ZipEntry.DEFLATED&lt;/code&gt; or -1 if
   *         the ZIP file does not contain the given entry.
   * @deprecated The compression level cannot be retrieved. This method exists only to ensure backwards compatibility with ZipUtil version 1.9, which returned the compression
   *             method, not the level.
   */</comment>
  <function pos:start="112:3" pos:end="115:3"><annotation pos:start="112:3" pos:end="112:13">@<name pos:start="112:4" pos:end="112:13">Deprecated</name></annotation>
  <type pos:start="113:3" pos:end="113:19"><specifier pos:start="113:3" pos:end="113:8">public</specifier> <specifier pos:start="113:10" pos:end="113:15">static</specifier> <name pos:start="113:17" pos:end="113:19">int</name></type> <name pos:start="113:21" pos:end="113:46">getCompressionLevelOfEntry</name><parameter_list pos:start="113:47" pos:end="113:69">(<parameter pos:start="113:48" pos:end="113:55"><decl pos:start="113:48" pos:end="113:55"><type pos:start="113:48" pos:end="113:55"><name pos:start="113:48" pos:end="113:51">File</name></type> <name pos:start="113:53" pos:end="113:55">zip</name></decl></parameter>, <parameter pos:start="113:58" pos:end="113:68"><decl pos:start="113:58" pos:end="113:68"><type pos:start="113:58" pos:end="113:68"><name pos:start="113:58" pos:end="113:63">String</name></type> <name pos:start="113:65" pos:end="113:68">name</name></decl></parameter>)</parameter_list> <block pos:start="113:71" pos:end="115:3">{<block_content pos:start="114:5" pos:end="114:50">
    <return pos:start="114:5" pos:end="114:50">return <expr pos:start="114:12" pos:end="114:49"><call pos:start="114:12" pos:end="114:49"><name pos:start="114:12" pos:end="114:38">getCompressionMethodOfEntry</name><argument_list pos:start="114:39" pos:end="114:49">(<argument pos:start="114:40" pos:end="114:42"><expr pos:start="114:40" pos:end="114:42"><name pos:start="114:40" pos:end="114:42">zip</name></expr></argument>, <argument pos:start="114:45" pos:end="114:48"><expr pos:start="114:45" pos:end="114:48"><name pos:start="114:45" pos:end="114:48">name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="117:3" pos:end="126:5">/**
   * Returns the compression method of a given entry of the ZIP file.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   * @return Returns &lt;code&gt;ZipEntry.STORED&lt;/code&gt;, &lt;code&gt;ZipEntry.DEFLATED&lt;/code&gt; or -1 if
   *         the ZIP file does not contain the given entry.
   */</comment>
  <function pos:start="127:3" pos:end="143:3"><type pos:start="127:3" pos:end="127:19"><specifier pos:start="127:3" pos:end="127:8">public</specifier> <specifier pos:start="127:10" pos:end="127:15">static</specifier> <name pos:start="127:17" pos:end="127:19">int</name></type> <name pos:start="127:21" pos:end="127:47">getCompressionMethodOfEntry</name><parameter_list pos:start="127:48" pos:end="127:70">(<parameter pos:start="127:49" pos:end="127:56"><decl pos:start="127:49" pos:end="127:56"><type pos:start="127:49" pos:end="127:56"><name pos:start="127:49" pos:end="127:52">File</name></type> <name pos:start="127:54" pos:end="127:56">zip</name></decl></parameter>, <parameter pos:start="127:59" pos:end="127:69"><decl pos:start="127:59" pos:end="127:69"><type pos:start="127:59" pos:end="127:69"><name pos:start="127:59" pos:end="127:64">String</name></type> <name pos:start="127:66" pos:end="127:69">name</name></decl></parameter>)</parameter_list> <block pos:start="127:72" pos:end="143:3">{<block_content pos:start="128:5" pos:end="142:5">
    <decl_stmt pos:start="128:5" pos:end="128:22"><decl pos:start="128:5" pos:end="128:21"><type pos:start="128:5" pos:end="128:11"><name pos:start="128:5" pos:end="128:11">ZipFile</name></type> <name pos:start="128:13" pos:end="128:14">zf</name> <init pos:start="128:16" pos:end="128:21">= <expr pos:start="128:18" pos:end="128:21"><literal type="null" pos:start="128:18" pos:end="128:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="129:5" pos:end="142:5">try <block pos:start="129:9" pos:end="136:5">{<block_content pos:start="130:7" pos:end="135:34">
      <expr_stmt pos:start="130:7" pos:end="130:28"><expr pos:start="130:7" pos:end="130:27"><name pos:start="130:7" pos:end="130:8">zf</name> <operator pos:start="130:10" pos:end="130:10">=</operator> <operator pos:start="130:12" pos:end="130:14">new</operator> <call pos:start="130:16" pos:end="130:27"><name pos:start="130:16" pos:end="130:22">ZipFile</name><argument_list pos:start="130:23" pos:end="130:27">(<argument pos:start="130:24" pos:end="130:26"><expr pos:start="130:24" pos:end="130:26"><name pos:start="130:24" pos:end="130:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt pos:start="131:7" pos:end="131:44"><decl pos:start="131:7" pos:end="131:43"><type pos:start="131:7" pos:end="131:14"><name pos:start="131:7" pos:end="131:14">ZipEntry</name></type> <name pos:start="131:16" pos:end="131:23">zipEntry</name> <init pos:start="131:25" pos:end="131:43">= <expr pos:start="131:27" pos:end="131:43"><call pos:start="131:27" pos:end="131:43"><name pos:start="131:27" pos:end="131:37"><name pos:start="131:27" pos:end="131:28">zf</name><operator pos:start="131:29" pos:end="131:29">.</operator><name pos:start="131:30" pos:end="131:37">getEntry</name></name><argument_list pos:start="131:38" pos:end="131:43">(<argument pos:start="131:39" pos:end="131:42"><expr pos:start="131:39" pos:end="131:42"><name pos:start="131:39" pos:end="131:42">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="132:7" pos:end="134:7"><if pos:start="132:7" pos:end="134:7">if <condition pos:start="132:10" pos:end="132:27">(<expr pos:start="132:11" pos:end="132:26"><name pos:start="132:11" pos:end="132:18">zipEntry</name> <operator pos:start="132:20" pos:end="132:21">==</operator> <literal type="null" pos:start="132:23" pos:end="132:26">null</literal></expr>)</condition> <block pos:start="132:29" pos:end="134:7">{<block_content pos:start="133:9" pos:end="133:18">
        <return pos:start="133:9" pos:end="133:18">return <expr pos:start="133:16" pos:end="133:17"><operator pos:start="133:16" pos:end="133:16">-</operator><literal type="number" pos:start="133:17" pos:end="133:17">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return pos:start="135:7" pos:end="135:34">return <expr pos:start="135:14" pos:end="135:33"><call pos:start="135:14" pos:end="135:33"><name pos:start="135:14" pos:end="135:31"><name pos:start="135:14" pos:end="135:21">zipEntry</name><operator pos:start="135:22" pos:end="135:22">.</operator><name pos:start="135:23" pos:end="135:31">getMethod</name></name><argument_list pos:start="135:32" pos:end="135:33">()</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="137:5" pos:end="139:5">catch <parameter_list pos:start="137:11" pos:end="137:25">(<parameter pos:start="137:12" pos:end="137:24"><decl pos:start="137:12" pos:end="137:24"><type pos:start="137:12" pos:end="137:24"><name pos:start="137:12" pos:end="137:22">IOException</name></type> <name pos:start="137:24" pos:end="137:24">e</name></decl></parameter>)</parameter_list> <block pos:start="137:27" pos:end="139:5">{<block_content pos:start="138:7" pos:end="138:40">
      <throw pos:start="138:7" pos:end="138:40">throw <expr pos:start="138:13" pos:end="138:39"><call pos:start="138:13" pos:end="138:39"><name pos:start="138:13" pos:end="138:36"><name pos:start="138:13" pos:end="138:28">ZipExceptionUtil</name><operator pos:start="138:29" pos:end="138:29">.</operator><name pos:start="138:30" pos:end="138:36">rethrow</name></name><argument_list pos:start="138:37" pos:end="138:39">(<argument pos:start="138:38" pos:end="138:38"><expr pos:start="138:38" pos:end="138:38"><name pos:start="138:38" pos:end="138:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="140:5" pos:end="142:5">finally <block pos:start="140:13" pos:end="142:5">{<block_content pos:start="141:7" pos:end="141:23">
      <expr_stmt pos:start="141:7" pos:end="141:23"><expr pos:start="141:7" pos:end="141:22"><call pos:start="141:7" pos:end="141:22"><name pos:start="141:7" pos:end="141:18">closeQuietly</name><argument_list pos:start="141:19" pos:end="141:22">(<argument pos:start="141:20" pos:end="141:21"><expr pos:start="141:20" pos:end="141:21"><name pos:start="141:20" pos:end="141:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="145:3" pos:end="154:5">/**
   * Checks if the ZIP file contains any of the given entries.
   *
   * @param zip
   *          ZIP file.
   * @param names
   *          entry names.
   * @return &lt;code&gt;true&lt;/code&gt; if the ZIP file contains any of the given
   *         entries.
   */</comment>
  <function pos:start="155:3" pos:end="172:3"><type pos:start="155:3" pos:end="155:23"><specifier pos:start="155:3" pos:end="155:8">public</specifier> <specifier pos:start="155:10" pos:end="155:15">static</specifier> <name pos:start="155:17" pos:end="155:23">boolean</name></type> <name pos:start="155:25" pos:end="155:40">containsAnyEntry</name><parameter_list pos:start="155:41" pos:end="155:66">(<parameter pos:start="155:42" pos:end="155:49"><decl pos:start="155:42" pos:end="155:49"><type pos:start="155:42" pos:end="155:49"><name pos:start="155:42" pos:end="155:45">File</name></type> <name pos:start="155:47" pos:end="155:49">zip</name></decl></parameter>, <parameter pos:start="155:52" pos:end="155:65"><decl pos:start="155:52" pos:end="155:65"><type pos:start="155:52" pos:end="155:65"><name pos:start="155:52" pos:end="155:59"><name pos:start="155:52" pos:end="155:57">String</name><index pos:start="155:58" pos:end="155:59">[]</index></name></type> <name pos:start="155:61" pos:end="155:65">names</name></decl></parameter>)</parameter_list> <block pos:start="155:68" pos:end="172:3">{<block_content pos:start="156:5" pos:end="171:5">
    <decl_stmt pos:start="156:5" pos:end="156:22"><decl pos:start="156:5" pos:end="156:21"><type pos:start="156:5" pos:end="156:11"><name pos:start="156:5" pos:end="156:11">ZipFile</name></type> <name pos:start="156:13" pos:end="156:14">zf</name> <init pos:start="156:16" pos:end="156:21">= <expr pos:start="156:18" pos:end="156:21"><literal type="null" pos:start="156:18" pos:end="156:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="157:5" pos:end="171:5">try <block pos:start="157:9" pos:end="165:5">{<block_content pos:start="158:7" pos:end="164:19">
      <expr_stmt pos:start="158:7" pos:end="158:28"><expr pos:start="158:7" pos:end="158:27"><name pos:start="158:7" pos:end="158:8">zf</name> <operator pos:start="158:10" pos:end="158:10">=</operator> <operator pos:start="158:12" pos:end="158:14">new</operator> <call pos:start="158:16" pos:end="158:27"><name pos:start="158:16" pos:end="158:22">ZipFile</name><argument_list pos:start="158:23" pos:end="158:27">(<argument pos:start="158:24" pos:end="158:26"><expr pos:start="158:24" pos:end="158:26"><name pos:start="158:24" pos:end="158:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for pos:start="159:7" pos:end="163:7">for <control pos:start="159:11" pos:end="159:44">(<init pos:start="159:12" pos:end="159:21"><decl pos:start="159:12" pos:end="159:20"><type pos:start="159:12" pos:end="159:14"><name pos:start="159:12" pos:end="159:14">int</name></type> <name pos:start="159:16" pos:end="159:16">i</name> <init pos:start="159:18" pos:end="159:20">= <expr pos:start="159:20" pos:end="159:20"><literal type="number" pos:start="159:20" pos:end="159:20">0</literal></expr></init></decl>;</init> <condition pos:start="159:23" pos:end="159:39"><expr pos:start="159:23" pos:end="159:38"><name pos:start="159:23" pos:end="159:23">i</name> <operator pos:start="159:25" pos:end="159:25">&lt;</operator> <name pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:31">names</name><operator pos:start="159:32" pos:end="159:32">.</operator><name pos:start="159:33" pos:end="159:38">length</name></name></expr>;</condition> <incr pos:start="159:41" pos:end="159:43"><expr pos:start="159:41" pos:end="159:43"><name pos:start="159:41" pos:end="159:41">i</name><operator pos:start="159:42" pos:end="159:43">++</operator></expr></incr>)</control> <block pos:start="159:46" pos:end="163:7">{<block_content pos:start="160:9" pos:end="162:9">
        <if_stmt pos:start="160:9" pos:end="162:9"><if pos:start="160:9" pos:end="162:9">if <condition pos:start="160:12" pos:end="160:42">(<expr pos:start="160:13" pos:end="160:41"><call pos:start="160:13" pos:end="160:33"><name pos:start="160:13" pos:end="160:23"><name pos:start="160:13" pos:end="160:14">zf</name><operator pos:start="160:15" pos:end="160:15">.</operator><name pos:start="160:16" pos:end="160:23">getEntry</name></name><argument_list pos:start="160:24" pos:end="160:33">(<argument pos:start="160:25" pos:end="160:32"><expr pos:start="160:25" pos:end="160:32"><name pos:start="160:25" pos:end="160:32"><name pos:start="160:25" pos:end="160:29">names</name><index pos:start="160:30" pos:end="160:32">[<expr pos:start="160:31" pos:end="160:31"><name pos:start="160:31" pos:end="160:31">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="160:35" pos:end="160:36">!=</operator> <literal type="null" pos:start="160:38" pos:end="160:41">null</literal></expr>)</condition> <block pos:start="160:44" pos:end="162:9">{<block_content pos:start="161:11" pos:end="161:22">
          <return pos:start="161:11" pos:end="161:22">return <expr pos:start="161:18" pos:end="161:21"><literal type="boolean" pos:start="161:18" pos:end="161:21">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return pos:start="164:7" pos:end="164:19">return <expr pos:start="164:14" pos:end="164:18"><literal type="boolean" pos:start="164:14" pos:end="164:18">false</literal></expr>;</return>
    </block_content>}</block>
    <catch pos:start="166:5" pos:end="168:5">catch <parameter_list pos:start="166:11" pos:end="166:25">(<parameter pos:start="166:12" pos:end="166:24"><decl pos:start="166:12" pos:end="166:24"><type pos:start="166:12" pos:end="166:24"><name pos:start="166:12" pos:end="166:22">IOException</name></type> <name pos:start="166:24" pos:end="166:24">e</name></decl></parameter>)</parameter_list> <block pos:start="166:27" pos:end="168:5">{<block_content pos:start="167:7" pos:end="167:40">
      <throw pos:start="167:7" pos:end="167:40">throw <expr pos:start="167:13" pos:end="167:39"><call pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:36"><name pos:start="167:13" pos:end="167:28">ZipExceptionUtil</name><operator pos:start="167:29" pos:end="167:29">.</operator><name pos:start="167:30" pos:end="167:36">rethrow</name></name><argument_list pos:start="167:37" pos:end="167:39">(<argument pos:start="167:38" pos:end="167:38"><expr pos:start="167:38" pos:end="167:38"><name pos:start="167:38" pos:end="167:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="169:5" pos:end="171:5">finally <block pos:start="169:13" pos:end="171:5">{<block_content pos:start="170:7" pos:end="170:23">
      <expr_stmt pos:start="170:7" pos:end="170:23"><expr pos:start="170:7" pos:end="170:22"><call pos:start="170:7" pos:end="170:22"><name pos:start="170:7" pos:end="170:18">closeQuietly</name><argument_list pos:start="170:19" pos:end="170:22">(<argument pos:start="170:20" pos:end="170:21"><expr pos:start="170:20" pos:end="170:21"><name pos:start="170:20" pos:end="170:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="174:3" pos:end="182:5">/**
   * Unpacks a single entry from a ZIP file.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   * @return contents of the entry or &lt;code&gt;null&lt;/code&gt; if it was not found.
   */</comment>
  <function pos:start="183:3" pos:end="195:3"><type pos:start="183:3" pos:end="183:22"><specifier pos:start="183:3" pos:end="183:8">public</specifier> <specifier pos:start="183:10" pos:end="183:15">static</specifier> <name pos:start="183:17" pos:end="183:22"><name pos:start="183:17" pos:end="183:20">byte</name><index pos:start="183:21" pos:end="183:22">[]</index></name></type> <name pos:start="183:24" pos:end="183:34">unpackEntry</name><parameter_list pos:start="183:35" pos:end="183:57">(<parameter pos:start="183:36" pos:end="183:43"><decl pos:start="183:36" pos:end="183:43"><type pos:start="183:36" pos:end="183:43"><name pos:start="183:36" pos:end="183:39">File</name></type> <name pos:start="183:41" pos:end="183:43">zip</name></decl></parameter>, <parameter pos:start="183:46" pos:end="183:56"><decl pos:start="183:46" pos:end="183:56"><type pos:start="183:46" pos:end="183:56"><name pos:start="183:46" pos:end="183:51">String</name></type> <name pos:start="183:53" pos:end="183:56">name</name></decl></parameter>)</parameter_list> <block pos:start="183:59" pos:end="195:3">{<block_content pos:start="184:5" pos:end="194:5">
    <decl_stmt pos:start="184:5" pos:end="184:22"><decl pos:start="184:5" pos:end="184:21"><type pos:start="184:5" pos:end="184:11"><name pos:start="184:5" pos:end="184:11">ZipFile</name></type> <name pos:start="184:13" pos:end="184:14">zf</name> <init pos:start="184:16" pos:end="184:21">= <expr pos:start="184:18" pos:end="184:21"><literal type="null" pos:start="184:18" pos:end="184:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="185:5" pos:end="194:5">try <block pos:start="185:9" pos:end="188:5">{<block_content pos:start="186:7" pos:end="187:37">
      <expr_stmt pos:start="186:7" pos:end="186:28"><expr pos:start="186:7" pos:end="186:27"><name pos:start="186:7" pos:end="186:8">zf</name> <operator pos:start="186:10" pos:end="186:10">=</operator> <operator pos:start="186:12" pos:end="186:14">new</operator> <call pos:start="186:16" pos:end="186:27"><name pos:start="186:16" pos:end="186:22">ZipFile</name><argument_list pos:start="186:23" pos:end="186:27">(<argument pos:start="186:24" pos:end="186:26"><expr pos:start="186:24" pos:end="186:26"><name pos:start="186:24" pos:end="186:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="187:7" pos:end="187:37">return <expr pos:start="187:14" pos:end="187:36"><call pos:start="187:14" pos:end="187:36"><name pos:start="187:14" pos:end="187:26">doUnpackEntry</name><argument_list pos:start="187:27" pos:end="187:36">(<argument pos:start="187:28" pos:end="187:29"><expr pos:start="187:28" pos:end="187:29"><name pos:start="187:28" pos:end="187:29">zf</name></expr></argument>, <argument pos:start="187:32" pos:end="187:35"><expr pos:start="187:32" pos:end="187:35"><name pos:start="187:32" pos:end="187:35">name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="189:5" pos:end="191:5">catch <parameter_list pos:start="189:11" pos:end="189:25">(<parameter pos:start="189:12" pos:end="189:24"><decl pos:start="189:12" pos:end="189:24"><type pos:start="189:12" pos:end="189:24"><name pos:start="189:12" pos:end="189:22">IOException</name></type> <name pos:start="189:24" pos:end="189:24">e</name></decl></parameter>)</parameter_list> <block pos:start="189:27" pos:end="191:5">{<block_content pos:start="190:7" pos:end="190:40">
      <throw pos:start="190:7" pos:end="190:40">throw <expr pos:start="190:13" pos:end="190:39"><call pos:start="190:13" pos:end="190:39"><name pos:start="190:13" pos:end="190:36"><name pos:start="190:13" pos:end="190:28">ZipExceptionUtil</name><operator pos:start="190:29" pos:end="190:29">.</operator><name pos:start="190:30" pos:end="190:36">rethrow</name></name><argument_list pos:start="190:37" pos:end="190:39">(<argument pos:start="190:38" pos:end="190:38"><expr pos:start="190:38" pos:end="190:38"><name pos:start="190:38" pos:end="190:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="192:5" pos:end="194:5">finally <block pos:start="192:13" pos:end="194:5">{<block_content pos:start="193:7" pos:end="193:23">
      <expr_stmt pos:start="193:7" pos:end="193:23"><expr pos:start="193:7" pos:end="193:22"><call pos:start="193:7" pos:end="193:22"><name pos:start="193:7" pos:end="193:18">closeQuietly</name><argument_list pos:start="193:19" pos:end="193:22">(<argument pos:start="193:20" pos:end="193:21"><expr pos:start="193:20" pos:end="193:21"><name pos:start="193:20" pos:end="193:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="197:3" pos:end="209:5">/**
   * Unpacks a single entry from a ZIP file.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   *
   * @param charset
   *          charset to be used to process the zip
   *
   * @return contents of the entry or &lt;code&gt;null&lt;/code&gt; if it was not found.
   */</comment>
  <function pos:start="210:3" pos:end="227:3"><type pos:start="210:3" pos:end="210:22"><specifier pos:start="210:3" pos:end="210:8">public</specifier> <specifier pos:start="210:10" pos:end="210:15">static</specifier> <name pos:start="210:17" pos:end="210:22"><name pos:start="210:17" pos:end="210:20">byte</name><index pos:start="210:21" pos:end="210:22">[]</index></name></type> <name pos:start="210:24" pos:end="210:34">unpackEntry</name><parameter_list pos:start="210:35" pos:end="210:74">(<parameter pos:start="210:36" pos:end="210:43"><decl pos:start="210:36" pos:end="210:43"><type pos:start="210:36" pos:end="210:43"><name pos:start="210:36" pos:end="210:39">File</name></type> <name pos:start="210:41" pos:end="210:43">zip</name></decl></parameter>, <parameter pos:start="210:46" pos:end="210:56"><decl pos:start="210:46" pos:end="210:56"><type pos:start="210:46" pos:end="210:56"><name pos:start="210:46" pos:end="210:51">String</name></type> <name pos:start="210:53" pos:end="210:56">name</name></decl></parameter>, <parameter pos:start="210:59" pos:end="210:73"><decl pos:start="210:59" pos:end="210:73"><type pos:start="210:59" pos:end="210:73"><name pos:start="210:59" pos:end="210:65">Charset</name></type> <name pos:start="210:67" pos:end="210:73">charset</name></decl></parameter>)</parameter_list> <block pos:start="210:76" pos:end="227:3">{<block_content pos:start="211:5" pos:end="226:5">
    <decl_stmt pos:start="211:5" pos:end="211:22"><decl pos:start="211:5" pos:end="211:21"><type pos:start="211:5" pos:end="211:11"><name pos:start="211:5" pos:end="211:11">ZipFile</name></type> <name pos:start="211:13" pos:end="211:14">zf</name> <init pos:start="211:16" pos:end="211:21">= <expr pos:start="211:18" pos:end="211:21"><literal type="null" pos:start="211:18" pos:end="211:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="212:5" pos:end="226:5">try <block pos:start="212:9" pos:end="220:5">{<block_content pos:start="213:7" pos:end="219:37">
      <if_stmt pos:start="213:7" pos:end="218:7"><if pos:start="213:7" pos:end="215:7">if <condition pos:start="213:10" pos:end="213:26">(<expr pos:start="213:11" pos:end="213:25"><name pos:start="213:11" pos:end="213:17">charset</name> <operator pos:start="213:19" pos:end="213:20">!=</operator> <literal type="null" pos:start="213:22" pos:end="213:25">null</literal></expr>)</condition> <block pos:start="213:28" pos:end="215:7">{<block_content pos:start="214:9" pos:end="214:39">
        <expr_stmt pos:start="214:9" pos:end="214:39"><expr pos:start="214:9" pos:end="214:38"><name pos:start="214:9" pos:end="214:10">zf</name> <operator pos:start="214:12" pos:end="214:12">=</operator> <operator pos:start="214:14" pos:end="214:16">new</operator> <call pos:start="214:18" pos:end="214:38"><name pos:start="214:18" pos:end="214:24">ZipFile</name><argument_list pos:start="214:25" pos:end="214:38">(<argument pos:start="214:26" pos:end="214:28"><expr pos:start="214:26" pos:end="214:28"><name pos:start="214:26" pos:end="214:28">zip</name></expr></argument>, <argument pos:start="214:31" pos:end="214:37"><expr pos:start="214:31" pos:end="214:37"><name pos:start="214:31" pos:end="214:37">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else pos:start="216:7" pos:end="218:7">else <block pos:start="216:12" pos:end="218:7">{<block_content pos:start="217:9" pos:end="217:30">
        <expr_stmt pos:start="217:9" pos:end="217:30"><expr pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:10">zf</name> <operator pos:start="217:12" pos:end="217:12">=</operator> <operator pos:start="217:14" pos:end="217:16">new</operator> <call pos:start="217:18" pos:end="217:29"><name pos:start="217:18" pos:end="217:24">ZipFile</name><argument_list pos:start="217:25" pos:end="217:29">(<argument pos:start="217:26" pos:end="217:28"><expr pos:start="217:26" pos:end="217:28"><name pos:start="217:26" pos:end="217:28">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <return pos:start="219:7" pos:end="219:37">return <expr pos:start="219:14" pos:end="219:36"><call pos:start="219:14" pos:end="219:36"><name pos:start="219:14" pos:end="219:26">doUnpackEntry</name><argument_list pos:start="219:27" pos:end="219:36">(<argument pos:start="219:28" pos:end="219:29"><expr pos:start="219:28" pos:end="219:29"><name pos:start="219:28" pos:end="219:29">zf</name></expr></argument>, <argument pos:start="219:32" pos:end="219:35"><expr pos:start="219:32" pos:end="219:35"><name pos:start="219:32" pos:end="219:35">name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="221:5" pos:end="223:5">catch <parameter_list pos:start="221:11" pos:end="221:25">(<parameter pos:start="221:12" pos:end="221:24"><decl pos:start="221:12" pos:end="221:24"><type pos:start="221:12" pos:end="221:24"><name pos:start="221:12" pos:end="221:22">IOException</name></type> <name pos:start="221:24" pos:end="221:24">e</name></decl></parameter>)</parameter_list> <block pos:start="221:27" pos:end="223:5">{<block_content pos:start="222:7" pos:end="222:40">
      <throw pos:start="222:7" pos:end="222:40">throw <expr pos:start="222:13" pos:end="222:39"><call pos:start="222:13" pos:end="222:39"><name pos:start="222:13" pos:end="222:36"><name pos:start="222:13" pos:end="222:28">ZipExceptionUtil</name><operator pos:start="222:29" pos:end="222:29">.</operator><name pos:start="222:30" pos:end="222:36">rethrow</name></name><argument_list pos:start="222:37" pos:end="222:39">(<argument pos:start="222:38" pos:end="222:38"><expr pos:start="222:38" pos:end="222:38"><name pos:start="222:38" pos:end="222:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="224:5" pos:end="226:5">finally <block pos:start="224:13" pos:end="226:5">{<block_content pos:start="225:7" pos:end="225:23">
      <expr_stmt pos:start="225:7" pos:end="225:23"><expr pos:start="225:7" pos:end="225:22"><call pos:start="225:7" pos:end="225:22"><name pos:start="225:7" pos:end="225:18">closeQuietly</name><argument_list pos:start="225:19" pos:end="225:22">(<argument pos:start="225:20" pos:end="225:21"><expr pos:start="225:20" pos:end="225:21"><name pos:start="225:20" pos:end="225:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="229:3" pos:end="237:5">/**
   * Unpacks a single entry from a ZIP file.
   *
   * @param zf
   *          ZIP file.
   * @param name
   *          entry name.
   * @return contents of the entry or &lt;code&gt;null&lt;/code&gt; if it was not found.
   */</comment>
  <function pos:start="238:3" pos:end="245:3"><type pos:start="238:3" pos:end="238:22"><specifier pos:start="238:3" pos:end="238:8">public</specifier> <specifier pos:start="238:10" pos:end="238:15">static</specifier> <name pos:start="238:17" pos:end="238:22"><name pos:start="238:17" pos:end="238:20">byte</name><index pos:start="238:21" pos:end="238:22">[]</index></name></type> <name pos:start="238:24" pos:end="238:34">unpackEntry</name><parameter_list pos:start="238:35" pos:end="238:59">(<parameter pos:start="238:36" pos:end="238:45"><decl pos:start="238:36" pos:end="238:45"><type pos:start="238:36" pos:end="238:45"><name pos:start="238:36" pos:end="238:42">ZipFile</name></type> <name pos:start="238:44" pos:end="238:45">zf</name></decl></parameter>, <parameter pos:start="238:48" pos:end="238:58"><decl pos:start="238:48" pos:end="238:58"><type pos:start="238:48" pos:end="238:58"><name pos:start="238:48" pos:end="238:53">String</name></type> <name pos:start="238:55" pos:end="238:58">name</name></decl></parameter>)</parameter_list> <block pos:start="238:61" pos:end="245:3">{<block_content pos:start="239:5" pos:end="244:5">
    <try pos:start="239:5" pos:end="244:5">try <block pos:start="239:9" pos:end="241:5">{<block_content pos:start="240:7" pos:end="240:37">
      <return pos:start="240:7" pos:end="240:37">return <expr pos:start="240:14" pos:end="240:36"><call pos:start="240:14" pos:end="240:36"><name pos:start="240:14" pos:end="240:26">doUnpackEntry</name><argument_list pos:start="240:27" pos:end="240:36">(<argument pos:start="240:28" pos:end="240:29"><expr pos:start="240:28" pos:end="240:29"><name pos:start="240:28" pos:end="240:29">zf</name></expr></argument>, <argument pos:start="240:32" pos:end="240:35"><expr pos:start="240:32" pos:end="240:35"><name pos:start="240:32" pos:end="240:35">name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="242:5" pos:end="244:5">catch <parameter_list pos:start="242:11" pos:end="242:25">(<parameter pos:start="242:12" pos:end="242:24"><decl pos:start="242:12" pos:end="242:24"><type pos:start="242:12" pos:end="242:24"><name pos:start="242:12" pos:end="242:22">IOException</name></type> <name pos:start="242:24" pos:end="242:24">e</name></decl></parameter>)</parameter_list> <block pos:start="242:27" pos:end="244:5">{<block_content pos:start="243:7" pos:end="243:40">
      <throw pos:start="243:7" pos:end="243:40">throw <expr pos:start="243:13" pos:end="243:39"><call pos:start="243:13" pos:end="243:39"><name pos:start="243:13" pos:end="243:36"><name pos:start="243:13" pos:end="243:28">ZipExceptionUtil</name><operator pos:start="243:29" pos:end="243:29">.</operator><name pos:start="243:30" pos:end="243:36">rethrow</name></name><argument_list pos:start="243:37" pos:end="243:39">(<argument pos:start="243:38" pos:end="243:38"><expr pos:start="243:38" pos:end="243:38"><name pos:start="243:38" pos:end="243:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="247:3" pos:end="255:5">/**
   * Unpacks a single entry from a ZIP file.
   *
   * @param zf
   *          ZIP file.
   * @param name
   *          entry name.
   * @return contents of the entry or &lt;code&gt;null&lt;/code&gt; if it was not found.
   */</comment>
  <function pos:start="256:3" pos:end="269:3"><type pos:start="256:3" pos:end="256:23"><specifier pos:start="256:3" pos:end="256:9">private</specifier> <specifier pos:start="256:11" pos:end="256:16">static</specifier> <name pos:start="256:18" pos:end="256:23"><name pos:start="256:18" pos:end="256:21">byte</name><index pos:start="256:22" pos:end="256:23">[]</index></name></type> <name pos:start="256:25" pos:end="256:37">doUnpackEntry</name><parameter_list pos:start="256:38" pos:end="256:62">(<parameter pos:start="256:39" pos:end="256:48"><decl pos:start="256:39" pos:end="256:48"><type pos:start="256:39" pos:end="256:48"><name pos:start="256:39" pos:end="256:45">ZipFile</name></type> <name pos:start="256:47" pos:end="256:48">zf</name></decl></parameter>, <parameter pos:start="256:51" pos:end="256:61"><decl pos:start="256:51" pos:end="256:61"><type pos:start="256:51" pos:end="256:61"><name pos:start="256:51" pos:end="256:56">String</name></type> <name pos:start="256:58" pos:end="256:61">name</name></decl></parameter>)</parameter_list> <throws pos:start="256:64" pos:end="256:81">throws <argument pos:start="256:71" pos:end="256:81"><expr pos:start="256:71" pos:end="256:81"><name pos:start="256:71" pos:end="256:81">IOException</name></expr></argument></throws> <block pos:start="256:83" pos:end="269:3">{<block_content pos:start="257:5" pos:end="268:5">
    <decl_stmt pos:start="257:5" pos:end="257:36"><decl pos:start="257:5" pos:end="257:35"><type pos:start="257:5" pos:end="257:12"><name pos:start="257:5" pos:end="257:12">ZipEntry</name></type> <name pos:start="257:14" pos:end="257:15">ze</name> <init pos:start="257:17" pos:end="257:35">= <expr pos:start="257:19" pos:end="257:35"><call pos:start="257:19" pos:end="257:35"><name pos:start="257:19" pos:end="257:29"><name pos:start="257:19" pos:end="257:20">zf</name><operator pos:start="257:21" pos:end="257:21">.</operator><name pos:start="257:22" pos:end="257:29">getEntry</name></name><argument_list pos:start="257:30" pos:end="257:35">(<argument pos:start="257:31" pos:end="257:34"><expr pos:start="257:31" pos:end="257:34"><name pos:start="257:31" pos:end="257:34">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="258:5" pos:end="260:5"><if pos:start="258:5" pos:end="260:5">if <condition pos:start="258:8" pos:end="258:19">(<expr pos:start="258:9" pos:end="258:18"><name pos:start="258:9" pos:end="258:10">ze</name> <operator pos:start="258:12" pos:end="258:13">==</operator> <literal type="null" pos:start="258:15" pos:end="258:18">null</literal></expr>)</condition> <block pos:start="258:21" pos:end="260:5">{<block_content pos:start="259:7" pos:end="259:18">
      <return pos:start="259:7" pos:end="259:18">return <expr pos:start="259:14" pos:end="259:17"><literal type="null" pos:start="259:14" pos:end="259:17">null</literal></expr>;</return> <comment type="line" pos:start="259:20" pos:end="259:37">// entry not found</comment>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="262:5" pos:end="262:43"><decl pos:start="262:5" pos:end="262:42"><type pos:start="262:5" pos:end="262:15"><name pos:start="262:5" pos:end="262:15">InputStream</name></type> <name pos:start="262:17" pos:end="262:18">is</name> <init pos:start="262:20" pos:end="262:42">= <expr pos:start="262:22" pos:end="262:42"><call pos:start="262:22" pos:end="262:42"><name pos:start="262:22" pos:end="262:38"><name pos:start="262:22" pos:end="262:23">zf</name><operator pos:start="262:24" pos:end="262:24">.</operator><name pos:start="262:25" pos:end="262:38">getInputStream</name></name><argument_list pos:start="262:39" pos:end="262:42">(<argument pos:start="262:40" pos:end="262:41"><expr pos:start="262:40" pos:end="262:41"><name pos:start="262:40" pos:end="262:41">ze</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try pos:start="263:5" pos:end="268:5">try <block pos:start="263:9" pos:end="265:5">{<block_content pos:start="264:7" pos:end="264:37">
      <return pos:start="264:7" pos:end="264:37">return <expr pos:start="264:14" pos:end="264:36"><call pos:start="264:14" pos:end="264:36"><name pos:start="264:14" pos:end="264:32"><name pos:start="264:14" pos:end="264:20">IOUtils</name><operator pos:start="264:21" pos:end="264:21">.</operator><name pos:start="264:22" pos:end="264:32">toByteArray</name></name><argument_list pos:start="264:33" pos:end="264:36">(<argument pos:start="264:34" pos:end="264:35"><expr pos:start="264:34" pos:end="264:35"><name pos:start="264:34" pos:end="264:35">is</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <finally pos:start="266:5" pos:end="268:5">finally <block pos:start="266:13" pos:end="268:5">{<block_content pos:start="267:7" pos:end="267:31">
      <expr_stmt pos:start="267:7" pos:end="267:31"><expr pos:start="267:7" pos:end="267:30"><call pos:start="267:7" pos:end="267:30"><name pos:start="267:7" pos:end="267:26"><name pos:start="267:7" pos:end="267:13">IOUtils</name><operator pos:start="267:14" pos:end="267:14">.</operator><name pos:start="267:15" pos:end="267:26">closeQuietly</name></name><argument_list pos:start="267:27" pos:end="267:30">(<argument pos:start="267:28" pos:end="267:29"><expr pos:start="267:28" pos:end="267:29"><name pos:start="267:28" pos:end="267:29">is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="271:3" pos:end="279:5">/**
   * Unpacks a single entry from a ZIP stream.
   *
   * @param is
   *          ZIP stream.
   * @param name
   *          entry name.
   * @return contents of the entry or &lt;code&gt;null&lt;/code&gt; if it was not found.
   */</comment>
  <function pos:start="280:3" pos:end="285:3"><type pos:start="280:3" pos:end="280:22"><specifier pos:start="280:3" pos:end="280:8">public</specifier> <specifier pos:start="280:10" pos:end="280:15">static</specifier> <name pos:start="280:17" pos:end="280:22"><name pos:start="280:17" pos:end="280:20">byte</name><index pos:start="280:21" pos:end="280:22">[]</index></name></type> <name pos:start="280:24" pos:end="280:34">unpackEntry</name><parameter_list pos:start="280:35" pos:end="280:63">(<parameter pos:start="280:36" pos:end="280:49"><decl pos:start="280:36" pos:end="280:49"><type pos:start="280:36" pos:end="280:49"><name pos:start="280:36" pos:end="280:46">InputStream</name></type> <name pos:start="280:48" pos:end="280:49">is</name></decl></parameter>, <parameter pos:start="280:52" pos:end="280:62"><decl pos:start="280:52" pos:end="280:62"><type pos:start="280:52" pos:end="280:62"><name pos:start="280:52" pos:end="280:57">String</name></type> <name pos:start="280:59" pos:end="280:62">name</name></decl></parameter>)</parameter_list> <block pos:start="280:65" pos:end="285:3">{<block_content pos:start="281:5" pos:end="284:29">
    <decl_stmt pos:start="281:5" pos:end="281:55"><decl pos:start="281:5" pos:end="281:54"><type pos:start="281:5" pos:end="281:21"><name pos:start="281:5" pos:end="281:21">ByteArrayUnpacker</name></type> <name pos:start="281:23" pos:end="281:28">action</name> <init pos:start="281:30" pos:end="281:54">= <expr pos:start="281:32" pos:end="281:54"><operator pos:start="281:32" pos:end="281:34">new</operator> <call pos:start="281:36" pos:end="281:54"><name pos:start="281:36" pos:end="281:52">ByteArrayUnpacker</name><argument_list pos:start="281:53" pos:end="281:54">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="282:5" pos:end="283:18"><if pos:start="282:5" pos:end="283:18">if <condition pos:start="282:8" pos:end="282:34">(<expr pos:start="282:9" pos:end="282:33"><operator pos:start="282:9" pos:end="282:9">!</operator><call pos:start="282:10" pos:end="282:33"><name pos:start="282:10" pos:end="282:15">handle</name><argument_list pos:start="282:16" pos:end="282:33">(<argument pos:start="282:17" pos:end="282:18"><expr pos:start="282:17" pos:end="282:18"><name pos:start="282:17" pos:end="282:18">is</name></expr></argument>, <argument pos:start="282:21" pos:end="282:24"><expr pos:start="282:21" pos:end="282:24"><name pos:start="282:21" pos:end="282:24">name</name></expr></argument>, <argument pos:start="282:27" pos:end="282:32"><expr pos:start="282:27" pos:end="282:32"><name pos:start="282:27" pos:end="282:32">action</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="283:7" pos:end="283:18"><block_content pos:start="283:7" pos:end="283:18">
      <return pos:start="283:7" pos:end="283:18">return <expr pos:start="283:14" pos:end="283:17"><literal type="null" pos:start="283:14" pos:end="283:17">null</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="283:20" pos:end="283:37">// entry not found</comment>
    <return pos:start="284:5" pos:end="284:29">return <expr pos:start="284:12" pos:end="284:28"><call pos:start="284:12" pos:end="284:28"><name pos:start="284:12" pos:end="284:26"><name pos:start="284:12" pos:end="284:17">action</name><operator pos:start="284:18" pos:end="284:18">.</operator><name pos:start="284:19" pos:end="284:26">getBytes</name></name><argument_list pos:start="284:27" pos:end="284:28">()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="287:3" pos:end="291:5">/**
   * Copies an entry into a byte array.
   *
   * @author Rein RaudjÃ¤rv
   */</comment>
  <class pos:start="292:3" pos:end="304:3"><specifier pos:start="292:3" pos:end="292:9">private</specifier> <specifier pos:start="292:11" pos:end="292:16">static</specifier> class <name pos:start="292:24" pos:end="292:40">ByteArrayUnpacker</name> <super_list pos:start="292:42" pos:end="292:68"><implements pos:start="292:42" pos:end="292:68">implements <super pos:start="292:53" pos:end="292:68"><name pos:start="292:53" pos:end="292:68">ZipEntryCallback</name></super></implements></super_list> <block pos:start="292:70" pos:end="304:3">{

    <decl_stmt pos:start="294:5" pos:end="294:25"><decl pos:start="294:5" pos:end="294:24"><type pos:start="294:5" pos:end="294:18"><specifier pos:start="294:5" pos:end="294:11">private</specifier> <name pos:start="294:13" pos:end="294:18"><name pos:start="294:13" pos:end="294:16">byte</name><index pos:start="294:17" pos:end="294:18">[]</index></name></type> <name pos:start="294:20" pos:end="294:24">bytes</name></decl>;</decl_stmt>

    <function pos:start="296:5" pos:end="298:5"><type pos:start="296:5" pos:end="296:15"><specifier pos:start="296:5" pos:end="296:10">public</specifier> <name pos:start="296:12" pos:end="296:15">void</name></type> <name pos:start="296:17" pos:end="296:23">process</name><parameter_list pos:start="296:24" pos:end="296:58">(<parameter pos:start="296:25" pos:end="296:38"><decl pos:start="296:25" pos:end="296:38"><type pos:start="296:25" pos:end="296:38"><name pos:start="296:25" pos:end="296:35">InputStream</name></type> <name pos:start="296:37" pos:end="296:38">in</name></decl></parameter>, <parameter pos:start="296:41" pos:end="296:57"><decl pos:start="296:41" pos:end="296:57"><type pos:start="296:41" pos:end="296:57"><name pos:start="296:41" pos:end="296:48">ZipEntry</name></type> <name pos:start="296:50" pos:end="296:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="296:60" pos:end="296:77">throws <argument pos:start="296:67" pos:end="296:77"><expr pos:start="296:67" pos:end="296:77"><name pos:start="296:67" pos:end="296:77">IOException</name></expr></argument></throws> <block pos:start="296:79" pos:end="298:5">{<block_content pos:start="297:7" pos:end="297:38">
      <expr_stmt pos:start="297:7" pos:end="297:38"><expr pos:start="297:7" pos:end="297:37"><name pos:start="297:7" pos:end="297:11">bytes</name> <operator pos:start="297:13" pos:end="297:13">=</operator> <call pos:start="297:15" pos:end="297:37"><name pos:start="297:15" pos:end="297:33"><name pos:start="297:15" pos:end="297:21">IOUtils</name><operator pos:start="297:22" pos:end="297:22">.</operator><name pos:start="297:23" pos:end="297:33">toByteArray</name></name><argument_list pos:start="297:34" pos:end="297:37">(<argument pos:start="297:35" pos:end="297:36"><expr pos:start="297:35" pos:end="297:36"><name pos:start="297:35" pos:end="297:36">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="300:5" pos:end="302:5"><type pos:start="300:5" pos:end="300:17"><specifier pos:start="300:5" pos:end="300:10">public</specifier> <name pos:start="300:12" pos:end="300:17"><name pos:start="300:12" pos:end="300:15">byte</name><index pos:start="300:16" pos:end="300:17">[]</index></name></type> <name pos:start="300:19" pos:end="300:26">getBytes</name><parameter_list pos:start="300:27" pos:end="300:28">()</parameter_list> <block pos:start="300:30" pos:end="302:5">{<block_content pos:start="301:7" pos:end="301:19">
      <return pos:start="301:7" pos:end="301:19">return <expr pos:start="301:14" pos:end="301:18"><name pos:start="301:14" pos:end="301:18">bytes</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <comment type="block" format="javadoc" pos:start="306:3" pos:end="317:5">/**
   * Unpacks a single file from a ZIP archive to a file.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   * @param file
   *          target file to be created or overwritten.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found and unpacked,
   *         &lt;code&gt;false&lt;/code&gt; if the entry was not found.
   */</comment>
  <function pos:start="318:3" pos:end="320:3"><type pos:start="318:3" pos:end="318:23"><specifier pos:start="318:3" pos:end="318:8">public</specifier> <specifier pos:start="318:10" pos:end="318:15">static</specifier> <name pos:start="318:17" pos:end="318:23">boolean</name></type> <name pos:start="318:25" pos:end="318:35">unpackEntry</name><parameter_list pos:start="318:36" pos:end="318:69">(<parameter pos:start="318:37" pos:end="318:44"><decl pos:start="318:37" pos:end="318:44"><type pos:start="318:37" pos:end="318:44"><name pos:start="318:37" pos:end="318:40">File</name></type> <name pos:start="318:42" pos:end="318:44">zip</name></decl></parameter>, <parameter pos:start="318:47" pos:end="318:57"><decl pos:start="318:47" pos:end="318:57"><type pos:start="318:47" pos:end="318:57"><name pos:start="318:47" pos:end="318:52">String</name></type> <name pos:start="318:54" pos:end="318:57">name</name></decl></parameter>, <parameter pos:start="318:60" pos:end="318:68"><decl pos:start="318:60" pos:end="318:68"><type pos:start="318:60" pos:end="318:68"><name pos:start="318:60" pos:end="318:63">File</name></type> <name pos:start="318:65" pos:end="318:68">file</name></decl></parameter>)</parameter_list> <block pos:start="318:71" pos:end="320:3">{<block_content pos:start="319:5" pos:end="319:46">
    <return pos:start="319:5" pos:end="319:46">return <expr pos:start="319:12" pos:end="319:45"><call pos:start="319:12" pos:end="319:45"><name pos:start="319:12" pos:end="319:22">unpackEntry</name><argument_list pos:start="319:23" pos:end="319:45">(<argument pos:start="319:24" pos:end="319:26"><expr pos:start="319:24" pos:end="319:26"><name pos:start="319:24" pos:end="319:26">zip</name></expr></argument>, <argument pos:start="319:29" pos:end="319:32"><expr pos:start="319:29" pos:end="319:32"><name pos:start="319:29" pos:end="319:32">name</name></expr></argument>, <argument pos:start="319:35" pos:end="319:38"><expr pos:start="319:35" pos:end="319:38"><name pos:start="319:35" pos:end="319:38">file</name></expr></argument>, <argument pos:start="319:41" pos:end="319:44"><expr pos:start="319:41" pos:end="319:44"><literal type="null" pos:start="319:41" pos:end="319:44">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="322:3" pos:end="336:5">/**
   * Unpacks a single file from a ZIP archive to a file.
   *
   * @param zip
   *          ZIP file.
   * @param name
   *          entry name.
   * @param file
   *          target file to be created or overwritten.
   * @param charset
   *          charset to be used processing the zip
   *
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found and unpacked,
   *         &lt;code&gt;false&lt;/code&gt; if the entry was not found.
   */</comment>
  <function pos:start="337:3" pos:end="354:3"><type pos:start="337:3" pos:end="337:23"><specifier pos:start="337:3" pos:end="337:8">public</specifier> <specifier pos:start="337:10" pos:end="337:15">static</specifier> <name pos:start="337:17" pos:end="337:23">boolean</name></type> <name pos:start="337:25" pos:end="337:35">unpackEntry</name><parameter_list pos:start="337:36" pos:end="337:86">(<parameter pos:start="337:37" pos:end="337:44"><decl pos:start="337:37" pos:end="337:44"><type pos:start="337:37" pos:end="337:44"><name pos:start="337:37" pos:end="337:40">File</name></type> <name pos:start="337:42" pos:end="337:44">zip</name></decl></parameter>, <parameter pos:start="337:47" pos:end="337:57"><decl pos:start="337:47" pos:end="337:57"><type pos:start="337:47" pos:end="337:57"><name pos:start="337:47" pos:end="337:52">String</name></type> <name pos:start="337:54" pos:end="337:57">name</name></decl></parameter>, <parameter pos:start="337:60" pos:end="337:68"><decl pos:start="337:60" pos:end="337:68"><type pos:start="337:60" pos:end="337:68"><name pos:start="337:60" pos:end="337:63">File</name></type> <name pos:start="337:65" pos:end="337:68">file</name></decl></parameter>, <parameter pos:start="337:71" pos:end="337:85"><decl pos:start="337:71" pos:end="337:85"><type pos:start="337:71" pos:end="337:85"><name pos:start="337:71" pos:end="337:77">Charset</name></type> <name pos:start="337:79" pos:end="337:85">charset</name></decl></parameter>)</parameter_list> <block pos:start="337:88" pos:end="354:3">{<block_content pos:start="338:5" pos:end="353:5">
    <decl_stmt pos:start="338:5" pos:end="338:22"><decl pos:start="338:5" pos:end="338:21"><type pos:start="338:5" pos:end="338:11"><name pos:start="338:5" pos:end="338:11">ZipFile</name></type> <name pos:start="338:13" pos:end="338:14">zf</name> <init pos:start="338:16" pos:end="338:21">= <expr pos:start="338:18" pos:end="338:21"><literal type="null" pos:start="338:18" pos:end="338:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="339:5" pos:end="353:5">try <block pos:start="339:9" pos:end="347:5">{<block_content pos:start="340:7" pos:end="346:43">
      <if_stmt pos:start="340:7" pos:end="345:7"><if pos:start="340:7" pos:end="342:7">if <condition pos:start="340:10" pos:end="340:26">(<expr pos:start="340:11" pos:end="340:25"><name pos:start="340:11" pos:end="340:17">charset</name> <operator pos:start="340:19" pos:end="340:20">!=</operator> <literal type="null" pos:start="340:22" pos:end="340:25">null</literal></expr>)</condition> <block pos:start="340:28" pos:end="342:7">{<block_content pos:start="341:9" pos:end="341:39">
        <expr_stmt pos:start="341:9" pos:end="341:39"><expr pos:start="341:9" pos:end="341:38"><name pos:start="341:9" pos:end="341:10">zf</name> <operator pos:start="341:12" pos:end="341:12">=</operator> <operator pos:start="341:14" pos:end="341:16">new</operator> <call pos:start="341:18" pos:end="341:38"><name pos:start="341:18" pos:end="341:24">ZipFile</name><argument_list pos:start="341:25" pos:end="341:38">(<argument pos:start="341:26" pos:end="341:28"><expr pos:start="341:26" pos:end="341:28"><name pos:start="341:26" pos:end="341:28">zip</name></expr></argument>, <argument pos:start="341:31" pos:end="341:37"><expr pos:start="341:31" pos:end="341:37"><name pos:start="341:31" pos:end="341:37">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else pos:start="343:7" pos:end="345:7">else <block pos:start="343:12" pos:end="345:7">{<block_content pos:start="344:9" pos:end="344:30">
        <expr_stmt pos:start="344:9" pos:end="344:30"><expr pos:start="344:9" pos:end="344:29"><name pos:start="344:9" pos:end="344:10">zf</name> <operator pos:start="344:12" pos:end="344:12">=</operator> <operator pos:start="344:14" pos:end="344:16">new</operator> <call pos:start="344:18" pos:end="344:29"><name pos:start="344:18" pos:end="344:24">ZipFile</name><argument_list pos:start="344:25" pos:end="344:29">(<argument pos:start="344:26" pos:end="344:28"><expr pos:start="344:26" pos:end="344:28"><name pos:start="344:26" pos:end="344:28">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <return pos:start="346:7" pos:end="346:43">return <expr pos:start="346:14" pos:end="346:42"><call pos:start="346:14" pos:end="346:42"><name pos:start="346:14" pos:end="346:26">doUnpackEntry</name><argument_list pos:start="346:27" pos:end="346:42">(<argument pos:start="346:28" pos:end="346:29"><expr pos:start="346:28" pos:end="346:29"><name pos:start="346:28" pos:end="346:29">zf</name></expr></argument>, <argument pos:start="346:32" pos:end="346:35"><expr pos:start="346:32" pos:end="346:35"><name pos:start="346:32" pos:end="346:35">name</name></expr></argument>, <argument pos:start="346:38" pos:end="346:41"><expr pos:start="346:38" pos:end="346:41"><name pos:start="346:38" pos:end="346:41">file</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="348:5" pos:end="350:5">catch <parameter_list pos:start="348:11" pos:end="348:25">(<parameter pos:start="348:12" pos:end="348:24"><decl pos:start="348:12" pos:end="348:24"><type pos:start="348:12" pos:end="348:24"><name pos:start="348:12" pos:end="348:22">IOException</name></type> <name pos:start="348:24" pos:end="348:24">e</name></decl></parameter>)</parameter_list> <block pos:start="348:27" pos:end="350:5">{<block_content pos:start="349:7" pos:end="349:40">
      <throw pos:start="349:7" pos:end="349:40">throw <expr pos:start="349:13" pos:end="349:39"><call pos:start="349:13" pos:end="349:39"><name pos:start="349:13" pos:end="349:36"><name pos:start="349:13" pos:end="349:28">ZipExceptionUtil</name><operator pos:start="349:29" pos:end="349:29">.</operator><name pos:start="349:30" pos:end="349:36">rethrow</name></name><argument_list pos:start="349:37" pos:end="349:39">(<argument pos:start="349:38" pos:end="349:38"><expr pos:start="349:38" pos:end="349:38"><name pos:start="349:38" pos:end="349:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="351:5" pos:end="353:5">finally <block pos:start="351:13" pos:end="353:5">{<block_content pos:start="352:7" pos:end="352:23">
      <expr_stmt pos:start="352:7" pos:end="352:23"><expr pos:start="352:7" pos:end="352:22"><call pos:start="352:7" pos:end="352:22"><name pos:start="352:7" pos:end="352:18">closeQuietly</name><argument_list pos:start="352:19" pos:end="352:22">(<argument pos:start="352:20" pos:end="352:21"><expr pos:start="352:20" pos:end="352:21"><name pos:start="352:20" pos:end="352:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="356:3" pos:end="367:5">/**
   * Unpacks a single file from a ZIP archive to a file.
   *
   * @param zf
   *          ZIP file.
   * @param name
   *          entry name.
   * @param file
   *          target file to be created or overwritten.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found and unpacked,
   *         &lt;code&gt;false&lt;/code&gt; if the entry was not found.
   */</comment>
  <function pos:start="368:3" pos:end="375:3"><type pos:start="368:3" pos:end="368:23"><specifier pos:start="368:3" pos:end="368:8">public</specifier> <specifier pos:start="368:10" pos:end="368:15">static</specifier> <name pos:start="368:17" pos:end="368:23">boolean</name></type> <name pos:start="368:25" pos:end="368:35">unpackEntry</name><parameter_list pos:start="368:36" pos:end="368:71">(<parameter pos:start="368:37" pos:end="368:46"><decl pos:start="368:37" pos:end="368:46"><type pos:start="368:37" pos:end="368:46"><name pos:start="368:37" pos:end="368:43">ZipFile</name></type> <name pos:start="368:45" pos:end="368:46">zf</name></decl></parameter>, <parameter pos:start="368:49" pos:end="368:59"><decl pos:start="368:49" pos:end="368:59"><type pos:start="368:49" pos:end="368:59"><name pos:start="368:49" pos:end="368:54">String</name></type> <name pos:start="368:56" pos:end="368:59">name</name></decl></parameter>, <parameter pos:start="368:62" pos:end="368:70"><decl pos:start="368:62" pos:end="368:70"><type pos:start="368:62" pos:end="368:70"><name pos:start="368:62" pos:end="368:65">File</name></type> <name pos:start="368:67" pos:end="368:70">file</name></decl></parameter>)</parameter_list> <block pos:start="368:73" pos:end="375:3">{<block_content pos:start="369:5" pos:end="374:5">
    <try pos:start="369:5" pos:end="374:5">try <block pos:start="369:9" pos:end="371:5">{<block_content pos:start="370:7" pos:end="370:43">
      <return pos:start="370:7" pos:end="370:43">return <expr pos:start="370:14" pos:end="370:42"><call pos:start="370:14" pos:end="370:42"><name pos:start="370:14" pos:end="370:26">doUnpackEntry</name><argument_list pos:start="370:27" pos:end="370:42">(<argument pos:start="370:28" pos:end="370:29"><expr pos:start="370:28" pos:end="370:29"><name pos:start="370:28" pos:end="370:29">zf</name></expr></argument>, <argument pos:start="370:32" pos:end="370:35"><expr pos:start="370:32" pos:end="370:35"><name pos:start="370:32" pos:end="370:35">name</name></expr></argument>, <argument pos:start="370:38" pos:end="370:41"><expr pos:start="370:38" pos:end="370:41"><name pos:start="370:38" pos:end="370:41">file</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="372:5" pos:end="374:5">catch <parameter_list pos:start="372:11" pos:end="372:25">(<parameter pos:start="372:12" pos:end="372:24"><decl pos:start="372:12" pos:end="372:24"><type pos:start="372:12" pos:end="372:24"><name pos:start="372:12" pos:end="372:22">IOException</name></type> <name pos:start="372:24" pos:end="372:24">e</name></decl></parameter>)</parameter_list> <block pos:start="372:27" pos:end="374:5">{<block_content pos:start="373:7" pos:end="373:40">
      <throw pos:start="373:7" pos:end="373:40">throw <expr pos:start="373:13" pos:end="373:39"><call pos:start="373:13" pos:end="373:39"><name pos:start="373:13" pos:end="373:36"><name pos:start="373:13" pos:end="373:28">ZipExceptionUtil</name><operator pos:start="373:29" pos:end="373:29">.</operator><name pos:start="373:30" pos:end="373:36">rethrow</name></name><argument_list pos:start="373:37" pos:end="373:39">(<argument pos:start="373:38" pos:end="373:38"><expr pos:start="373:38" pos:end="373:38"><name pos:start="373:38" pos:end="373:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="377:3" pos:end="388:5">/**
   * Unpacks a single file from a ZIP archive to a file.
   *
   * @param zf
   *          ZIP file.
   * @param name
   *          entry name.
   * @param file
   *          target file to be created or overwritten.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found and unpacked,
   *         &lt;code&gt;false&lt;/code&gt; if the entry was not found.
   */</comment>
  <function pos:start="389:3" pos:end="417:3"><type pos:start="389:3" pos:end="389:24"><specifier pos:start="389:3" pos:end="389:9">private</specifier> <specifier pos:start="389:11" pos:end="389:16">static</specifier> <name pos:start="389:18" pos:end="389:24">boolean</name></type> <name pos:start="389:26" pos:end="389:38">doUnpackEntry</name><parameter_list pos:start="389:39" pos:end="389:74">(<parameter pos:start="389:40" pos:end="389:49"><decl pos:start="389:40" pos:end="389:49"><type pos:start="389:40" pos:end="389:49"><name pos:start="389:40" pos:end="389:46">ZipFile</name></type> <name pos:start="389:48" pos:end="389:49">zf</name></decl></parameter>, <parameter pos:start="389:52" pos:end="389:62"><decl pos:start="389:52" pos:end="389:62"><type pos:start="389:52" pos:end="389:62"><name pos:start="389:52" pos:end="389:57">String</name></type> <name pos:start="389:59" pos:end="389:62">name</name></decl></parameter>, <parameter pos:start="389:65" pos:end="389:73"><decl pos:start="389:65" pos:end="389:73"><type pos:start="389:65" pos:end="389:73"><name pos:start="389:65" pos:end="389:68">File</name></type> <name pos:start="389:70" pos:end="389:73">file</name></decl></parameter>)</parameter_list> <throws pos:start="389:76" pos:end="389:93">throws <argument pos:start="389:83" pos:end="389:93"><expr pos:start="389:83" pos:end="389:93"><name pos:start="389:83" pos:end="389:93">IOException</name></expr></argument></throws> <block pos:start="389:95" pos:end="417:3">{<block_content pos:start="390:5" pos:end="416:16">
    <if_stmt pos:start="390:5" pos:end="392:5"><if pos:start="390:5" pos:end="392:5">if <condition pos:start="390:8" pos:end="390:29">(<expr pos:start="390:9" pos:end="390:28"><call pos:start="390:9" pos:end="390:28"><name pos:start="390:9" pos:end="390:26"><name pos:start="390:9" pos:end="390:11">log</name><operator pos:start="390:12" pos:end="390:12">.</operator><name pos:start="390:13" pos:end="390:26">isTraceEnabled</name></name><argument_list pos:start="390:27" pos:end="390:28">()</argument_list></call></expr>)</condition> <block pos:start="390:31" pos:end="392:5">{<block_content pos:start="391:7" pos:end="391:95">
      <expr_stmt pos:start="391:7" pos:end="391:95"><expr pos:start="391:7" pos:end="391:94"><call pos:start="391:7" pos:end="391:94"><name pos:start="391:7" pos:end="391:15"><name pos:start="391:7" pos:end="391:9">log</name><operator pos:start="391:10" pos:end="391:10">.</operator><name pos:start="391:11" pos:end="391:15">trace</name></name><argument_list pos:start="391:16" pos:end="391:94">(<argument pos:start="391:17" pos:end="391:93"><expr pos:start="391:17" pos:end="391:93"><literal type="string" pos:start="391:17" pos:end="391:30">"Extracting '"</literal> <operator pos:start="391:32" pos:end="391:32">+</operator> <call pos:start="391:34" pos:end="391:45"><name pos:start="391:34" pos:end="391:43"><name pos:start="391:34" pos:end="391:35">zf</name><operator pos:start="391:36" pos:end="391:36">.</operator><name pos:start="391:37" pos:end="391:43">getName</name></name><argument_list pos:start="391:44" pos:end="391:45">()</argument_list></call> <operator pos:start="391:47" pos:end="391:47">+</operator> <literal type="string" pos:start="391:49" pos:end="391:59">"' entry '"</literal> <operator pos:start="391:61" pos:end="391:61">+</operator> <name pos:start="391:63" pos:end="391:66">name</name> <operator pos:start="391:68" pos:end="391:68">+</operator> <literal type="string" pos:start="391:70" pos:end="391:79">"' into '"</literal> <operator pos:start="391:81" pos:end="391:81">+</operator> <name pos:start="391:83" pos:end="391:86">file</name> <operator pos:start="391:88" pos:end="391:88">+</operator> <literal type="string" pos:start="391:90" pos:end="391:93">"'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="394:5" pos:end="394:36"><decl pos:start="394:5" pos:end="394:35"><type pos:start="394:5" pos:end="394:12"><name pos:start="394:5" pos:end="394:12">ZipEntry</name></type> <name pos:start="394:14" pos:end="394:15">ze</name> <init pos:start="394:17" pos:end="394:35">= <expr pos:start="394:19" pos:end="394:35"><call pos:start="394:19" pos:end="394:35"><name pos:start="394:19" pos:end="394:29"><name pos:start="394:19" pos:end="394:20">zf</name><operator pos:start="394:21" pos:end="394:21">.</operator><name pos:start="394:22" pos:end="394:29">getEntry</name></name><argument_list pos:start="394:30" pos:end="394:35">(<argument pos:start="394:31" pos:end="394:34"><expr pos:start="394:31" pos:end="394:34"><name pos:start="394:31" pos:end="394:34">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="395:5" pos:end="397:5"><if pos:start="395:5" pos:end="397:5">if <condition pos:start="395:8" pos:end="395:19">(<expr pos:start="395:9" pos:end="395:18"><name pos:start="395:9" pos:end="395:10">ze</name> <operator pos:start="395:12" pos:end="395:13">==</operator> <literal type="null" pos:start="395:15" pos:end="395:18">null</literal></expr>)</condition> <block pos:start="395:21" pos:end="397:5">{<block_content pos:start="396:7" pos:end="396:19">
      <return pos:start="396:7" pos:end="396:19">return <expr pos:start="396:14" pos:end="396:18"><literal type="boolean" pos:start="396:14" pos:end="396:18">false</literal></expr>;</return> <comment type="line" pos:start="396:21" pos:end="396:38">// entry not found</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="399:5" pos:end="407:5"><if pos:start="399:5" pos:end="407:5">if <condition pos:start="399:8" pos:end="399:58">(<expr pos:start="399:9" pos:end="399:57"><call pos:start="399:9" pos:end="399:24"><name pos:start="399:9" pos:end="399:22"><name pos:start="399:9" pos:end="399:10">ze</name><operator pos:start="399:11" pos:end="399:11">.</operator><name pos:start="399:12" pos:end="399:22">isDirectory</name></name><argument_list pos:start="399:23" pos:end="399:24">()</argument_list></call> <operator pos:start="399:26" pos:end="399:27">||</operator> <call pos:start="399:29" pos:end="399:49"><name pos:start="399:29" pos:end="399:45"><name pos:start="399:29" pos:end="399:30">zf</name><operator pos:start="399:31" pos:end="399:31">.</operator><name pos:start="399:32" pos:end="399:45">getInputStream</name></name><argument_list pos:start="399:46" pos:end="399:49">(<argument pos:start="399:47" pos:end="399:48"><expr pos:start="399:47" pos:end="399:48"><name pos:start="399:47" pos:end="399:48">ze</name></expr></argument>)</argument_list></call> <operator pos:start="399:51" pos:end="399:52">==</operator> <literal type="null" pos:start="399:54" pos:end="399:57">null</literal></expr>)</condition> <block pos:start="399:60" pos:end="407:5">{<block_content pos:start="400:7" pos:end="406:27">
      <if_stmt pos:start="400:7" pos:end="402:7"><if pos:start="400:7" pos:end="402:7">if <condition pos:start="400:10" pos:end="400:29">(<expr pos:start="400:11" pos:end="400:28"><call pos:start="400:11" pos:end="400:28"><name pos:start="400:11" pos:end="400:26"><name pos:start="400:11" pos:end="400:14">file</name><operator pos:start="400:15" pos:end="400:15">.</operator><name pos:start="400:16" pos:end="400:26">isDirectory</name></name><argument_list pos:start="400:27" pos:end="400:28">()</argument_list></call></expr>)</condition> <block pos:start="400:31" pos:end="402:7">{<block_content pos:start="401:9" pos:end="401:20">
        <return pos:start="401:9" pos:end="401:20">return <expr pos:start="401:16" pos:end="401:19"><literal type="boolean" pos:start="401:16" pos:end="401:19">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt pos:start="403:7" pos:end="405:7"><if pos:start="403:7" pos:end="405:7">if <condition pos:start="403:10" pos:end="403:24">(<expr pos:start="403:11" pos:end="403:23"><call pos:start="403:11" pos:end="403:23"><name pos:start="403:11" pos:end="403:21"><name pos:start="403:11" pos:end="403:14">file</name><operator pos:start="403:15" pos:end="403:15">.</operator><name pos:start="403:16" pos:end="403:21">exists</name></name><argument_list pos:start="403:22" pos:end="403:23">()</argument_list></call></expr>)</condition> <block pos:start="403:26" pos:end="405:7">{<block_content pos:start="404:9" pos:end="404:36">
        <expr_stmt pos:start="404:9" pos:end="404:36"><expr pos:start="404:9" pos:end="404:35"><call pos:start="404:9" pos:end="404:35"><name pos:start="404:9" pos:end="404:29"><name pos:start="404:9" pos:end="404:17">FileUtils</name><operator pos:start="404:18" pos:end="404:18">.</operator><name pos:start="404:19" pos:end="404:29">forceDelete</name></name><argument_list pos:start="404:30" pos:end="404:35">(<argument pos:start="404:31" pos:end="404:34"><expr pos:start="404:31" pos:end="404:34"><name pos:start="404:31" pos:end="404:34">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return pos:start="406:7" pos:end="406:27">return <expr pos:start="406:14" pos:end="406:26"><call pos:start="406:14" pos:end="406:26"><name pos:start="406:14" pos:end="406:24"><name pos:start="406:14" pos:end="406:17">file</name><operator pos:start="406:18" pos:end="406:18">.</operator><name pos:start="406:19" pos:end="406:24">mkdirs</name></name><argument_list pos:start="406:25" pos:end="406:26">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="409:5" pos:end="409:68"><decl pos:start="409:5" pos:end="409:67"><type pos:start="409:5" pos:end="409:15"><name pos:start="409:5" pos:end="409:15">InputStream</name></type> <name pos:start="409:17" pos:end="409:18">in</name> <init pos:start="409:20" pos:end="409:67">= <expr pos:start="409:22" pos:end="409:67"><operator pos:start="409:22" pos:end="409:24">new</operator> <call pos:start="409:26" pos:end="409:67"><name pos:start="409:26" pos:end="409:44">BufferedInputStream</name><argument_list pos:start="409:45" pos:end="409:67">(<argument pos:start="409:46" pos:end="409:66"><expr pos:start="409:46" pos:end="409:66"><call pos:start="409:46" pos:end="409:66"><name pos:start="409:46" pos:end="409:62"><name pos:start="409:46" pos:end="409:47">zf</name><operator pos:start="409:48" pos:end="409:48">.</operator><name pos:start="409:49" pos:end="409:62">getInputStream</name></name><argument_list pos:start="409:63" pos:end="409:66">(<argument pos:start="409:64" pos:end="409:65"><expr pos:start="409:64" pos:end="409:65"><name pos:start="409:64" pos:end="409:65">ze</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try pos:start="410:5" pos:end="415:5">try <block pos:start="410:9" pos:end="412:5">{<block_content pos:start="411:7" pos:end="411:31">
      <expr_stmt pos:start="411:7" pos:end="411:31"><expr pos:start="411:7" pos:end="411:30"><call pos:start="411:7" pos:end="411:30"><name pos:start="411:7" pos:end="411:20"><name pos:start="411:7" pos:end="411:15">FileUtils</name><operator pos:start="411:16" pos:end="411:16">.</operator><name pos:start="411:17" pos:end="411:20">copy</name></name><argument_list pos:start="411:21" pos:end="411:30">(<argument pos:start="411:22" pos:end="411:23"><expr pos:start="411:22" pos:end="411:23"><name pos:start="411:22" pos:end="411:23">in</name></expr></argument>, <argument pos:start="411:26" pos:end="411:29"><expr pos:start="411:26" pos:end="411:29"><name pos:start="411:26" pos:end="411:29">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <finally pos:start="413:5" pos:end="415:5">finally <block pos:start="413:13" pos:end="415:5">{<block_content pos:start="414:7" pos:end="414:31">
      <expr_stmt pos:start="414:7" pos:end="414:31"><expr pos:start="414:7" pos:end="414:30"><call pos:start="414:7" pos:end="414:30"><name pos:start="414:7" pos:end="414:26"><name pos:start="414:7" pos:end="414:13">IOUtils</name><operator pos:start="414:14" pos:end="414:14">.</operator><name pos:start="414:15" pos:end="414:26">closeQuietly</name></name><argument_list pos:start="414:27" pos:end="414:30">(<argument pos:start="414:28" pos:end="414:29"><expr pos:start="414:28" pos:end="414:29"><name pos:start="414:28" pos:end="414:29">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
    <return pos:start="416:5" pos:end="416:16">return <expr pos:start="416:12" pos:end="416:15"><literal type="boolean" pos:start="416:12" pos:end="416:15">true</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="419:3" pos:end="431:5">/**
   * Unpacks a single file from a ZIP stream to a file.
   *
   * @param is
   *          ZIP stream.
   * @param name
   *          entry name.
   * @param file
   *          target file to be created or overwritten.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found and unpacked,
   *         &lt;code&gt;false&lt;/code&gt; if the entry was not found.
   * @throws java.io.IOException if file is not found or writing to it fails
   */</comment>
  <function pos:start="432:3" pos:end="434:3"><type pos:start="432:3" pos:end="432:23"><specifier pos:start="432:3" pos:end="432:8">public</specifier> <specifier pos:start="432:10" pos:end="432:15">static</specifier> <name pos:start="432:17" pos:end="432:23">boolean</name></type> <name pos:start="432:25" pos:end="432:35">unpackEntry</name><parameter_list pos:start="432:36" pos:end="432:75">(<parameter pos:start="432:37" pos:end="432:50"><decl pos:start="432:37" pos:end="432:50"><type pos:start="432:37" pos:end="432:50"><name pos:start="432:37" pos:end="432:47">InputStream</name></type> <name pos:start="432:49" pos:end="432:50">is</name></decl></parameter>, <parameter pos:start="432:53" pos:end="432:63"><decl pos:start="432:53" pos:end="432:63"><type pos:start="432:53" pos:end="432:63"><name pos:start="432:53" pos:end="432:58">String</name></type> <name pos:start="432:60" pos:end="432:63">name</name></decl></parameter>, <parameter pos:start="432:66" pos:end="432:74"><decl pos:start="432:66" pos:end="432:74"><type pos:start="432:66" pos:end="432:74"><name pos:start="432:66" pos:end="432:69">File</name></type> <name pos:start="432:71" pos:end="432:74">file</name></decl></parameter>)</parameter_list> <throws pos:start="432:77" pos:end="432:94">throws <argument pos:start="432:84" pos:end="432:94"><expr pos:start="432:84" pos:end="432:94"><name pos:start="432:84" pos:end="432:94">IOException</name></expr></argument></throws> <block pos:start="432:96" pos:end="434:3">{<block_content pos:start="433:5" pos:end="433:52">
    <return pos:start="433:5" pos:end="433:52">return <expr pos:start="433:12" pos:end="433:51"><call pos:start="433:12" pos:end="433:51"><name pos:start="433:12" pos:end="433:17">handle</name><argument_list pos:start="433:18" pos:end="433:51">(<argument pos:start="433:19" pos:end="433:20"><expr pos:start="433:19" pos:end="433:20"><name pos:start="433:19" pos:end="433:20">is</name></expr></argument>, <argument pos:start="433:23" pos:end="433:26"><expr pos:start="433:23" pos:end="433:26"><name pos:start="433:23" pos:end="433:26">name</name></expr></argument>, <argument pos:start="433:29" pos:end="433:50"><expr pos:start="433:29" pos:end="433:50"><operator pos:start="433:29" pos:end="433:31">new</operator> <call pos:start="433:33" pos:end="433:50"><name pos:start="433:33" pos:end="433:44">FileUnpacker</name><argument_list pos:start="433:45" pos:end="433:50">(<argument pos:start="433:46" pos:end="433:49"><expr pos:start="433:46" pos:end="433:49"><name pos:start="433:46" pos:end="433:49">file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="436:3" pos:end="440:5">/**
   * Copies an entry into a File.
   *
   * @author Rein RaudjÃ¤rv
   */</comment>
  <class pos:start="441:3" pos:end="453:3"><specifier pos:start="441:3" pos:end="441:9">private</specifier> <specifier pos:start="441:11" pos:end="441:16">static</specifier> class <name pos:start="441:24" pos:end="441:35">FileUnpacker</name> <super_list pos:start="441:37" pos:end="441:63"><implements pos:start="441:37" pos:end="441:63">implements <super pos:start="441:48" pos:end="441:63"><name pos:start="441:48" pos:end="441:63">ZipEntryCallback</name></super></implements></super_list> <block pos:start="441:65" pos:end="453:3">{

    <decl_stmt pos:start="443:5" pos:end="443:28"><decl pos:start="443:5" pos:end="443:27"><type pos:start="443:5" pos:end="443:22"><specifier pos:start="443:5" pos:end="443:11">private</specifier> <specifier pos:start="443:13" pos:end="443:17">final</specifier> <name pos:start="443:19" pos:end="443:22">File</name></type> <name pos:start="443:24" pos:end="443:27">file</name></decl>;</decl_stmt>

    <constructor pos:start="445:5" pos:end="447:5"><specifier pos:start="445:5" pos:end="445:10">public</specifier> <name pos:start="445:12" pos:end="445:23">FileUnpacker</name><parameter_list pos:start="445:24" pos:end="445:34">(<parameter pos:start="445:25" pos:end="445:33"><decl pos:start="445:25" pos:end="445:33"><type pos:start="445:25" pos:end="445:28"><name pos:start="445:25" pos:end="445:28">File</name></type> <name pos:start="445:30" pos:end="445:33">file</name></decl></parameter>)</parameter_list> <block pos:start="445:36" pos:end="447:5">{<block_content pos:start="446:7" pos:end="446:23">
      <expr_stmt pos:start="446:7" pos:end="446:23"><expr pos:start="446:7" pos:end="446:22"><name pos:start="446:7" pos:end="446:15"><name pos:start="446:7" pos:end="446:10">this</name><operator pos:start="446:11" pos:end="446:11">.</operator><name pos:start="446:12" pos:end="446:15">file</name></name> <operator pos:start="446:17" pos:end="446:17">=</operator> <name pos:start="446:19" pos:end="446:22">file</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="449:5" pos:end="451:5"><type pos:start="449:5" pos:end="449:15"><specifier pos:start="449:5" pos:end="449:10">public</specifier> <name pos:start="449:12" pos:end="449:15">void</name></type> <name pos:start="449:17" pos:end="449:23">process</name><parameter_list pos:start="449:24" pos:end="449:58">(<parameter pos:start="449:25" pos:end="449:38"><decl pos:start="449:25" pos:end="449:38"><type pos:start="449:25" pos:end="449:38"><name pos:start="449:25" pos:end="449:35">InputStream</name></type> <name pos:start="449:37" pos:end="449:38">in</name></decl></parameter>, <parameter pos:start="449:41" pos:end="449:57"><decl pos:start="449:41" pos:end="449:57"><type pos:start="449:41" pos:end="449:57"><name pos:start="449:41" pos:end="449:48">ZipEntry</name></type> <name pos:start="449:50" pos:end="449:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="449:60" pos:end="449:77">throws <argument pos:start="449:67" pos:end="449:77"><expr pos:start="449:67" pos:end="449:77"><name pos:start="449:67" pos:end="449:77">IOException</name></expr></argument></throws> <block pos:start="449:79" pos:end="451:5">{<block_content pos:start="450:7" pos:end="450:31">
      <expr_stmt pos:start="450:7" pos:end="450:31"><expr pos:start="450:7" pos:end="450:30"><call pos:start="450:7" pos:end="450:30"><name pos:start="450:7" pos:end="450:20"><name pos:start="450:7" pos:end="450:15">FileUtils</name><operator pos:start="450:16" pos:end="450:16">.</operator><name pos:start="450:17" pos:end="450:20">copy</name></name><argument_list pos:start="450:21" pos:end="450:30">(<argument pos:start="450:22" pos:end="450:23"><expr pos:start="450:22" pos:end="450:23"><name pos:start="450:22" pos:end="450:23">in</name></expr></argument>, <argument pos:start="450:26" pos:end="450:29"><expr pos:start="450:26" pos:end="450:29"><name pos:start="450:26" pos:end="450:29">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <comment type="block" pos:start="455:3" pos:end="455:28">/* Traversing ZIP files */</comment>

  <comment type="block" format="javadoc" pos:start="457:3" pos:end="470:5">/**
   * Reads the given ZIP file and executes the given action for each entry.
   * &lt;p&gt;
   * For each entry the corresponding input stream is also passed to the action. If you want to stop the loop
   * then throw a ZipBreakException.
   *
   * @param zip
   *          input ZIP file.
   * @param action
   *          action to be called for each entry.
   *
   * @see ZipEntryCallback
   * @see #iterate(File, ZipInfoCallback)
   */</comment>
  <function pos:start="471:3" pos:end="473:3"><type pos:start="471:3" pos:end="471:20"><specifier pos:start="471:3" pos:end="471:8">public</specifier> <specifier pos:start="471:10" pos:end="471:15">static</specifier> <name pos:start="471:17" pos:end="471:20">void</name></type> <name pos:start="471:22" pos:end="471:28">iterate</name><parameter_list pos:start="471:29" pos:end="471:63">(<parameter pos:start="471:30" pos:end="471:37"><decl pos:start="471:30" pos:end="471:37"><type pos:start="471:30" pos:end="471:37"><name pos:start="471:30" pos:end="471:33">File</name></type> <name pos:start="471:35" pos:end="471:37">zip</name></decl></parameter>, <parameter pos:start="471:40" pos:end="471:62"><decl pos:start="471:40" pos:end="471:62"><type pos:start="471:40" pos:end="471:62"><name pos:start="471:40" pos:end="471:55">ZipEntryCallback</name></type> <name pos:start="471:57" pos:end="471:62">action</name></decl></parameter>)</parameter_list> <block pos:start="471:65" pos:end="473:3">{<block_content pos:start="472:5" pos:end="472:31">
    <expr_stmt pos:start="472:5" pos:end="472:31"><expr pos:start="472:5" pos:end="472:30"><call pos:start="472:5" pos:end="472:30"><name pos:start="472:5" pos:end="472:11">iterate</name><argument_list pos:start="472:12" pos:end="472:30">(<argument pos:start="472:13" pos:end="472:15"><expr pos:start="472:13" pos:end="472:15"><name pos:start="472:13" pos:end="472:15">zip</name></expr></argument>, <argument pos:start="472:18" pos:end="472:23"><expr pos:start="472:18" pos:end="472:23"><name pos:start="472:18" pos:end="472:23">action</name></expr></argument>, <argument pos:start="472:26" pos:end="472:29"><expr pos:start="472:26" pos:end="472:29"><literal type="null" pos:start="472:26" pos:end="472:29">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="475:3" pos:end="491:5">/**
   * Reads the given ZIP file and executes the given action for each entry.
   * &lt;p&gt;
   * For each entry the corresponding input stream is also passed to the action. If you want to stop the loop
   * then throw a ZipBreakException.
   *
   * @param zip
   *          input ZIP file.
   * @param action
   *          action to be called for each entry.
   *
   * @param charset
   *          Charset used to processed the ZipFile with
   *
   * @see ZipEntryCallback
   * @see #iterate(File, ZipInfoCallback)
   */</comment>
  <function pos:start="492:3" pos:end="527:3"><type pos:start="492:3" pos:end="492:20"><specifier pos:start="492:3" pos:end="492:8">public</specifier> <specifier pos:start="492:10" pos:end="492:15">static</specifier> <name pos:start="492:17" pos:end="492:20">void</name></type> <name pos:start="492:22" pos:end="492:28">iterate</name><parameter_list pos:start="492:29" pos:end="492:80">(<parameter pos:start="492:30" pos:end="492:37"><decl pos:start="492:30" pos:end="492:37"><type pos:start="492:30" pos:end="492:37"><name pos:start="492:30" pos:end="492:33">File</name></type> <name pos:start="492:35" pos:end="492:37">zip</name></decl></parameter>, <parameter pos:start="492:40" pos:end="492:62"><decl pos:start="492:40" pos:end="492:62"><type pos:start="492:40" pos:end="492:62"><name pos:start="492:40" pos:end="492:55">ZipEntryCallback</name></type> <name pos:start="492:57" pos:end="492:62">action</name></decl></parameter>, <parameter pos:start="492:65" pos:end="492:79"><decl pos:start="492:65" pos:end="492:79"><type pos:start="492:65" pos:end="492:79"><name pos:start="492:65" pos:end="492:71">Charset</name></type> <name pos:start="492:73" pos:end="492:79">charset</name></decl></parameter>)</parameter_list> <block pos:start="492:82" pos:end="527:3">{<block_content pos:start="493:5" pos:end="526:5">
    <decl_stmt pos:start="493:5" pos:end="493:22"><decl pos:start="493:5" pos:end="493:21"><type pos:start="493:5" pos:end="493:11"><name pos:start="493:5" pos:end="493:11">ZipFile</name></type> <name pos:start="493:13" pos:end="493:14">zf</name> <init pos:start="493:16" pos:end="493:21">= <expr pos:start="493:18" pos:end="493:21"><literal type="null" pos:start="493:18" pos:end="493:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="494:5" pos:end="526:5">try <block pos:start="494:9" pos:end="520:5">{<block_content pos:start="495:7" pos:end="519:7">
      <if_stmt pos:start="495:7" pos:end="500:7"><if pos:start="495:7" pos:end="497:7">if <condition pos:start="495:10" pos:end="495:26">(<expr pos:start="495:11" pos:end="495:25"><name pos:start="495:11" pos:end="495:17">charset</name> <operator pos:start="495:19" pos:end="495:20">==</operator> <literal type="null" pos:start="495:22" pos:end="495:25">null</literal></expr>)</condition> <block pos:start="495:28" pos:end="497:7">{<block_content pos:start="496:9" pos:end="496:30">
        <expr_stmt pos:start="496:9" pos:end="496:30"><expr pos:start="496:9" pos:end="496:29"><name pos:start="496:9" pos:end="496:10">zf</name> <operator pos:start="496:12" pos:end="496:12">=</operator> <operator pos:start="496:14" pos:end="496:16">new</operator> <call pos:start="496:18" pos:end="496:29"><name pos:start="496:18" pos:end="496:24">ZipFile</name><argument_list pos:start="496:25" pos:end="496:29">(<argument pos:start="496:26" pos:end="496:28"><expr pos:start="496:26" pos:end="496:28"><name pos:start="496:26" pos:end="496:28">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else pos:start="498:7" pos:end="500:7">else <block pos:start="498:12" pos:end="500:7">{<block_content pos:start="499:9" pos:end="499:39">
        <expr_stmt pos:start="499:9" pos:end="499:39"><expr pos:start="499:9" pos:end="499:38"><name pos:start="499:9" pos:end="499:10">zf</name> <operator pos:start="499:12" pos:end="499:12">=</operator> <operator pos:start="499:14" pos:end="499:16">new</operator> <call pos:start="499:18" pos:end="499:38"><name pos:start="499:18" pos:end="499:24">ZipFile</name><argument_list pos:start="499:25" pos:end="499:38">(<argument pos:start="499:26" pos:end="499:28"><expr pos:start="499:26" pos:end="499:28"><name pos:start="499:26" pos:end="499:28">zip</name></expr></argument>, <argument pos:start="499:31" pos:end="499:37"><expr pos:start="499:31" pos:end="499:37"><name pos:start="499:31" pos:end="499:37">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt pos:start="502:7" pos:end="502:56"><decl pos:start="502:7" pos:end="502:55"><type pos:start="502:7" pos:end="502:37"><name pos:start="502:7" pos:end="502:37"><name pos:start="502:7" pos:end="502:17">Enumeration</name><argument_list type="generic" pos:start="502:18" pos:end="502:37">&lt;<argument pos:start="502:19" pos:end="502:36"><name pos:start="502:19" pos:end="502:19">?</name> <extends pos:start="502:21" pos:end="502:36">extends <name pos:start="502:29" pos:end="502:36">ZipEntry</name></extends></argument>&gt;</argument_list></name></type> <name pos:start="502:39" pos:end="502:40">en</name> <init pos:start="502:42" pos:end="502:55">= <expr pos:start="502:44" pos:end="502:55"><call pos:start="502:44" pos:end="502:55"><name pos:start="502:44" pos:end="502:53"><name pos:start="502:44" pos:end="502:45">zf</name><operator pos:start="502:46" pos:end="502:46">.</operator><name pos:start="502:47" pos:end="502:53">entries</name></name><argument_list pos:start="502:54" pos:end="502:55">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while pos:start="503:7" pos:end="519:7">while <condition pos:start="503:13" pos:end="503:34">(<expr pos:start="503:14" pos:end="503:33"><call pos:start="503:14" pos:end="503:33"><name pos:start="503:14" pos:end="503:31"><name pos:start="503:14" pos:end="503:15">en</name><operator pos:start="503:16" pos:end="503:16">.</operator><name pos:start="503:17" pos:end="503:31">hasMoreElements</name></name><argument_list pos:start="503:32" pos:end="503:33">()</argument_list></call></expr>)</condition> <block pos:start="503:36" pos:end="519:7">{<block_content pos:start="504:9" pos:end="518:9">
        <decl_stmt pos:start="504:9" pos:end="504:49"><decl pos:start="504:9" pos:end="504:48"><type pos:start="504:9" pos:end="504:16"><name pos:start="504:9" pos:end="504:16">ZipEntry</name></type> <name pos:start="504:18" pos:end="504:18">e</name> <init pos:start="504:20" pos:end="504:48">= <expr pos:start="504:22" pos:end="504:48"><operator pos:start="504:22" pos:end="504:22">(</operator><name pos:start="504:23" pos:end="504:30">ZipEntry</name><operator pos:start="504:31" pos:end="504:31">)</operator> <call pos:start="504:33" pos:end="504:48"><name pos:start="504:33" pos:end="504:46"><name pos:start="504:33" pos:end="504:34">en</name><operator pos:start="504:35" pos:end="504:35">.</operator><name pos:start="504:36" pos:end="504:46">nextElement</name></name><argument_list pos:start="504:47" pos:end="504:48">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="506:9" pos:end="506:46"><decl pos:start="506:9" pos:end="506:45"><type pos:start="506:9" pos:end="506:19"><name pos:start="506:9" pos:end="506:19">InputStream</name></type> <name pos:start="506:21" pos:end="506:22">is</name> <init pos:start="506:24" pos:end="506:45">= <expr pos:start="506:26" pos:end="506:45"><call pos:start="506:26" pos:end="506:45"><name pos:start="506:26" pos:end="506:42"><name pos:start="506:26" pos:end="506:27">zf</name><operator pos:start="506:28" pos:end="506:28">.</operator><name pos:start="506:29" pos:end="506:42">getInputStream</name></name><argument_list pos:start="506:43" pos:end="506:45">(<argument pos:start="506:44" pos:end="506:44"><expr pos:start="506:44" pos:end="506:44"><name pos:start="506:44" pos:end="506:44">e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try pos:start="507:9" pos:end="518:9">try <block pos:start="507:13" pos:end="509:9">{<block_content pos:start="508:11" pos:end="508:32">
          <expr_stmt pos:start="508:11" pos:end="508:32"><expr pos:start="508:11" pos:end="508:31"><call pos:start="508:11" pos:end="508:31"><name pos:start="508:11" pos:end="508:24"><name pos:start="508:11" pos:end="508:16">action</name><operator pos:start="508:17" pos:end="508:17">.</operator><name pos:start="508:18" pos:end="508:24">process</name></name><argument_list pos:start="508:25" pos:end="508:31">(<argument pos:start="508:26" pos:end="508:27"><expr pos:start="508:26" pos:end="508:27"><name pos:start="508:26" pos:end="508:27">is</name></expr></argument>, <argument pos:start="508:30" pos:end="508:30"><expr pos:start="508:30" pos:end="508:30"><name pos:start="508:30" pos:end="508:30">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch pos:start="510:9" pos:end="512:9">catch <parameter_list pos:start="510:15" pos:end="510:30">(<parameter pos:start="510:16" pos:end="510:29"><decl pos:start="510:16" pos:end="510:29"><type pos:start="510:16" pos:end="510:29"><name pos:start="510:16" pos:end="510:26">IOException</name></type> <name pos:start="510:28" pos:end="510:29">ze</name></decl></parameter>)</parameter_list> <block pos:start="510:32" pos:end="512:9">{<block_content pos:start="511:11" pos:end="511:112">
          <throw pos:start="511:11" pos:end="511:112">throw <expr pos:start="511:17" pos:end="511:111"><operator pos:start="511:17" pos:end="511:19">new</operator> <call pos:start="511:21" pos:end="511:111"><name pos:start="511:21" pos:end="511:32">ZipException</name><argument_list pos:start="511:33" pos:end="511:111">(<argument pos:start="511:34" pos:end="511:106"><expr pos:start="511:34" pos:end="511:106"><literal type="string" pos:start="511:34" pos:end="511:64">"Failed to process zip entry '"</literal> <operator pos:start="511:66" pos:end="511:66">+</operator> <call pos:start="511:68" pos:end="511:78"><name pos:start="511:68" pos:end="511:76"><name pos:start="511:68" pos:end="511:68">e</name><operator pos:start="511:69" pos:end="511:69">.</operator><name pos:start="511:70" pos:end="511:76">getName</name></name><argument_list pos:start="511:77" pos:end="511:78">()</argument_list></call> <operator pos:start="511:80" pos:end="511:80">+</operator> <literal type="string" pos:start="511:82" pos:end="511:97">"' with action "</literal> <operator pos:start="511:99" pos:end="511:99">+</operator> <name pos:start="511:101" pos:end="511:106">action</name></expr></argument>, <argument pos:start="511:109" pos:end="511:110"><expr pos:start="511:109" pos:end="511:110"><name pos:start="511:109" pos:end="511:110">ze</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch pos:start="513:9" pos:end="515:9">catch <parameter_list pos:start="513:15" pos:end="513:36">(<parameter pos:start="513:16" pos:end="513:35"><decl pos:start="513:16" pos:end="513:35"><type pos:start="513:16" pos:end="513:35"><name pos:start="513:16" pos:end="513:32">ZipBreakException</name></type> <name pos:start="513:34" pos:end="513:35">ex</name></decl></parameter>)</parameter_list> <block pos:start="513:38" pos:end="515:9">{<block_content pos:start="514:11" pos:end="514:16">
          <break pos:start="514:11" pos:end="514:16">break;</break>
        </block_content>}</block></catch>
        <finally pos:start="516:9" pos:end="518:9">finally <block pos:start="516:17" pos:end="518:9">{<block_content pos:start="517:11" pos:end="517:35">
          <expr_stmt pos:start="517:11" pos:end="517:35"><expr pos:start="517:11" pos:end="517:34"><call pos:start="517:11" pos:end="517:34"><name pos:start="517:11" pos:end="517:30"><name pos:start="517:11" pos:end="517:17">IOUtils</name><operator pos:start="517:18" pos:end="517:18">.</operator><name pos:start="517:19" pos:end="517:30">closeQuietly</name></name><argument_list pos:start="517:31" pos:end="517:34">(<argument pos:start="517:32" pos:end="517:33"><expr pos:start="517:32" pos:end="517:33"><name pos:start="517:32" pos:end="517:33">is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      </block_content>}</block></while>
    </block_content>}</block>
    <catch pos:start="521:5" pos:end="523:5">catch <parameter_list pos:start="521:11" pos:end="521:25">(<parameter pos:start="521:12" pos:end="521:24"><decl pos:start="521:12" pos:end="521:24"><type pos:start="521:12" pos:end="521:24"><name pos:start="521:12" pos:end="521:22">IOException</name></type> <name pos:start="521:24" pos:end="521:24">e</name></decl></parameter>)</parameter_list> <block pos:start="521:27" pos:end="523:5">{<block_content pos:start="522:7" pos:end="522:40">
      <throw pos:start="522:7" pos:end="522:40">throw <expr pos:start="522:13" pos:end="522:39"><call pos:start="522:13" pos:end="522:39"><name pos:start="522:13" pos:end="522:36"><name pos:start="522:13" pos:end="522:28">ZipExceptionUtil</name><operator pos:start="522:29" pos:end="522:29">.</operator><name pos:start="522:30" pos:end="522:36">rethrow</name></name><argument_list pos:start="522:37" pos:end="522:39">(<argument pos:start="522:38" pos:end="522:38"><expr pos:start="522:38" pos:end="522:38"><name pos:start="522:38" pos:end="522:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="524:5" pos:end="526:5">finally <block pos:start="524:13" pos:end="526:5">{<block_content pos:start="525:7" pos:end="525:23">
      <expr_stmt pos:start="525:7" pos:end="525:23"><expr pos:start="525:7" pos:end="525:22"><call pos:start="525:7" pos:end="525:22"><name pos:start="525:7" pos:end="525:18">closeQuietly</name><argument_list pos:start="525:19" pos:end="525:22">(<argument pos:start="525:20" pos:end="525:21"><expr pos:start="525:20" pos:end="525:21"><name pos:start="525:20" pos:end="525:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="529:3" pos:end="543:5">/**
   * Reads the given ZIP file and executes the given action for each given entry.
   * &lt;p&gt;
   * For each given entry the corresponding input stream is also passed to the action. If you want to stop the loop then throw a ZipBreakException.
   *
   * @param zip
   *          input ZIP file.
   * @param entryNames
   *          names of entries to iterate
   * @param action
   *          action to be called for each entry.
   *
   * @see ZipEntryCallback
   * @see #iterate(File, String[], ZipInfoCallback)
   */</comment>
  <function pos:start="544:3" pos:end="546:3"><type pos:start="544:3" pos:end="544:20"><specifier pos:start="544:3" pos:end="544:8">public</specifier> <specifier pos:start="544:10" pos:end="544:15">static</specifier> <name pos:start="544:17" pos:end="544:20">void</name></type> <name pos:start="544:22" pos:end="544:28">iterate</name><parameter_list pos:start="544:29" pos:end="544:84">(<parameter pos:start="544:30" pos:end="544:37"><decl pos:start="544:30" pos:end="544:37"><type pos:start="544:30" pos:end="544:37"><name pos:start="544:30" pos:end="544:33">File</name></type> <name pos:start="544:35" pos:end="544:37">zip</name></decl></parameter>, <parameter pos:start="544:40" pos:end="544:58"><decl pos:start="544:40" pos:end="544:58"><type pos:start="544:40" pos:end="544:58"><name pos:start="544:40" pos:end="544:47"><name pos:start="544:40" pos:end="544:45">String</name><index pos:start="544:46" pos:end="544:47">[]</index></name></type> <name pos:start="544:49" pos:end="544:58">entryNames</name></decl></parameter>, <parameter pos:start="544:61" pos:end="544:83"><decl pos:start="544:61" pos:end="544:83"><type pos:start="544:61" pos:end="544:83"><name pos:start="544:61" pos:end="544:76">ZipEntryCallback</name></type> <name pos:start="544:78" pos:end="544:83">action</name></decl></parameter>)</parameter_list> <block pos:start="544:86" pos:end="546:3">{<block_content pos:start="545:5" pos:end="545:43">
    <expr_stmt pos:start="545:5" pos:end="545:43"><expr pos:start="545:5" pos:end="545:42"><call pos:start="545:5" pos:end="545:42"><name pos:start="545:5" pos:end="545:11">iterate</name><argument_list pos:start="545:12" pos:end="545:42">(<argument pos:start="545:13" pos:end="545:15"><expr pos:start="545:13" pos:end="545:15"><name pos:start="545:13" pos:end="545:15">zip</name></expr></argument>, <argument pos:start="545:18" pos:end="545:27"><expr pos:start="545:18" pos:end="545:27"><name pos:start="545:18" pos:end="545:27">entryNames</name></expr></argument>, <argument pos:start="545:30" pos:end="545:35"><expr pos:start="545:30" pos:end="545:35"><name pos:start="545:30" pos:end="545:35">action</name></expr></argument>, <argument pos:start="545:38" pos:end="545:41"><expr pos:start="545:38" pos:end="545:41"><literal type="null" pos:start="545:38" pos:end="545:41">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="548:3" pos:end="564:5">/**
   * Reads the given ZIP file and executes the given action for each given entry.
   * &lt;p&gt;
   * For each given entry the corresponding input stream is also passed to the action. If you want to stop the loop then throw a ZipBreakException.
   *
   * @param zip
   *          input ZIP file.
   * @param entryNames
   *          names of entries to iterate
   * @param action
   *          action to be called for each entry.
   * @param charset
   *          charset used to process the zip file
   *
   * @see ZipEntryCallback
   * @see #iterate(File, String[], ZipInfoCallback)
   */</comment>
  <function pos:start="565:3" pos:end="601:3"><type pos:start="565:3" pos:end="565:20"><specifier pos:start="565:3" pos:end="565:8">public</specifier> <specifier pos:start="565:10" pos:end="565:15">static</specifier> <name pos:start="565:17" pos:end="565:20">void</name></type> <name pos:start="565:22" pos:end="565:28">iterate</name><parameter_list pos:start="565:29" pos:end="565:101">(<parameter pos:start="565:30" pos:end="565:37"><decl pos:start="565:30" pos:end="565:37"><type pos:start="565:30" pos:end="565:37"><name pos:start="565:30" pos:end="565:33">File</name></type> <name pos:start="565:35" pos:end="565:37">zip</name></decl></parameter>, <parameter pos:start="565:40" pos:end="565:58"><decl pos:start="565:40" pos:end="565:58"><type pos:start="565:40" pos:end="565:58"><name pos:start="565:40" pos:end="565:47"><name pos:start="565:40" pos:end="565:45">String</name><index pos:start="565:46" pos:end="565:47">[]</index></name></type> <name pos:start="565:49" pos:end="565:58">entryNames</name></decl></parameter>, <parameter pos:start="565:61" pos:end="565:83"><decl pos:start="565:61" pos:end="565:83"><type pos:start="565:61" pos:end="565:83"><name pos:start="565:61" pos:end="565:76">ZipEntryCallback</name></type> <name pos:start="565:78" pos:end="565:83">action</name></decl></parameter>, <parameter pos:start="565:86" pos:end="565:100"><decl pos:start="565:86" pos:end="565:100"><type pos:start="565:86" pos:end="565:100"><name pos:start="565:86" pos:end="565:92">Charset</name></type> <name pos:start="565:94" pos:end="565:100">charset</name></decl></parameter>)</parameter_list> <block pos:start="565:103" pos:end="601:3">{<block_content pos:start="566:5" pos:end="600:5">
    <decl_stmt pos:start="566:5" pos:end="566:22"><decl pos:start="566:5" pos:end="566:21"><type pos:start="566:5" pos:end="566:11"><name pos:start="566:5" pos:end="566:11">ZipFile</name></type> <name pos:start="566:13" pos:end="566:14">zf</name> <init pos:start="566:16" pos:end="566:21">= <expr pos:start="566:18" pos:end="566:21"><literal type="null" pos:start="566:18" pos:end="566:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="567:5" pos:end="600:5">try <block pos:start="567:9" pos:end="594:5">{<block_content pos:start="568:7" pos:end="593:7">
      <if_stmt pos:start="568:7" pos:end="573:7"><if pos:start="568:7" pos:end="570:7">if <condition pos:start="568:10" pos:end="568:26">(<expr pos:start="568:11" pos:end="568:25"><name pos:start="568:11" pos:end="568:17">charset</name> <operator pos:start="568:19" pos:end="568:20">==</operator> <literal type="null" pos:start="568:22" pos:end="568:25">null</literal></expr>)</condition> <block pos:start="568:28" pos:end="570:7">{<block_content pos:start="569:9" pos:end="569:30">
        <expr_stmt pos:start="569:9" pos:end="569:30"><expr pos:start="569:9" pos:end="569:29"><name pos:start="569:9" pos:end="569:10">zf</name> <operator pos:start="569:12" pos:end="569:12">=</operator> <operator pos:start="569:14" pos:end="569:16">new</operator> <call pos:start="569:18" pos:end="569:29"><name pos:start="569:18" pos:end="569:24">ZipFile</name><argument_list pos:start="569:25" pos:end="569:29">(<argument pos:start="569:26" pos:end="569:28"><expr pos:start="569:26" pos:end="569:28"><name pos:start="569:26" pos:end="569:28">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else pos:start="571:7" pos:end="573:7">else <block pos:start="571:12" pos:end="573:7">{<block_content pos:start="572:9" pos:end="572:39">
        <expr_stmt pos:start="572:9" pos:end="572:39"><expr pos:start="572:9" pos:end="572:38"><name pos:start="572:9" pos:end="572:10">zf</name> <operator pos:start="572:12" pos:end="572:12">=</operator> <operator pos:start="572:14" pos:end="572:16">new</operator> <call pos:start="572:18" pos:end="572:38"><name pos:start="572:18" pos:end="572:24">ZipFile</name><argument_list pos:start="572:25" pos:end="572:38">(<argument pos:start="572:26" pos:end="572:28"><expr pos:start="572:26" pos:end="572:28"><name pos:start="572:26" pos:end="572:28">zip</name></expr></argument>, <argument pos:start="572:31" pos:end="572:37"><expr pos:start="572:31" pos:end="572:37"><name pos:start="572:31" pos:end="572:37">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <for pos:start="575:7" pos:end="593:7">for <control pos:start="575:11" pos:end="575:49">(<init pos:start="575:12" pos:end="575:21"><decl pos:start="575:12" pos:end="575:20"><type pos:start="575:12" pos:end="575:14"><name pos:start="575:12" pos:end="575:14">int</name></type> <name pos:start="575:16" pos:end="575:16">i</name> <init pos:start="575:18" pos:end="575:20">= <expr pos:start="575:20" pos:end="575:20"><literal type="number" pos:start="575:20" pos:end="575:20">0</literal></expr></init></decl>;</init> <condition pos:start="575:23" pos:end="575:44"><expr pos:start="575:23" pos:end="575:43"><name pos:start="575:23" pos:end="575:23">i</name> <operator pos:start="575:25" pos:end="575:25">&lt;</operator> <name pos:start="575:27" pos:end="575:43"><name pos:start="575:27" pos:end="575:36">entryNames</name><operator pos:start="575:37" pos:end="575:37">.</operator><name pos:start="575:38" pos:end="575:43">length</name></name></expr>;</condition> <incr pos:start="575:46" pos:end="575:48"><expr pos:start="575:46" pos:end="575:48"><name pos:start="575:46" pos:end="575:46">i</name><operator pos:start="575:47" pos:end="575:48">++</operator></expr></incr>)</control> <block pos:start="575:51" pos:end="593:7">{<block_content pos:start="576:9" pos:end="592:9">
        <decl_stmt pos:start="576:9" pos:end="576:48"><decl pos:start="576:9" pos:end="576:47"><type pos:start="576:9" pos:end="576:16"><name pos:start="576:9" pos:end="576:16">ZipEntry</name></type> <name pos:start="576:18" pos:end="576:18">e</name> <init pos:start="576:20" pos:end="576:47">= <expr pos:start="576:22" pos:end="576:47"><call pos:start="576:22" pos:end="576:47"><name pos:start="576:22" pos:end="576:32"><name pos:start="576:22" pos:end="576:23">zf</name><operator pos:start="576:24" pos:end="576:24">.</operator><name pos:start="576:25" pos:end="576:32">getEntry</name></name><argument_list pos:start="576:33" pos:end="576:47">(<argument pos:start="576:34" pos:end="576:46"><expr pos:start="576:34" pos:end="576:46"><name pos:start="576:34" pos:end="576:46"><name pos:start="576:34" pos:end="576:43">entryNames</name><index pos:start="576:44" pos:end="576:46">[<expr pos:start="576:45" pos:end="576:45"><name pos:start="576:45" pos:end="576:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="577:9" pos:end="579:9"><if pos:start="577:9" pos:end="579:9">if <condition pos:start="577:12" pos:end="577:22">(<expr pos:start="577:13" pos:end="577:21"><name pos:start="577:13" pos:end="577:13">e</name> <operator pos:start="577:15" pos:end="577:16">==</operator> <literal type="null" pos:start="577:18" pos:end="577:21">null</literal></expr>)</condition> <block pos:start="577:24" pos:end="579:9">{<block_content pos:start="578:11" pos:end="578:19">
          <continue pos:start="578:11" pos:end="578:19">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt pos:start="580:9" pos:end="580:46"><decl pos:start="580:9" pos:end="580:45"><type pos:start="580:9" pos:end="580:19"><name pos:start="580:9" pos:end="580:19">InputStream</name></type> <name pos:start="580:21" pos:end="580:22">is</name> <init pos:start="580:24" pos:end="580:45">= <expr pos:start="580:26" pos:end="580:45"><call pos:start="580:26" pos:end="580:45"><name pos:start="580:26" pos:end="580:42"><name pos:start="580:26" pos:end="580:27">zf</name><operator pos:start="580:28" pos:end="580:28">.</operator><name pos:start="580:29" pos:end="580:42">getInputStream</name></name><argument_list pos:start="580:43" pos:end="580:45">(<argument pos:start="580:44" pos:end="580:44"><expr pos:start="580:44" pos:end="580:44"><name pos:start="580:44" pos:end="580:44">e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try pos:start="581:9" pos:end="592:9">try <block pos:start="581:13" pos:end="583:9">{<block_content pos:start="582:11" pos:end="582:32">
          <expr_stmt pos:start="582:11" pos:end="582:32"><expr pos:start="582:11" pos:end="582:31"><call pos:start="582:11" pos:end="582:31"><name pos:start="582:11" pos:end="582:24"><name pos:start="582:11" pos:end="582:16">action</name><operator pos:start="582:17" pos:end="582:17">.</operator><name pos:start="582:18" pos:end="582:24">process</name></name><argument_list pos:start="582:25" pos:end="582:31">(<argument pos:start="582:26" pos:end="582:27"><expr pos:start="582:26" pos:end="582:27"><name pos:start="582:26" pos:end="582:27">is</name></expr></argument>, <argument pos:start="582:30" pos:end="582:30"><expr pos:start="582:30" pos:end="582:30"><name pos:start="582:30" pos:end="582:30">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch pos:start="584:9" pos:end="586:9">catch <parameter_list pos:start="584:15" pos:end="584:30">(<parameter pos:start="584:16" pos:end="584:29"><decl pos:start="584:16" pos:end="584:29"><type pos:start="584:16" pos:end="584:29"><name pos:start="584:16" pos:end="584:26">IOException</name></type> <name pos:start="584:28" pos:end="584:29">ze</name></decl></parameter>)</parameter_list> <block pos:start="584:32" pos:end="586:9">{<block_content pos:start="585:11" pos:end="585:111">
          <throw pos:start="585:11" pos:end="585:111">throw <expr pos:start="585:17" pos:end="585:110"><operator pos:start="585:17" pos:end="585:19">new</operator> <call pos:start="585:21" pos:end="585:110"><name pos:start="585:21" pos:end="585:32">ZipException</name><argument_list pos:start="585:33" pos:end="585:110">(<argument pos:start="585:34" pos:end="585:105"><expr pos:start="585:34" pos:end="585:105"><literal type="string" pos:start="585:34" pos:end="585:64">"Failed to process zip entry '"</literal> <operator pos:start="585:66" pos:end="585:66">+</operator> <call pos:start="585:68" pos:end="585:78"><name pos:start="585:68" pos:end="585:76"><name pos:start="585:68" pos:end="585:68">e</name><operator pos:start="585:69" pos:end="585:69">.</operator><name pos:start="585:70" pos:end="585:76">getName</name></name><argument_list pos:start="585:77" pos:end="585:78">()</argument_list></call> <operator pos:start="585:80" pos:end="585:80">+</operator> <literal type="string" pos:start="585:82" pos:end="585:96">" with action "</literal> <operator pos:start="585:98" pos:end="585:98">+</operator> <name pos:start="585:100" pos:end="585:105">action</name></expr></argument>, <argument pos:start="585:108" pos:end="585:109"><expr pos:start="585:108" pos:end="585:109"><name pos:start="585:108" pos:end="585:109">ze</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch pos:start="587:9" pos:end="589:9">catch <parameter_list pos:start="587:15" pos:end="587:36">(<parameter pos:start="587:16" pos:end="587:35"><decl pos:start="587:16" pos:end="587:35"><type pos:start="587:16" pos:end="587:35"><name pos:start="587:16" pos:end="587:32">ZipBreakException</name></type> <name pos:start="587:34" pos:end="587:35">ex</name></decl></parameter>)</parameter_list> <block pos:start="587:38" pos:end="589:9">{<block_content pos:start="588:11" pos:end="588:16">
          <break pos:start="588:11" pos:end="588:16">break;</break>
        </block_content>}</block></catch>
        <finally pos:start="590:9" pos:end="592:9">finally <block pos:start="590:17" pos:end="592:9">{<block_content pos:start="591:11" pos:end="591:35">
          <expr_stmt pos:start="591:11" pos:end="591:35"><expr pos:start="591:11" pos:end="591:34"><call pos:start="591:11" pos:end="591:34"><name pos:start="591:11" pos:end="591:30"><name pos:start="591:11" pos:end="591:17">IOUtils</name><operator pos:start="591:18" pos:end="591:18">.</operator><name pos:start="591:19" pos:end="591:30">closeQuietly</name></name><argument_list pos:start="591:31" pos:end="591:34">(<argument pos:start="591:32" pos:end="591:33"><expr pos:start="591:32" pos:end="591:33"><name pos:start="591:32" pos:end="591:33">is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      </block_content>}</block></for>
    </block_content>}</block>
    <catch pos:start="595:5" pos:end="597:5">catch <parameter_list pos:start="595:11" pos:end="595:25">(<parameter pos:start="595:12" pos:end="595:24"><decl pos:start="595:12" pos:end="595:24"><type pos:start="595:12" pos:end="595:24"><name pos:start="595:12" pos:end="595:22">IOException</name></type> <name pos:start="595:24" pos:end="595:24">e</name></decl></parameter>)</parameter_list> <block pos:start="595:27" pos:end="597:5">{<block_content pos:start="596:7" pos:end="596:40">
      <throw pos:start="596:7" pos:end="596:40">throw <expr pos:start="596:13" pos:end="596:39"><call pos:start="596:13" pos:end="596:39"><name pos:start="596:13" pos:end="596:36"><name pos:start="596:13" pos:end="596:28">ZipExceptionUtil</name><operator pos:start="596:29" pos:end="596:29">.</operator><name pos:start="596:30" pos:end="596:36">rethrow</name></name><argument_list pos:start="596:37" pos:end="596:39">(<argument pos:start="596:38" pos:end="596:38"><expr pos:start="596:38" pos:end="596:38"><name pos:start="596:38" pos:end="596:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="598:5" pos:end="600:5">finally <block pos:start="598:13" pos:end="600:5">{<block_content pos:start="599:7" pos:end="599:23">
      <expr_stmt pos:start="599:7" pos:end="599:23"><expr pos:start="599:7" pos:end="599:22"><call pos:start="599:7" pos:end="599:22"><name pos:start="599:7" pos:end="599:18">closeQuietly</name><argument_list pos:start="599:19" pos:end="599:22">(<argument pos:start="599:20" pos:end="599:21"><expr pos:start="599:20" pos:end="599:21"><name pos:start="599:20" pos:end="599:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="603:3" pos:end="616:5">/**
   * Scans the given ZIP file and executes the given action for each entry.
   * &lt;p&gt;
   * Only the meta-data without the actual data is read. If you want to stop the loop
   * then throw a ZipBreakException.
   *
   * @param zip
   *          input ZIP file.
   * @param action
   *          action to be called for each entry.
   *
   * @see ZipInfoCallback
   * @see #iterate(File, ZipEntryCallback)
   */</comment>
  <function pos:start="617:3" pos:end="642:3"><type pos:start="617:3" pos:end="617:20"><specifier pos:start="617:3" pos:end="617:8">public</specifier> <specifier pos:start="617:10" pos:end="617:15">static</specifier> <name pos:start="617:17" pos:end="617:20">void</name></type> <name pos:start="617:22" pos:end="617:28">iterate</name><parameter_list pos:start="617:29" pos:end="617:62">(<parameter pos:start="617:30" pos:end="617:37"><decl pos:start="617:30" pos:end="617:37"><type pos:start="617:30" pos:end="617:37"><name pos:start="617:30" pos:end="617:33">File</name></type> <name pos:start="617:35" pos:end="617:37">zip</name></decl></parameter>, <parameter pos:start="617:40" pos:end="617:61"><decl pos:start="617:40" pos:end="617:61"><type pos:start="617:40" pos:end="617:61"><name pos:start="617:40" pos:end="617:54">ZipInfoCallback</name></type> <name pos:start="617:56" pos:end="617:61">action</name></decl></parameter>)</parameter_list> <block pos:start="617:64" pos:end="642:3">{<block_content pos:start="618:5" pos:end="641:5">
    <decl_stmt pos:start="618:5" pos:end="618:22"><decl pos:start="618:5" pos:end="618:21"><type pos:start="618:5" pos:end="618:11"><name pos:start="618:5" pos:end="618:11">ZipFile</name></type> <name pos:start="618:13" pos:end="618:14">zf</name> <init pos:start="618:16" pos:end="618:21">= <expr pos:start="618:18" pos:end="618:21"><literal type="null" pos:start="618:18" pos:end="618:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="619:5" pos:end="641:5">try <block pos:start="619:9" pos:end="635:5">{<block_content pos:start="620:7" pos:end="634:7">
      <expr_stmt pos:start="620:7" pos:end="620:28"><expr pos:start="620:7" pos:end="620:27"><name pos:start="620:7" pos:end="620:8">zf</name> <operator pos:start="620:10" pos:end="620:10">=</operator> <operator pos:start="620:12" pos:end="620:14">new</operator> <call pos:start="620:16" pos:end="620:27"><name pos:start="620:16" pos:end="620:22">ZipFile</name><argument_list pos:start="620:23" pos:end="620:27">(<argument pos:start="620:24" pos:end="620:26"><expr pos:start="620:24" pos:end="620:26"><name pos:start="620:24" pos:end="620:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt pos:start="622:7" pos:end="622:56"><decl pos:start="622:7" pos:end="622:55"><type pos:start="622:7" pos:end="622:37"><name pos:start="622:7" pos:end="622:37"><name pos:start="622:7" pos:end="622:17">Enumeration</name><argument_list type="generic" pos:start="622:18" pos:end="622:37">&lt;<argument pos:start="622:19" pos:end="622:36"><name pos:start="622:19" pos:end="622:19">?</name> <extends pos:start="622:21" pos:end="622:36">extends <name pos:start="622:29" pos:end="622:36">ZipEntry</name></extends></argument>&gt;</argument_list></name></type> <name pos:start="622:39" pos:end="622:40">en</name> <init pos:start="622:42" pos:end="622:55">= <expr pos:start="622:44" pos:end="622:55"><call pos:start="622:44" pos:end="622:55"><name pos:start="622:44" pos:end="622:53"><name pos:start="622:44" pos:end="622:45">zf</name><operator pos:start="622:46" pos:end="622:46">.</operator><name pos:start="622:47" pos:end="622:53">entries</name></name><argument_list pos:start="622:54" pos:end="622:55">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while pos:start="623:7" pos:end="634:7">while <condition pos:start="623:13" pos:end="623:34">(<expr pos:start="623:14" pos:end="623:33"><call pos:start="623:14" pos:end="623:33"><name pos:start="623:14" pos:end="623:31"><name pos:start="623:14" pos:end="623:15">en</name><operator pos:start="623:16" pos:end="623:16">.</operator><name pos:start="623:17" pos:end="623:31">hasMoreElements</name></name><argument_list pos:start="623:32" pos:end="623:33">()</argument_list></call></expr>)</condition> <block pos:start="623:36" pos:end="634:7">{<block_content pos:start="624:9" pos:end="633:9">
        <decl_stmt pos:start="624:9" pos:end="624:49"><decl pos:start="624:9" pos:end="624:48"><type pos:start="624:9" pos:end="624:16"><name pos:start="624:9" pos:end="624:16">ZipEntry</name></type> <name pos:start="624:18" pos:end="624:18">e</name> <init pos:start="624:20" pos:end="624:48">= <expr pos:start="624:22" pos:end="624:48"><operator pos:start="624:22" pos:end="624:22">(</operator><name pos:start="624:23" pos:end="624:30">ZipEntry</name><operator pos:start="624:31" pos:end="624:31">)</operator> <call pos:start="624:33" pos:end="624:48"><name pos:start="624:33" pos:end="624:46"><name pos:start="624:33" pos:end="624:34">en</name><operator pos:start="624:35" pos:end="624:35">.</operator><name pos:start="624:36" pos:end="624:46">nextElement</name></name><argument_list pos:start="624:47" pos:end="624:48">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try pos:start="625:9" pos:end="633:9">try <block pos:start="625:13" pos:end="627:9">{<block_content pos:start="626:11" pos:end="626:28">
          <expr_stmt pos:start="626:11" pos:end="626:28"><expr pos:start="626:11" pos:end="626:27"><call pos:start="626:11" pos:end="626:27"><name pos:start="626:11" pos:end="626:24"><name pos:start="626:11" pos:end="626:16">action</name><operator pos:start="626:17" pos:end="626:17">.</operator><name pos:start="626:18" pos:end="626:24">process</name></name><argument_list pos:start="626:25" pos:end="626:27">(<argument pos:start="626:26" pos:end="626:26"><expr pos:start="626:26" pos:end="626:26"><name pos:start="626:26" pos:end="626:26">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch pos:start="628:9" pos:end="630:9">catch <parameter_list pos:start="628:15" pos:end="628:30">(<parameter pos:start="628:16" pos:end="628:29"><decl pos:start="628:16" pos:end="628:29"><type pos:start="628:16" pos:end="628:29"><name pos:start="628:16" pos:end="628:26">IOException</name></type> <name pos:start="628:28" pos:end="628:29">ze</name></decl></parameter>)</parameter_list> <block pos:start="628:32" pos:end="630:9">{<block_content pos:start="629:11" pos:end="629:111">
          <throw pos:start="629:11" pos:end="629:111">throw <expr pos:start="629:17" pos:end="629:110"><operator pos:start="629:17" pos:end="629:19">new</operator> <call pos:start="629:21" pos:end="629:110"><name pos:start="629:21" pos:end="629:32">ZipException</name><argument_list pos:start="629:33" pos:end="629:110">(<argument pos:start="629:34" pos:end="629:105"><expr pos:start="629:34" pos:end="629:105"><literal type="string" pos:start="629:34" pos:end="629:64">"Failed to process zip entry '"</literal> <operator pos:start="629:66" pos:end="629:66">+</operator> <call pos:start="629:68" pos:end="629:78"><name pos:start="629:68" pos:end="629:76"><name pos:start="629:68" pos:end="629:68">e</name><operator pos:start="629:69" pos:end="629:69">.</operator><name pos:start="629:70" pos:end="629:76">getName</name></name><argument_list pos:start="629:77" pos:end="629:78">()</argument_list></call> <operator pos:start="629:80" pos:end="629:80">+</operator> <literal type="string" pos:start="629:82" pos:end="629:96">" with action "</literal> <operator pos:start="629:98" pos:end="629:98">+</operator> <name pos:start="629:100" pos:end="629:105">action</name></expr></argument>, <argument pos:start="629:108" pos:end="629:109"><expr pos:start="629:108" pos:end="629:109"><name pos:start="629:108" pos:end="629:109">ze</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch pos:start="631:9" pos:end="633:9">catch <parameter_list pos:start="631:15" pos:end="631:36">(<parameter pos:start="631:16" pos:end="631:35"><decl pos:start="631:16" pos:end="631:35"><type pos:start="631:16" pos:end="631:35"><name pos:start="631:16" pos:end="631:32">ZipBreakException</name></type> <name pos:start="631:34" pos:end="631:35">ex</name></decl></parameter>)</parameter_list> <block pos:start="631:38" pos:end="633:9">{<block_content pos:start="632:11" pos:end="632:16">
          <break pos:start="632:11" pos:end="632:16">break;</break>
        </block_content>}</block></catch></try>
      </block_content>}</block></while>
    </block_content>}</block>
    <catch pos:start="636:5" pos:end="638:5">catch <parameter_list pos:start="636:11" pos:end="636:25">(<parameter pos:start="636:12" pos:end="636:24"><decl pos:start="636:12" pos:end="636:24"><type pos:start="636:12" pos:end="636:24"><name pos:start="636:12" pos:end="636:22">IOException</name></type> <name pos:start="636:24" pos:end="636:24">e</name></decl></parameter>)</parameter_list> <block pos:start="636:27" pos:end="638:5">{<block_content pos:start="637:7" pos:end="637:40">
      <throw pos:start="637:7" pos:end="637:40">throw <expr pos:start="637:13" pos:end="637:39"><call pos:start="637:13" pos:end="637:39"><name pos:start="637:13" pos:end="637:36"><name pos:start="637:13" pos:end="637:28">ZipExceptionUtil</name><operator pos:start="637:29" pos:end="637:29">.</operator><name pos:start="637:30" pos:end="637:36">rethrow</name></name><argument_list pos:start="637:37" pos:end="637:39">(<argument pos:start="637:38" pos:end="637:38"><expr pos:start="637:38" pos:end="637:38"><name pos:start="637:38" pos:end="637:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="639:5" pos:end="641:5">finally <block pos:start="639:13" pos:end="641:5">{<block_content pos:start="640:7" pos:end="640:23">
      <expr_stmt pos:start="640:7" pos:end="640:23"><expr pos:start="640:7" pos:end="640:22"><call pos:start="640:7" pos:end="640:22"><name pos:start="640:7" pos:end="640:18">closeQuietly</name><argument_list pos:start="640:19" pos:end="640:22">(<argument pos:start="640:20" pos:end="640:21"><expr pos:start="640:20" pos:end="640:21"><name pos:start="640:20" pos:end="640:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="644:3" pos:end="658:5">/**
   * Scans the given ZIP file and executes the given action for each given entry.
   * &lt;p&gt;
   * Only the meta-data without the actual data is read. If you want to stop the loop then throw a ZipBreakException.
   *
   * @param zip
   *          input ZIP file.
   * @param entryNames
   *          names of entries to iterate
   * @param action
   *          action to be called for each entry.
   *
   * @see ZipInfoCallback
   * @see #iterate(File, String[], ZipEntryCallback)
   */</comment>
  <function pos:start="659:3" pos:end="686:3"><type pos:start="659:3" pos:end="659:20"><specifier pos:start="659:3" pos:end="659:8">public</specifier> <specifier pos:start="659:10" pos:end="659:15">static</specifier> <name pos:start="659:17" pos:end="659:20">void</name></type> <name pos:start="659:22" pos:end="659:28">iterate</name><parameter_list pos:start="659:29" pos:end="659:83">(<parameter pos:start="659:30" pos:end="659:37"><decl pos:start="659:30" pos:end="659:37"><type pos:start="659:30" pos:end="659:37"><name pos:start="659:30" pos:end="659:33">File</name></type> <name pos:start="659:35" pos:end="659:37">zip</name></decl></parameter>, <parameter pos:start="659:40" pos:end="659:58"><decl pos:start="659:40" pos:end="659:58"><type pos:start="659:40" pos:end="659:58"><name pos:start="659:40" pos:end="659:47"><name pos:start="659:40" pos:end="659:45">String</name><index pos:start="659:46" pos:end="659:47">[]</index></name></type> <name pos:start="659:49" pos:end="659:58">entryNames</name></decl></parameter>, <parameter pos:start="659:61" pos:end="659:82"><decl pos:start="659:61" pos:end="659:82"><type pos:start="659:61" pos:end="659:82"><name pos:start="659:61" pos:end="659:75">ZipInfoCallback</name></type> <name pos:start="659:77" pos:end="659:82">action</name></decl></parameter>)</parameter_list> <block pos:start="659:85" pos:end="686:3">{<block_content pos:start="660:5" pos:end="685:5">
    <decl_stmt pos:start="660:5" pos:end="660:22"><decl pos:start="660:5" pos:end="660:21"><type pos:start="660:5" pos:end="660:11"><name pos:start="660:5" pos:end="660:11">ZipFile</name></type> <name pos:start="660:13" pos:end="660:14">zf</name> <init pos:start="660:16" pos:end="660:21">= <expr pos:start="660:18" pos:end="660:21"><literal type="null" pos:start="660:18" pos:end="660:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="661:5" pos:end="685:5">try <block pos:start="661:9" pos:end="679:5">{<block_content pos:start="662:7" pos:end="678:7">
      <expr_stmt pos:start="662:7" pos:end="662:28"><expr pos:start="662:7" pos:end="662:27"><name pos:start="662:7" pos:end="662:8">zf</name> <operator pos:start="662:10" pos:end="662:10">=</operator> <operator pos:start="662:12" pos:end="662:14">new</operator> <call pos:start="662:16" pos:end="662:27"><name pos:start="662:16" pos:end="662:22">ZipFile</name><argument_list pos:start="662:23" pos:end="662:27">(<argument pos:start="662:24" pos:end="662:26"><expr pos:start="662:24" pos:end="662:26"><name pos:start="662:24" pos:end="662:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for pos:start="664:7" pos:end="678:7">for <control pos:start="664:11" pos:end="664:49">(<init pos:start="664:12" pos:end="664:21"><decl pos:start="664:12" pos:end="664:20"><type pos:start="664:12" pos:end="664:14"><name pos:start="664:12" pos:end="664:14">int</name></type> <name pos:start="664:16" pos:end="664:16">i</name> <init pos:start="664:18" pos:end="664:20">= <expr pos:start="664:20" pos:end="664:20"><literal type="number" pos:start="664:20" pos:end="664:20">0</literal></expr></init></decl>;</init> <condition pos:start="664:23" pos:end="664:44"><expr pos:start="664:23" pos:end="664:43"><name pos:start="664:23" pos:end="664:23">i</name> <operator pos:start="664:25" pos:end="664:25">&lt;</operator> <name pos:start="664:27" pos:end="664:43"><name pos:start="664:27" pos:end="664:36">entryNames</name><operator pos:start="664:37" pos:end="664:37">.</operator><name pos:start="664:38" pos:end="664:43">length</name></name></expr>;</condition> <incr pos:start="664:46" pos:end="664:48"><expr pos:start="664:46" pos:end="664:48"><name pos:start="664:46" pos:end="664:46">i</name><operator pos:start="664:47" pos:end="664:48">++</operator></expr></incr>)</control> <block pos:start="664:51" pos:end="678:7">{<block_content pos:start="665:9" pos:end="677:9">
        <decl_stmt pos:start="665:9" pos:end="665:48"><decl pos:start="665:9" pos:end="665:47"><type pos:start="665:9" pos:end="665:16"><name pos:start="665:9" pos:end="665:16">ZipEntry</name></type> <name pos:start="665:18" pos:end="665:18">e</name> <init pos:start="665:20" pos:end="665:47">= <expr pos:start="665:22" pos:end="665:47"><call pos:start="665:22" pos:end="665:47"><name pos:start="665:22" pos:end="665:32"><name pos:start="665:22" pos:end="665:23">zf</name><operator pos:start="665:24" pos:end="665:24">.</operator><name pos:start="665:25" pos:end="665:32">getEntry</name></name><argument_list pos:start="665:33" pos:end="665:47">(<argument pos:start="665:34" pos:end="665:46"><expr pos:start="665:34" pos:end="665:46"><name pos:start="665:34" pos:end="665:46"><name pos:start="665:34" pos:end="665:43">entryNames</name><index pos:start="665:44" pos:end="665:46">[<expr pos:start="665:45" pos:end="665:45"><name pos:start="665:45" pos:end="665:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="666:9" pos:end="668:9"><if pos:start="666:9" pos:end="668:9">if <condition pos:start="666:12" pos:end="666:22">(<expr pos:start="666:13" pos:end="666:21"><name pos:start="666:13" pos:end="666:13">e</name> <operator pos:start="666:15" pos:end="666:16">==</operator> <literal type="null" pos:start="666:18" pos:end="666:21">null</literal></expr>)</condition> <block pos:start="666:24" pos:end="668:9">{<block_content pos:start="667:11" pos:end="667:19">
          <continue pos:start="667:11" pos:end="667:19">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <try pos:start="669:9" pos:end="677:9">try <block pos:start="669:13" pos:end="671:9">{<block_content pos:start="670:11" pos:end="670:28">
          <expr_stmt pos:start="670:11" pos:end="670:28"><expr pos:start="670:11" pos:end="670:27"><call pos:start="670:11" pos:end="670:27"><name pos:start="670:11" pos:end="670:24"><name pos:start="670:11" pos:end="670:16">action</name><operator pos:start="670:17" pos:end="670:17">.</operator><name pos:start="670:18" pos:end="670:24">process</name></name><argument_list pos:start="670:25" pos:end="670:27">(<argument pos:start="670:26" pos:end="670:26"><expr pos:start="670:26" pos:end="670:26"><name pos:start="670:26" pos:end="670:26">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch pos:start="672:9" pos:end="674:9">catch <parameter_list pos:start="672:15" pos:end="672:30">(<parameter pos:start="672:16" pos:end="672:29"><decl pos:start="672:16" pos:end="672:29"><type pos:start="672:16" pos:end="672:29"><name pos:start="672:16" pos:end="672:26">IOException</name></type> <name pos:start="672:28" pos:end="672:29">ze</name></decl></parameter>)</parameter_list> <block pos:start="672:32" pos:end="674:9">{<block_content pos:start="673:11" pos:end="673:111">
          <throw pos:start="673:11" pos:end="673:111">throw <expr pos:start="673:17" pos:end="673:110"><operator pos:start="673:17" pos:end="673:19">new</operator> <call pos:start="673:21" pos:end="673:110"><name pos:start="673:21" pos:end="673:32">ZipException</name><argument_list pos:start="673:33" pos:end="673:110">(<argument pos:start="673:34" pos:end="673:105"><expr pos:start="673:34" pos:end="673:105"><literal type="string" pos:start="673:34" pos:end="673:64">"Failed to process zip entry '"</literal> <operator pos:start="673:66" pos:end="673:66">+</operator> <call pos:start="673:68" pos:end="673:78"><name pos:start="673:68" pos:end="673:76"><name pos:start="673:68" pos:end="673:68">e</name><operator pos:start="673:69" pos:end="673:69">.</operator><name pos:start="673:70" pos:end="673:76">getName</name></name><argument_list pos:start="673:77" pos:end="673:78">()</argument_list></call> <operator pos:start="673:80" pos:end="673:80">+</operator> <literal type="string" pos:start="673:82" pos:end="673:96">" with action "</literal> <operator pos:start="673:98" pos:end="673:98">+</operator> <name pos:start="673:100" pos:end="673:105">action</name></expr></argument>, <argument pos:start="673:108" pos:end="673:109"><expr pos:start="673:108" pos:end="673:109"><name pos:start="673:108" pos:end="673:109">ze</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch pos:start="675:9" pos:end="677:9">catch <parameter_list pos:start="675:15" pos:end="675:36">(<parameter pos:start="675:16" pos:end="675:35"><decl pos:start="675:16" pos:end="675:35"><type pos:start="675:16" pos:end="675:35"><name pos:start="675:16" pos:end="675:32">ZipBreakException</name></type> <name pos:start="675:34" pos:end="675:35">ex</name></decl></parameter>)</parameter_list> <block pos:start="675:38" pos:end="677:9">{<block_content pos:start="676:11" pos:end="676:16">
          <break pos:start="676:11" pos:end="676:16">break;</break>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>
    </block_content>}</block>
    <catch pos:start="680:5" pos:end="682:5">catch <parameter_list pos:start="680:11" pos:end="680:25">(<parameter pos:start="680:12" pos:end="680:24"><decl pos:start="680:12" pos:end="680:24"><type pos:start="680:12" pos:end="680:24"><name pos:start="680:12" pos:end="680:22">IOException</name></type> <name pos:start="680:24" pos:end="680:24">e</name></decl></parameter>)</parameter_list> <block pos:start="680:27" pos:end="682:5">{<block_content pos:start="681:7" pos:end="681:40">
      <throw pos:start="681:7" pos:end="681:40">throw <expr pos:start="681:13" pos:end="681:39"><call pos:start="681:13" pos:end="681:39"><name pos:start="681:13" pos:end="681:36"><name pos:start="681:13" pos:end="681:28">ZipExceptionUtil</name><operator pos:start="681:29" pos:end="681:29">.</operator><name pos:start="681:30" pos:end="681:36">rethrow</name></name><argument_list pos:start="681:37" pos:end="681:39">(<argument pos:start="681:38" pos:end="681:38"><expr pos:start="681:38" pos:end="681:38"><name pos:start="681:38" pos:end="681:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="683:5" pos:end="685:5">finally <block pos:start="683:13" pos:end="685:5">{<block_content pos:start="684:7" pos:end="684:23">
      <expr_stmt pos:start="684:7" pos:end="684:23"><expr pos:start="684:7" pos:end="684:22"><call pos:start="684:7" pos:end="684:22"><name pos:start="684:7" pos:end="684:18">closeQuietly</name><argument_list pos:start="684:19" pos:end="684:22">(<argument pos:start="684:20" pos:end="684:21"><expr pos:start="684:20" pos:end="684:21"><name pos:start="684:20" pos:end="684:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="688:3" pos:end="703:5">/**
   * Reads the given ZIP stream and executes the given action for each entry.
   * &lt;p&gt;
   * For each entry the corresponding input stream is also passed to the action. If you want to stop the loop
   * then throw a ZipBreakException.
   *
   * @param is
   *          input ZIP stream (it will not be closed automatically).
   * @param action
   *          action to be called for each entry.
   * @param charset
   *          charset to process entries in
   *
   * @see ZipEntryCallback
   * @see #iterate(File, ZipEntryCallback)
   */</comment>
  <function pos:start="704:3" pos:end="731:3"><type pos:start="704:3" pos:end="704:20"><specifier pos:start="704:3" pos:end="704:8">public</specifier> <specifier pos:start="704:10" pos:end="704:15">static</specifier> <name pos:start="704:17" pos:end="704:20">void</name></type> <name pos:start="704:22" pos:end="704:28">iterate</name><parameter_list pos:start="704:29" pos:end="704:86">(<parameter pos:start="704:30" pos:end="704:43"><decl pos:start="704:30" pos:end="704:43"><type pos:start="704:30" pos:end="704:43"><name pos:start="704:30" pos:end="704:40">InputStream</name></type> <name pos:start="704:42" pos:end="704:43">is</name></decl></parameter>, <parameter pos:start="704:46" pos:end="704:68"><decl pos:start="704:46" pos:end="704:68"><type pos:start="704:46" pos:end="704:68"><name pos:start="704:46" pos:end="704:61">ZipEntryCallback</name></type> <name pos:start="704:63" pos:end="704:68">action</name></decl></parameter>, <parameter pos:start="704:71" pos:end="704:85"><decl pos:start="704:71" pos:end="704:85"><type pos:start="704:71" pos:end="704:85"><name pos:start="704:71" pos:end="704:77">Charset</name></type> <name pos:start="704:79" pos:end="704:85">charset</name></decl></parameter>)</parameter_list> <block pos:start="704:88" pos:end="731:3">{<block_content pos:start="705:5" pos:end="730:5">
    <try pos:start="705:5" pos:end="730:5">try <block pos:start="705:9" pos:end="727:5">{<block_content pos:start="706:7" pos:end="726:7">
      <decl_stmt pos:start="706:7" pos:end="706:31"><decl pos:start="706:7" pos:end="706:30"><type pos:start="706:7" pos:end="706:20"><name pos:start="706:7" pos:end="706:20">ZipInputStream</name></type> <name pos:start="706:22" pos:end="706:23">in</name> <init pos:start="706:25" pos:end="706:30">= <expr pos:start="706:27" pos:end="706:30"><literal type="null" pos:start="706:27" pos:end="706:30">null</literal></expr></init></decl>;</decl_stmt>
      <try pos:start="707:7" pos:end="726:7">try <block pos:start="707:11" pos:end="721:7">{<block_content pos:start="708:9" pos:end="720:9">
        <expr_stmt pos:start="708:9" pos:end="708:55"><expr pos:start="708:9" pos:end="708:54"><name pos:start="708:9" pos:end="708:10">in</name> <operator pos:start="708:12" pos:end="708:12">=</operator> <call pos:start="708:14" pos:end="708:54"><name pos:start="708:14" pos:end="708:41">newCloseShieldZipInputStream</name><argument_list pos:start="708:42" pos:end="708:54">(<argument pos:start="708:43" pos:end="708:44"><expr pos:start="708:43" pos:end="708:44"><name pos:start="708:43" pos:end="708:44">is</name></expr></argument>, <argument pos:start="708:47" pos:end="708:53"><expr pos:start="708:47" pos:end="708:53"><name pos:start="708:47" pos:end="708:53">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt pos:start="709:9" pos:end="709:23"><decl pos:start="709:9" pos:end="709:22"><type pos:start="709:9" pos:end="709:16"><name pos:start="709:9" pos:end="709:16">ZipEntry</name></type> <name pos:start="709:18" pos:end="709:22">entry</name></decl>;</decl_stmt>
        <while pos:start="710:9" pos:end="720:9">while <condition pos:start="710:15" pos:end="710:51">(<expr pos:start="710:16" pos:end="710:50"><operator pos:start="710:16" pos:end="710:16">(</operator><name pos:start="710:17" pos:end="710:21">entry</name> <operator pos:start="710:23" pos:end="710:23">=</operator> <call pos:start="710:25" pos:end="710:41"><name pos:start="710:25" pos:end="710:39"><name pos:start="710:25" pos:end="710:26">in</name><operator pos:start="710:27" pos:end="710:27">.</operator><name pos:start="710:28" pos:end="710:39">getNextEntry</name></name><argument_list pos:start="710:40" pos:end="710:41">()</argument_list></call><operator pos:start="710:42" pos:end="710:42">)</operator> <operator pos:start="710:44" pos:end="710:45">!=</operator> <literal type="null" pos:start="710:47" pos:end="710:50">null</literal></expr>)</condition> <block pos:start="710:53" pos:end="720:9">{<block_content pos:start="711:11" pos:end="719:11">
          <try pos:start="711:11" pos:end="719:11">try <block pos:start="711:15" pos:end="713:11">{<block_content pos:start="712:13" pos:end="712:38">
            <expr_stmt pos:start="712:13" pos:end="712:38"><expr pos:start="712:13" pos:end="712:37"><call pos:start="712:13" pos:end="712:37"><name pos:start="712:13" pos:end="712:26"><name pos:start="712:13" pos:end="712:18">action</name><operator pos:start="712:19" pos:end="712:19">.</operator><name pos:start="712:20" pos:end="712:26">process</name></name><argument_list pos:start="712:27" pos:end="712:37">(<argument pos:start="712:28" pos:end="712:29"><expr pos:start="712:28" pos:end="712:29"><name pos:start="712:28" pos:end="712:29">in</name></expr></argument>, <argument pos:start="712:32" pos:end="712:36"><expr pos:start="712:32" pos:end="712:36"><name pos:start="712:32" pos:end="712:36">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block>
          <catch pos:start="714:11" pos:end="716:11">catch <parameter_list pos:start="714:17" pos:end="714:32">(<parameter pos:start="714:18" pos:end="714:31"><decl pos:start="714:18" pos:end="714:31"><type pos:start="714:18" pos:end="714:31"><name pos:start="714:18" pos:end="714:28">IOException</name></type> <name pos:start="714:30" pos:end="714:31">ze</name></decl></parameter>)</parameter_list> <block pos:start="714:34" pos:end="716:11">{<block_content pos:start="715:13" pos:end="715:117">
            <throw pos:start="715:13" pos:end="715:117">throw <expr pos:start="715:19" pos:end="715:116"><operator pos:start="715:19" pos:end="715:21">new</operator> <call pos:start="715:23" pos:end="715:116"><name pos:start="715:23" pos:end="715:34">ZipException</name><argument_list pos:start="715:35" pos:end="715:116">(<argument pos:start="715:36" pos:end="715:111"><expr pos:start="715:36" pos:end="715:111"><literal type="string" pos:start="715:36" pos:end="715:66">"Failed to process zip entry '"</literal> <operator pos:start="715:68" pos:end="715:68">+</operator> <call pos:start="715:70" pos:end="715:84"><name pos:start="715:70" pos:end="715:82"><name pos:start="715:70" pos:end="715:74">entry</name><operator pos:start="715:75" pos:end="715:75">.</operator><name pos:start="715:76" pos:end="715:82">getName</name></name><argument_list pos:start="715:83" pos:end="715:84">()</argument_list></call> <operator pos:start="715:86" pos:end="715:86">+</operator> <literal type="string" pos:start="715:88" pos:end="715:102">" with action "</literal> <operator pos:start="715:104" pos:end="715:104">+</operator> <name pos:start="715:106" pos:end="715:111">action</name></expr></argument>, <argument pos:start="715:114" pos:end="715:115"><expr pos:start="715:114" pos:end="715:115"><name pos:start="715:114" pos:end="715:115">ze</name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></catch>
          <catch pos:start="717:11" pos:end="719:11">catch <parameter_list pos:start="717:17" pos:end="717:38">(<parameter pos:start="717:18" pos:end="717:37"><decl pos:start="717:18" pos:end="717:37"><type pos:start="717:18" pos:end="717:37"><name pos:start="717:18" pos:end="717:34">ZipBreakException</name></type> <name pos:start="717:36" pos:end="717:37">ex</name></decl></parameter>)</parameter_list> <block pos:start="717:40" pos:end="719:11">{<block_content pos:start="718:13" pos:end="718:18">
            <break pos:start="718:13" pos:end="718:18">break;</break>
          </block_content>}</block></catch></try>
        </block_content>}</block></while>
      </block_content>}</block>
      <finally pos:start="722:7" pos:end="726:7">finally <block pos:start="722:15" pos:end="726:7">{<block_content pos:start="723:9" pos:end="725:9">
        <if_stmt pos:start="723:9" pos:end="725:9"><if pos:start="723:9" pos:end="725:9">if <condition pos:start="723:12" pos:end="723:23">(<expr pos:start="723:13" pos:end="723:22"><name pos:start="723:13" pos:end="723:14">in</name> <operator pos:start="723:16" pos:end="723:17">!=</operator> <literal type="null" pos:start="723:19" pos:end="723:22">null</literal></expr>)</condition> <block pos:start="723:25" pos:end="725:9">{<block_content pos:start="724:11" pos:end="724:21">
          <expr_stmt pos:start="724:11" pos:end="724:21"><expr pos:start="724:11" pos:end="724:20"><call pos:start="724:11" pos:end="724:20"><name pos:start="724:11" pos:end="724:18"><name pos:start="724:11" pos:end="724:12">in</name><operator pos:start="724:13" pos:end="724:13">.</operator><name pos:start="724:14" pos:end="724:18">close</name></name><argument_list pos:start="724:19" pos:end="724:20">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block>
    <catch pos:start="728:5" pos:end="730:5">catch <parameter_list pos:start="728:11" pos:end="728:25">(<parameter pos:start="728:12" pos:end="728:24"><decl pos:start="728:12" pos:end="728:24"><type pos:start="728:12" pos:end="728:24"><name pos:start="728:12" pos:end="728:22">IOException</name></type> <name pos:start="728:24" pos:end="728:24">e</name></decl></parameter>)</parameter_list> <block pos:start="728:27" pos:end="730:5">{<block_content pos:start="729:7" pos:end="729:40">
      <throw pos:start="729:7" pos:end="729:40">throw <expr pos:start="729:13" pos:end="729:39"><call pos:start="729:13" pos:end="729:39"><name pos:start="729:13" pos:end="729:36"><name pos:start="729:13" pos:end="729:28">ZipExceptionUtil</name><operator pos:start="729:29" pos:end="729:29">.</operator><name pos:start="729:30" pos:end="729:36">rethrow</name></name><argument_list pos:start="729:37" pos:end="729:39">(<argument pos:start="729:38" pos:end="729:38"><expr pos:start="729:38" pos:end="729:38"><name pos:start="729:38" pos:end="729:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="733:3" pos:end="744:5">/**
   * See {@link #iterate(InputStream, ZipEntryCallback, Charset)}. This method
   * is a shorthand for a version where no Charset is specified.
   *
   * @param is
   *          input ZIP stream (it will not be closed automatically).
   * @param action
   *          action to be called for each entry.
   *
   * @see ZipEntryCallback
   * @see #iterate(File, ZipEntryCallback)
   */</comment>
  <function pos:start="745:3" pos:end="747:3"><type pos:start="745:3" pos:end="745:20"><specifier pos:start="745:3" pos:end="745:8">public</specifier> <specifier pos:start="745:10" pos:end="745:15">static</specifier> <name pos:start="745:17" pos:end="745:20">void</name></type> <name pos:start="745:22" pos:end="745:28">iterate</name><parameter_list pos:start="745:29" pos:end="745:69">(<parameter pos:start="745:30" pos:end="745:43"><decl pos:start="745:30" pos:end="745:43"><type pos:start="745:30" pos:end="745:43"><name pos:start="745:30" pos:end="745:40">InputStream</name></type> <name pos:start="745:42" pos:end="745:43">is</name></decl></parameter>, <parameter pos:start="745:46" pos:end="745:68"><decl pos:start="745:46" pos:end="745:68"><type pos:start="745:46" pos:end="745:68"><name pos:start="745:46" pos:end="745:61">ZipEntryCallback</name></type> <name pos:start="745:63" pos:end="745:68">action</name></decl></parameter>)</parameter_list> <block pos:start="745:71" pos:end="747:3">{<block_content pos:start="746:5" pos:end="746:30">
    <expr_stmt pos:start="746:5" pos:end="746:30"><expr pos:start="746:5" pos:end="746:29"><call pos:start="746:5" pos:end="746:29"><name pos:start="746:5" pos:end="746:11">iterate</name><argument_list pos:start="746:12" pos:end="746:29">(<argument pos:start="746:13" pos:end="746:14"><expr pos:start="746:13" pos:end="746:14"><name pos:start="746:13" pos:end="746:14">is</name></expr></argument>, <argument pos:start="746:17" pos:end="746:22"><expr pos:start="746:17" pos:end="746:22"><name pos:start="746:17" pos:end="746:22">action</name></expr></argument>, <argument pos:start="746:25" pos:end="746:28"><expr pos:start="746:25" pos:end="746:28"><literal type="null" pos:start="746:25" pos:end="746:28">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="749:3" pos:end="765:5">/**
   * Reads the given ZIP stream and executes the given action for each given entry.
   * &lt;p&gt;
   * For each given entry the corresponding input stream is also passed to the action. If you want to stop the loop then throw a ZipBreakException.
   *
   * @param is
   *          input ZIP stream (it will not be closed automatically).
   * @param entryNames
   *          names of entries to iterate
   * @param action
   *          action to be called for each entry.
   * @param charset
   *          charset to process entries in
   *
   * @see ZipEntryCallback
   * @see #iterate(File, String[], ZipEntryCallback)
   */</comment>
  <function pos:start="766:3" pos:end="801:3"><type pos:start="766:3" pos:end="766:20"><specifier pos:start="766:3" pos:end="766:8">public</specifier> <specifier pos:start="766:10" pos:end="766:15">static</specifier> <name pos:start="766:17" pos:end="766:20">void</name></type> <name pos:start="766:22" pos:end="766:28">iterate</name><parameter_list pos:start="766:29" pos:end="766:107">(<parameter pos:start="766:30" pos:end="766:43"><decl pos:start="766:30" pos:end="766:43"><type pos:start="766:30" pos:end="766:43"><name pos:start="766:30" pos:end="766:40">InputStream</name></type> <name pos:start="766:42" pos:end="766:43">is</name></decl></parameter>, <parameter pos:start="766:46" pos:end="766:64"><decl pos:start="766:46" pos:end="766:64"><type pos:start="766:46" pos:end="766:64"><name pos:start="766:46" pos:end="766:53"><name pos:start="766:46" pos:end="766:51">String</name><index pos:start="766:52" pos:end="766:53">[]</index></name></type> <name pos:start="766:55" pos:end="766:64">entryNames</name></decl></parameter>, <parameter pos:start="766:67" pos:end="766:89"><decl pos:start="766:67" pos:end="766:89"><type pos:start="766:67" pos:end="766:89"><name pos:start="766:67" pos:end="766:82">ZipEntryCallback</name></type> <name pos:start="766:84" pos:end="766:89">action</name></decl></parameter>, <parameter pos:start="766:92" pos:end="766:106"><decl pos:start="766:92" pos:end="766:106"><type pos:start="766:92" pos:end="766:106"><name pos:start="766:92" pos:end="766:98">Charset</name></type> <name pos:start="766:100" pos:end="766:106">charset</name></decl></parameter>)</parameter_list> <block pos:start="766:109" pos:end="801:3">{<block_content pos:start="767:5" pos:end="800:5">
    <decl_stmt pos:start="767:5" pos:end="767:49"><decl pos:start="767:5" pos:end="767:48"><type pos:start="767:5" pos:end="767:15"><name pos:start="767:5" pos:end="767:15"><name pos:start="767:5" pos:end="767:7">Set</name><argument_list type="generic" pos:start="767:8" pos:end="767:15">&lt;<argument pos:start="767:9" pos:end="767:14"><name pos:start="767:9" pos:end="767:14">String</name></argument>&gt;</argument_list></name></type> <name pos:start="767:17" pos:end="767:24">namesSet</name> <init pos:start="767:26" pos:end="767:48">= <expr pos:start="767:28" pos:end="767:48"><operator pos:start="767:28" pos:end="767:30">new</operator> <call pos:start="767:32" pos:end="767:48"><name pos:start="767:32" pos:end="767:46"><name pos:start="767:32" pos:end="767:38">HashSet</name><argument_list type="generic" pos:start="767:39" pos:end="767:46">&lt;<argument pos:start="767:40" pos:end="767:45"><name pos:start="767:40" pos:end="767:45">String</name></argument>&gt;</argument_list></name><argument_list pos:start="767:47" pos:end="767:48">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for pos:start="768:5" pos:end="770:5">for <control pos:start="768:9" pos:end="768:47">(<init pos:start="768:10" pos:end="768:19"><decl pos:start="768:10" pos:end="768:18"><type pos:start="768:10" pos:end="768:12"><name pos:start="768:10" pos:end="768:12">int</name></type> <name pos:start="768:14" pos:end="768:14">i</name> <init pos:start="768:16" pos:end="768:18">= <expr pos:start="768:18" pos:end="768:18"><literal type="number" pos:start="768:18" pos:end="768:18">0</literal></expr></init></decl>;</init> <condition pos:start="768:21" pos:end="768:42"><expr pos:start="768:21" pos:end="768:41"><name pos:start="768:21" pos:end="768:21">i</name> <operator pos:start="768:23" pos:end="768:23">&lt;</operator> <name pos:start="768:25" pos:end="768:41"><name pos:start="768:25" pos:end="768:34">entryNames</name><operator pos:start="768:35" pos:end="768:35">.</operator><name pos:start="768:36" pos:end="768:41">length</name></name></expr>;</condition> <incr pos:start="768:44" pos:end="768:46"><expr pos:start="768:44" pos:end="768:46"><name pos:start="768:44" pos:end="768:44">i</name><operator pos:start="768:45" pos:end="768:46">++</operator></expr></incr>)</control> <block pos:start="768:49" pos:end="770:5">{<block_content pos:start="769:7" pos:end="769:34">
      <expr_stmt pos:start="769:7" pos:end="769:34"><expr pos:start="769:7" pos:end="769:33"><call pos:start="769:7" pos:end="769:33"><name pos:start="769:7" pos:end="769:18"><name pos:start="769:7" pos:end="769:14">namesSet</name><operator pos:start="769:15" pos:end="769:15">.</operator><name pos:start="769:16" pos:end="769:18">add</name></name><argument_list pos:start="769:19" pos:end="769:33">(<argument pos:start="769:20" pos:end="769:32"><expr pos:start="769:20" pos:end="769:32"><name pos:start="769:20" pos:end="769:32"><name pos:start="769:20" pos:end="769:29">entryNames</name><index pos:start="769:30" pos:end="769:32">[<expr pos:start="769:31" pos:end="769:31"><name pos:start="769:31" pos:end="769:31">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <try pos:start="771:5" pos:end="800:5">try <block pos:start="771:9" pos:end="797:5">{<block_content pos:start="772:7" pos:end="796:7">
      <decl_stmt pos:start="772:7" pos:end="772:31"><decl pos:start="772:7" pos:end="772:30"><type pos:start="772:7" pos:end="772:20"><name pos:start="772:7" pos:end="772:20">ZipInputStream</name></type> <name pos:start="772:22" pos:end="772:23">in</name> <init pos:start="772:25" pos:end="772:30">= <expr pos:start="772:27" pos:end="772:30"><literal type="null" pos:start="772:27" pos:end="772:30">null</literal></expr></init></decl>;</decl_stmt>
      <try pos:start="773:7" pos:end="796:7">try <block pos:start="773:11" pos:end="791:7">{<block_content pos:start="774:9" pos:end="790:9">
        <expr_stmt pos:start="774:9" pos:end="774:55"><expr pos:start="774:9" pos:end="774:54"><name pos:start="774:9" pos:end="774:10">in</name> <operator pos:start="774:12" pos:end="774:12">=</operator> <call pos:start="774:14" pos:end="774:54"><name pos:start="774:14" pos:end="774:41">newCloseShieldZipInputStream</name><argument_list pos:start="774:42" pos:end="774:54">(<argument pos:start="774:43" pos:end="774:44"><expr pos:start="774:43" pos:end="774:44"><name pos:start="774:43" pos:end="774:44">is</name></expr></argument>, <argument pos:start="774:47" pos:end="774:53"><expr pos:start="774:47" pos:end="774:53"><name pos:start="774:47" pos:end="774:53">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt pos:start="775:9" pos:end="775:23"><decl pos:start="775:9" pos:end="775:22"><type pos:start="775:9" pos:end="775:16"><name pos:start="775:9" pos:end="775:16">ZipEntry</name></type> <name pos:start="775:18" pos:end="775:22">entry</name></decl>;</decl_stmt>
        <while pos:start="776:9" pos:end="790:9">while <condition pos:start="776:15" pos:end="776:51">(<expr pos:start="776:16" pos:end="776:50"><operator pos:start="776:16" pos:end="776:16">(</operator><name pos:start="776:17" pos:end="776:21">entry</name> <operator pos:start="776:23" pos:end="776:23">=</operator> <call pos:start="776:25" pos:end="776:41"><name pos:start="776:25" pos:end="776:39"><name pos:start="776:25" pos:end="776:26">in</name><operator pos:start="776:27" pos:end="776:27">.</operator><name pos:start="776:28" pos:end="776:39">getNextEntry</name></name><argument_list pos:start="776:40" pos:end="776:41">()</argument_list></call><operator pos:start="776:42" pos:end="776:42">)</operator> <operator pos:start="776:44" pos:end="776:45">!=</operator> <literal type="null" pos:start="776:47" pos:end="776:50">null</literal></expr>)</condition> <block pos:start="776:53" pos:end="790:9">{<block_content pos:start="777:11" pos:end="789:11">
          <if_stmt pos:start="777:11" pos:end="780:11"><if pos:start="777:11" pos:end="780:11">if <condition pos:start="777:14" pos:end="777:50">(<expr pos:start="777:15" pos:end="777:49"><operator pos:start="777:15" pos:end="777:15">!</operator><call pos:start="777:16" pos:end="777:49"><name pos:start="777:16" pos:end="777:32"><name pos:start="777:16" pos:end="777:23">namesSet</name><operator pos:start="777:24" pos:end="777:24">.</operator><name pos:start="777:25" pos:end="777:32">contains</name></name><argument_list pos:start="777:33" pos:end="777:49">(<argument pos:start="777:34" pos:end="777:48"><expr pos:start="777:34" pos:end="777:48"><call pos:start="777:34" pos:end="777:48"><name pos:start="777:34" pos:end="777:46"><name pos:start="777:34" pos:end="777:38">entry</name><operator pos:start="777:39" pos:end="777:39">.</operator><name pos:start="777:40" pos:end="777:46">getName</name></name><argument_list pos:start="777:47" pos:end="777:48">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="777:52" pos:end="780:11">{<block_content pos:start="779:13" pos:end="779:21">
            <comment type="line" pos:start="778:13" pos:end="778:41">// skip the unnecessary entry</comment>
            <continue pos:start="779:13" pos:end="779:21">continue;</continue>
          </block_content>}</block></if></if_stmt>
          <try pos:start="781:11" pos:end="789:11">try <block pos:start="781:15" pos:end="783:11">{<block_content pos:start="782:13" pos:end="782:38">
            <expr_stmt pos:start="782:13" pos:end="782:38"><expr pos:start="782:13" pos:end="782:37"><call pos:start="782:13" pos:end="782:37"><name pos:start="782:13" pos:end="782:26"><name pos:start="782:13" pos:end="782:18">action</name><operator pos:start="782:19" pos:end="782:19">.</operator><name pos:start="782:20" pos:end="782:26">process</name></name><argument_list pos:start="782:27" pos:end="782:37">(<argument pos:start="782:28" pos:end="782:29"><expr pos:start="782:28" pos:end="782:29"><name pos:start="782:28" pos:end="782:29">in</name></expr></argument>, <argument pos:start="782:32" pos:end="782:36"><expr pos:start="782:32" pos:end="782:36"><name pos:start="782:32" pos:end="782:36">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block>
          <catch pos:start="784:11" pos:end="786:11">catch <parameter_list pos:start="784:17" pos:end="784:32">(<parameter pos:start="784:18" pos:end="784:31"><decl pos:start="784:18" pos:end="784:31"><type pos:start="784:18" pos:end="784:31"><name pos:start="784:18" pos:end="784:28">IOException</name></type> <name pos:start="784:30" pos:end="784:31">ze</name></decl></parameter>)</parameter_list> <block pos:start="784:34" pos:end="786:11">{<block_content pos:start="785:13" pos:end="785:117">
            <throw pos:start="785:13" pos:end="785:117">throw <expr pos:start="785:19" pos:end="785:116"><operator pos:start="785:19" pos:end="785:21">new</operator> <call pos:start="785:23" pos:end="785:116"><name pos:start="785:23" pos:end="785:34">ZipException</name><argument_list pos:start="785:35" pos:end="785:116">(<argument pos:start="785:36" pos:end="785:111"><expr pos:start="785:36" pos:end="785:111"><literal type="string" pos:start="785:36" pos:end="785:66">"Failed to process zip entry '"</literal> <operator pos:start="785:68" pos:end="785:68">+</operator> <call pos:start="785:70" pos:end="785:84"><name pos:start="785:70" pos:end="785:82"><name pos:start="785:70" pos:end="785:74">entry</name><operator pos:start="785:75" pos:end="785:75">.</operator><name pos:start="785:76" pos:end="785:82">getName</name></name><argument_list pos:start="785:83" pos:end="785:84">()</argument_list></call> <operator pos:start="785:86" pos:end="785:86">+</operator> <literal type="string" pos:start="785:88" pos:end="785:102">" with action "</literal> <operator pos:start="785:104" pos:end="785:104">+</operator> <name pos:start="785:106" pos:end="785:111">action</name></expr></argument>, <argument pos:start="785:114" pos:end="785:115"><expr pos:start="785:114" pos:end="785:115"><name pos:start="785:114" pos:end="785:115">ze</name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></catch>
          <catch pos:start="787:11" pos:end="789:11">catch <parameter_list pos:start="787:17" pos:end="787:38">(<parameter pos:start="787:18" pos:end="787:37"><decl pos:start="787:18" pos:end="787:37"><type pos:start="787:18" pos:end="787:37"><name pos:start="787:18" pos:end="787:34">ZipBreakException</name></type> <name pos:start="787:36" pos:end="787:37">ex</name></decl></parameter>)</parameter_list> <block pos:start="787:40" pos:end="789:11">{<block_content pos:start="788:13" pos:end="788:18">
            <break pos:start="788:13" pos:end="788:18">break;</break>
          </block_content>}</block></catch></try>
        </block_content>}</block></while>
      </block_content>}</block>
      <finally pos:start="792:7" pos:end="796:7">finally <block pos:start="792:15" pos:end="796:7">{<block_content pos:start="793:9" pos:end="795:9">
        <if_stmt pos:start="793:9" pos:end="795:9"><if pos:start="793:9" pos:end="795:9">if <condition pos:start="793:12" pos:end="793:23">(<expr pos:start="793:13" pos:end="793:22"><name pos:start="793:13" pos:end="793:14">in</name> <operator pos:start="793:16" pos:end="793:17">!=</operator> <literal type="null" pos:start="793:19" pos:end="793:22">null</literal></expr>)</condition> <block pos:start="793:25" pos:end="795:9">{<block_content pos:start="794:11" pos:end="794:21">
          <expr_stmt pos:start="794:11" pos:end="794:21"><expr pos:start="794:11" pos:end="794:20"><call pos:start="794:11" pos:end="794:20"><name pos:start="794:11" pos:end="794:18"><name pos:start="794:11" pos:end="794:12">in</name><operator pos:start="794:13" pos:end="794:13">.</operator><name pos:start="794:14" pos:end="794:18">close</name></name><argument_list pos:start="794:19" pos:end="794:20">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block>
    <catch pos:start="798:5" pos:end="800:5">catch <parameter_list pos:start="798:11" pos:end="798:25">(<parameter pos:start="798:12" pos:end="798:24"><decl pos:start="798:12" pos:end="798:24"><type pos:start="798:12" pos:end="798:24"><name pos:start="798:12" pos:end="798:22">IOException</name></type> <name pos:start="798:24" pos:end="798:24">e</name></decl></parameter>)</parameter_list> <block pos:start="798:27" pos:end="800:5">{<block_content pos:start="799:7" pos:end="799:40">
      <throw pos:start="799:7" pos:end="799:40">throw <expr pos:start="799:13" pos:end="799:39"><call pos:start="799:13" pos:end="799:39"><name pos:start="799:13" pos:end="799:36"><name pos:start="799:13" pos:end="799:28">ZipExceptionUtil</name><operator pos:start="799:29" pos:end="799:29">.</operator><name pos:start="799:30" pos:end="799:36">rethrow</name></name><argument_list pos:start="799:37" pos:end="799:39">(<argument pos:start="799:38" pos:end="799:38"><expr pos:start="799:38" pos:end="799:38"><name pos:start="799:38" pos:end="799:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="803:3" pos:end="816:5">/**
   * See @link{ {@link #iterate(InputStream, ZipEntryCallback, Charset)}. It is a
   * shorthand where no Charset is specified.
   *
   * @param is
   *          input ZIP stream (it will not be closed automatically).
   * @param entryNames
   *          names of entries to iterate
   * @param action
   *          action to be called for each entry.
   *
   * @see ZipEntryCallback
   * @see #iterate(File, String[], ZipEntryCallback)
   */</comment>
  <function pos:start="817:3" pos:end="819:3"><type pos:start="817:3" pos:end="817:20"><specifier pos:start="817:3" pos:end="817:8">public</specifier> <specifier pos:start="817:10" pos:end="817:15">static</specifier> <name pos:start="817:17" pos:end="817:20">void</name></type> <name pos:start="817:22" pos:end="817:28">iterate</name><parameter_list pos:start="817:29" pos:end="817:90">(<parameter pos:start="817:30" pos:end="817:43"><decl pos:start="817:30" pos:end="817:43"><type pos:start="817:30" pos:end="817:43"><name pos:start="817:30" pos:end="817:40">InputStream</name></type> <name pos:start="817:42" pos:end="817:43">is</name></decl></parameter>, <parameter pos:start="817:46" pos:end="817:64"><decl pos:start="817:46" pos:end="817:64"><type pos:start="817:46" pos:end="817:64"><name pos:start="817:46" pos:end="817:53"><name pos:start="817:46" pos:end="817:51">String</name><index pos:start="817:52" pos:end="817:53">[]</index></name></type> <name pos:start="817:55" pos:end="817:64">entryNames</name></decl></parameter>, <parameter pos:start="817:67" pos:end="817:89"><decl pos:start="817:67" pos:end="817:89"><type pos:start="817:67" pos:end="817:89"><name pos:start="817:67" pos:end="817:82">ZipEntryCallback</name></type> <name pos:start="817:84" pos:end="817:89">action</name></decl></parameter>)</parameter_list> <block pos:start="817:92" pos:end="819:3">{<block_content pos:start="818:5" pos:end="818:42">
    <expr_stmt pos:start="818:5" pos:end="818:42"><expr pos:start="818:5" pos:end="818:41"><call pos:start="818:5" pos:end="818:41"><name pos:start="818:5" pos:end="818:11">iterate</name><argument_list pos:start="818:12" pos:end="818:41">(<argument pos:start="818:13" pos:end="818:14"><expr pos:start="818:13" pos:end="818:14"><name pos:start="818:13" pos:end="818:14">is</name></expr></argument>, <argument pos:start="818:17" pos:end="818:26"><expr pos:start="818:17" pos:end="818:26"><name pos:start="818:17" pos:end="818:26">entryNames</name></expr></argument>, <argument pos:start="818:29" pos:end="818:34"><expr pos:start="818:29" pos:end="818:34"><name pos:start="818:29" pos:end="818:34">action</name></expr></argument>, <argument pos:start="818:37" pos:end="818:40"><expr pos:start="818:37" pos:end="818:40"><literal type="null" pos:start="818:37" pos:end="818:40">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="821:3" pos:end="824:5">/**
   * Creates a new {@link ZipInputStream} based on the given {@link InputStream}. It will be buffered and close-shielded.
   * Closing the result stream flushes the buffers and frees up resources of the {@link ZipInputStream}. However the source stream itself remains open.
   */</comment>
  <function pos:start="825:3" pos:end="831:3"><type pos:start="825:3" pos:end="825:31"><specifier pos:start="825:3" pos:end="825:9">private</specifier> <specifier pos:start="825:11" pos:end="825:16">static</specifier> <name pos:start="825:18" pos:end="825:31">ZipInputStream</name></type> <name pos:start="825:33" pos:end="825:60">newCloseShieldZipInputStream</name><parameter_list pos:start="825:61" pos:end="825:99">(<parameter pos:start="825:62" pos:end="825:81"><decl pos:start="825:62" pos:end="825:81"><type pos:start="825:62" pos:end="825:81"><specifier pos:start="825:62" pos:end="825:66">final</specifier> <name pos:start="825:68" pos:end="825:78">InputStream</name></type> <name pos:start="825:80" pos:end="825:81">is</name></decl></parameter>, <parameter pos:start="825:84" pos:end="825:98"><decl pos:start="825:84" pos:end="825:98"><type pos:start="825:84" pos:end="825:98"><name pos:start="825:84" pos:end="825:90">Charset</name></type> <name pos:start="825:92" pos:end="825:98">charset</name></decl></parameter>)</parameter_list> <block pos:start="825:101" pos:end="831:3">{<block_content pos:start="826:5" pos:end="830:57">
    <decl_stmt pos:start="826:5" pos:end="826:77"><decl pos:start="826:5" pos:end="826:76"><type pos:start="826:5" pos:end="826:15"><name pos:start="826:5" pos:end="826:15">InputStream</name></type> <name pos:start="826:17" pos:end="826:18">in</name> <init pos:start="826:20" pos:end="826:76">= <expr pos:start="826:22" pos:end="826:76"><operator pos:start="826:22" pos:end="826:24">new</operator> <call pos:start="826:26" pos:end="826:76"><name pos:start="826:26" pos:end="826:44">BufferedInputStream</name><argument_list pos:start="826:45" pos:end="826:76">(<argument pos:start="826:46" pos:end="826:75"><expr pos:start="826:46" pos:end="826:75"><operator pos:start="826:46" pos:end="826:48">new</operator> <call pos:start="826:50" pos:end="826:75"><name pos:start="826:50" pos:end="826:71">CloseShieldInputStream</name><argument_list pos:start="826:72" pos:end="826:75">(<argument pos:start="826:73" pos:end="826:74"><expr pos:start="826:73" pos:end="826:74"><name pos:start="826:73" pos:end="826:74">is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="827:5" pos:end="829:5"><if pos:start="827:5" pos:end="829:5">if <condition pos:start="827:8" pos:end="827:24">(<expr pos:start="827:9" pos:end="827:23"><name pos:start="827:9" pos:end="827:15">charset</name> <operator pos:start="827:17" pos:end="827:18">==</operator> <literal type="null" pos:start="827:20" pos:end="827:23">null</literal></expr>)</condition> <block pos:start="827:26" pos:end="829:5">{<block_content pos:start="828:7" pos:end="828:36">
      <return pos:start="828:7" pos:end="828:36">return <expr pos:start="828:14" pos:end="828:35"><operator pos:start="828:14" pos:end="828:16">new</operator> <call pos:start="828:18" pos:end="828:35"><name pos:start="828:18" pos:end="828:31">ZipInputStream</name><argument_list pos:start="828:32" pos:end="828:35">(<argument pos:start="828:33" pos:end="828:34"><expr pos:start="828:33" pos:end="828:34"><name pos:start="828:33" pos:end="828:34">in</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="830:5" pos:end="830:57">return <expr pos:start="830:12" pos:end="830:56"><call pos:start="830:12" pos:end="830:56"><name pos:start="830:12" pos:end="830:43"><name pos:start="830:12" pos:end="830:22">ZipFileUtil</name><operator pos:start="830:23" pos:end="830:23">.</operator><name pos:start="830:24" pos:end="830:43">createZipInputStream</name></name><argument_list pos:start="830:44" pos:end="830:56">(<argument pos:start="830:45" pos:end="830:46"><expr pos:start="830:45" pos:end="830:46"><name pos:start="830:45" pos:end="830:46">in</name></expr></argument>, <argument pos:start="830:49" pos:end="830:55"><expr pos:start="830:49" pos:end="830:55"><name pos:start="830:49" pos:end="830:55">charset</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="833:3" pos:end="846:5">/**
   * Reads the given ZIP file and executes the given action for a single entry.
   *
   * @param zip
   *          input ZIP file.
   * @param name
   *          entry name.
   * @param action
   *          action to be called for this entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found, &lt;code&gt;false&lt;/code&gt; if the
   *         entry was not found.
   *
   * @see ZipEntryCallback
   */</comment>
  <function pos:start="847:3" pos:end="872:3"><type pos:start="847:3" pos:end="847:23"><specifier pos:start="847:3" pos:end="847:8">public</specifier> <specifier pos:start="847:10" pos:end="847:15">static</specifier> <name pos:start="847:17" pos:end="847:23">boolean</name></type> <name pos:start="847:25" pos:end="847:30">handle</name><parameter_list pos:start="847:31" pos:end="847:78">(<parameter pos:start="847:32" pos:end="847:39"><decl pos:start="847:32" pos:end="847:39"><type pos:start="847:32" pos:end="847:39"><name pos:start="847:32" pos:end="847:35">File</name></type> <name pos:start="847:37" pos:end="847:39">zip</name></decl></parameter>, <parameter pos:start="847:42" pos:end="847:52"><decl pos:start="847:42" pos:end="847:52"><type pos:start="847:42" pos:end="847:52"><name pos:start="847:42" pos:end="847:47">String</name></type> <name pos:start="847:49" pos:end="847:52">name</name></decl></parameter>, <parameter pos:start="847:55" pos:end="847:77"><decl pos:start="847:55" pos:end="847:77"><type pos:start="847:55" pos:end="847:77"><name pos:start="847:55" pos:end="847:70">ZipEntryCallback</name></type> <name pos:start="847:72" pos:end="847:77">action</name></decl></parameter>)</parameter_list> <block pos:start="847:80" pos:end="872:3">{<block_content pos:start="848:5" pos:end="871:5">
    <decl_stmt pos:start="848:5" pos:end="848:22"><decl pos:start="848:5" pos:end="848:21"><type pos:start="848:5" pos:end="848:11"><name pos:start="848:5" pos:end="848:11">ZipFile</name></type> <name pos:start="848:13" pos:end="848:14">zf</name> <init pos:start="848:16" pos:end="848:21">= <expr pos:start="848:18" pos:end="848:21"><literal type="null" pos:start="848:18" pos:end="848:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="849:5" pos:end="871:5">try <block pos:start="849:9" pos:end="865:5">{<block_content pos:start="850:7" pos:end="864:18">
      <expr_stmt pos:start="850:7" pos:end="850:28"><expr pos:start="850:7" pos:end="850:27"><name pos:start="850:7" pos:end="850:8">zf</name> <operator pos:start="850:10" pos:end="850:10">=</operator> <operator pos:start="850:12" pos:end="850:14">new</operator> <call pos:start="850:16" pos:end="850:27"><name pos:start="850:16" pos:end="850:22">ZipFile</name><argument_list pos:start="850:23" pos:end="850:27">(<argument pos:start="850:24" pos:end="850:26"><expr pos:start="850:24" pos:end="850:26"><name pos:start="850:24" pos:end="850:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt pos:start="852:7" pos:end="852:38"><decl pos:start="852:7" pos:end="852:37"><type pos:start="852:7" pos:end="852:14"><name pos:start="852:7" pos:end="852:14">ZipEntry</name></type> <name pos:start="852:16" pos:end="852:17">ze</name> <init pos:start="852:19" pos:end="852:37">= <expr pos:start="852:21" pos:end="852:37"><call pos:start="852:21" pos:end="852:37"><name pos:start="852:21" pos:end="852:31"><name pos:start="852:21" pos:end="852:22">zf</name><operator pos:start="852:23" pos:end="852:23">.</operator><name pos:start="852:24" pos:end="852:31">getEntry</name></name><argument_list pos:start="852:32" pos:end="852:37">(<argument pos:start="852:33" pos:end="852:36"><expr pos:start="852:33" pos:end="852:36"><name pos:start="852:33" pos:end="852:36">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="853:7" pos:end="855:7"><if pos:start="853:7" pos:end="855:7">if <condition pos:start="853:10" pos:end="853:21">(<expr pos:start="853:11" pos:end="853:20"><name pos:start="853:11" pos:end="853:12">ze</name> <operator pos:start="853:14" pos:end="853:15">==</operator> <literal type="null" pos:start="853:17" pos:end="853:20">null</literal></expr>)</condition> <block pos:start="853:23" pos:end="855:7">{<block_content pos:start="854:9" pos:end="854:21">
        <return pos:start="854:9" pos:end="854:21">return <expr pos:start="854:16" pos:end="854:20"><literal type="boolean" pos:start="854:16" pos:end="854:20">false</literal></expr>;</return> <comment type="line" pos:start="854:23" pos:end="854:40">// entry not found</comment>
      </block_content>}</block></if></if_stmt>

      <decl_stmt pos:start="857:7" pos:end="857:70"><decl pos:start="857:7" pos:end="857:69"><type pos:start="857:7" pos:end="857:17"><name pos:start="857:7" pos:end="857:17">InputStream</name></type> <name pos:start="857:19" pos:end="857:20">in</name> <init pos:start="857:22" pos:end="857:69">= <expr pos:start="857:24" pos:end="857:69"><operator pos:start="857:24" pos:end="857:26">new</operator> <call pos:start="857:28" pos:end="857:69"><name pos:start="857:28" pos:end="857:46">BufferedInputStream</name><argument_list pos:start="857:47" pos:end="857:69">(<argument pos:start="857:48" pos:end="857:68"><expr pos:start="857:48" pos:end="857:68"><call pos:start="857:48" pos:end="857:68"><name pos:start="857:48" pos:end="857:64"><name pos:start="857:48" pos:end="857:49">zf</name><operator pos:start="857:50" pos:end="857:50">.</operator><name pos:start="857:51" pos:end="857:64">getInputStream</name></name><argument_list pos:start="857:65" pos:end="857:68">(<argument pos:start="857:66" pos:end="857:67"><expr pos:start="857:66" pos:end="857:67"><name pos:start="857:66" pos:end="857:67">ze</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <try pos:start="858:7" pos:end="863:7">try <block pos:start="858:11" pos:end="860:7">{<block_content pos:start="859:9" pos:end="859:31">
        <expr_stmt pos:start="859:9" pos:end="859:31"><expr pos:start="859:9" pos:end="859:30"><call pos:start="859:9" pos:end="859:30"><name pos:start="859:9" pos:end="859:22"><name pos:start="859:9" pos:end="859:14">action</name><operator pos:start="859:15" pos:end="859:15">.</operator><name pos:start="859:16" pos:end="859:22">process</name></name><argument_list pos:start="859:23" pos:end="859:30">(<argument pos:start="859:24" pos:end="859:25"><expr pos:start="859:24" pos:end="859:25"><name pos:start="859:24" pos:end="859:25">in</name></expr></argument>, <argument pos:start="859:28" pos:end="859:29"><expr pos:start="859:28" pos:end="859:29"><name pos:start="859:28" pos:end="859:29">ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <finally pos:start="861:7" pos:end="863:7">finally <block pos:start="861:15" pos:end="863:7">{<block_content pos:start="862:9" pos:end="862:33">
        <expr_stmt pos:start="862:9" pos:end="862:33"><expr pos:start="862:9" pos:end="862:32"><call pos:start="862:9" pos:end="862:32"><name pos:start="862:9" pos:end="862:28"><name pos:start="862:9" pos:end="862:15">IOUtils</name><operator pos:start="862:16" pos:end="862:16">.</operator><name pos:start="862:17" pos:end="862:28">closeQuietly</name></name><argument_list pos:start="862:29" pos:end="862:32">(<argument pos:start="862:30" pos:end="862:31"><expr pos:start="862:30" pos:end="862:31"><name pos:start="862:30" pos:end="862:31">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
      <return pos:start="864:7" pos:end="864:18">return <expr pos:start="864:14" pos:end="864:17"><literal type="boolean" pos:start="864:14" pos:end="864:17">true</literal></expr>;</return>
    </block_content>}</block>
    <catch pos:start="866:5" pos:end="868:5">catch <parameter_list pos:start="866:11" pos:end="866:25">(<parameter pos:start="866:12" pos:end="866:24"><decl pos:start="866:12" pos:end="866:24"><type pos:start="866:12" pos:end="866:24"><name pos:start="866:12" pos:end="866:22">IOException</name></type> <name pos:start="866:24" pos:end="866:24">e</name></decl></parameter>)</parameter_list> <block pos:start="866:27" pos:end="868:5">{<block_content pos:start="867:7" pos:end="867:40">
      <throw pos:start="867:7" pos:end="867:40">throw <expr pos:start="867:13" pos:end="867:39"><call pos:start="867:13" pos:end="867:39"><name pos:start="867:13" pos:end="867:36"><name pos:start="867:13" pos:end="867:28">ZipExceptionUtil</name><operator pos:start="867:29" pos:end="867:29">.</operator><name pos:start="867:30" pos:end="867:36">rethrow</name></name><argument_list pos:start="867:37" pos:end="867:39">(<argument pos:start="867:38" pos:end="867:38"><expr pos:start="867:38" pos:end="867:38"><name pos:start="867:38" pos:end="867:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="869:5" pos:end="871:5">finally <block pos:start="869:13" pos:end="871:5">{<block_content pos:start="870:7" pos:end="870:23">
      <expr_stmt pos:start="870:7" pos:end="870:23"><expr pos:start="870:7" pos:end="870:22"><call pos:start="870:7" pos:end="870:22"><name pos:start="870:7" pos:end="870:18">closeQuietly</name><argument_list pos:start="870:19" pos:end="870:22">(<argument pos:start="870:20" pos:end="870:21"><expr pos:start="870:20" pos:end="870:21"><name pos:start="870:20" pos:end="870:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="874:3" pos:end="888:5">/**
   * Reads the given ZIP stream and executes the given action for a single
   * entry.
   *
   * @param is
   *          input ZIP stream (it will not be closed automatically).
   * @param name
   *          entry name.
   * @param action
   *          action to be called for this entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was found, &lt;code&gt;false&lt;/code&gt; if the
   *         entry was not found.
   *
   * @see ZipEntryCallback
   */</comment>
  <function pos:start="889:3" pos:end="893:3"><type pos:start="889:3" pos:end="889:23"><specifier pos:start="889:3" pos:end="889:8">public</specifier> <specifier pos:start="889:10" pos:end="889:15">static</specifier> <name pos:start="889:17" pos:end="889:23">boolean</name></type> <name pos:start="889:25" pos:end="889:30">handle</name><parameter_list pos:start="889:31" pos:end="889:84">(<parameter pos:start="889:32" pos:end="889:45"><decl pos:start="889:32" pos:end="889:45"><type pos:start="889:32" pos:end="889:45"><name pos:start="889:32" pos:end="889:42">InputStream</name></type> <name pos:start="889:44" pos:end="889:45">is</name></decl></parameter>, <parameter pos:start="889:48" pos:end="889:58"><decl pos:start="889:48" pos:end="889:58"><type pos:start="889:48" pos:end="889:58"><name pos:start="889:48" pos:end="889:53">String</name></type> <name pos:start="889:55" pos:end="889:58">name</name></decl></parameter>, <parameter pos:start="889:61" pos:end="889:83"><decl pos:start="889:61" pos:end="889:83"><type pos:start="889:61" pos:end="889:83"><name pos:start="889:61" pos:end="889:76">ZipEntryCallback</name></type> <name pos:start="889:78" pos:end="889:83">action</name></decl></parameter>)</parameter_list> <block pos:start="889:86" pos:end="893:3">{<block_content pos:start="890:5" pos:end="892:26">
    <decl_stmt pos:start="890:5" pos:end="890:77"><decl pos:start="890:5" pos:end="890:76"><type pos:start="890:5" pos:end="890:26"><name pos:start="890:5" pos:end="890:26">SingleZipEntryCallback</name></type> <name pos:start="890:28" pos:end="890:33">helper</name> <init pos:start="890:35" pos:end="890:76">= <expr pos:start="890:37" pos:end="890:76"><operator pos:start="890:37" pos:end="890:39">new</operator> <call pos:start="890:41" pos:end="890:76"><name pos:start="890:41" pos:end="890:62">SingleZipEntryCallback</name><argument_list pos:start="890:63" pos:end="890:76">(<argument pos:start="890:64" pos:end="890:67"><expr pos:start="890:64" pos:end="890:67"><name pos:start="890:64" pos:end="890:67">name</name></expr></argument>, <argument pos:start="890:70" pos:end="890:75"><expr pos:start="890:70" pos:end="890:75"><name pos:start="890:70" pos:end="890:75">action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="891:5" pos:end="891:24"><expr pos:start="891:5" pos:end="891:23"><call pos:start="891:5" pos:end="891:23"><name pos:start="891:5" pos:end="891:11">iterate</name><argument_list pos:start="891:12" pos:end="891:23">(<argument pos:start="891:13" pos:end="891:14"><expr pos:start="891:13" pos:end="891:14"><name pos:start="891:13" pos:end="891:14">is</name></expr></argument>, <argument pos:start="891:17" pos:end="891:22"><expr pos:start="891:17" pos:end="891:22"><name pos:start="891:17" pos:end="891:22">helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="892:5" pos:end="892:26">return <expr pos:start="892:12" pos:end="892:25"><call pos:start="892:12" pos:end="892:25"><name pos:start="892:12" pos:end="892:23"><name pos:start="892:12" pos:end="892:17">helper</name><operator pos:start="892:18" pos:end="892:18">.</operator><name pos:start="892:19" pos:end="892:23">found</name></name><argument_list pos:start="892:24" pos:end="892:25">()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="895:3" pos:end="899:5">/**
   * ZipEntryCallback which is only applied to single entry.
   *
   * @author Rein RaudjÃ¤rv
   */</comment>
  <class pos:start="900:3" pos:end="924:3"><specifier pos:start="900:3" pos:end="900:9">private</specifier> <specifier pos:start="900:11" pos:end="900:16">static</specifier> class <name pos:start="900:24" pos:end="900:45">SingleZipEntryCallback</name> <super_list pos:start="900:47" pos:end="900:73"><implements pos:start="900:47" pos:end="900:73">implements <super pos:start="900:58" pos:end="900:73"><name pos:start="900:58" pos:end="900:73">ZipEntryCallback</name></super></implements></super_list> <block pos:start="900:75" pos:end="924:3">{

    <decl_stmt pos:start="902:5" pos:end="902:30"><decl pos:start="902:5" pos:end="902:29"><type pos:start="902:5" pos:end="902:24"><specifier pos:start="902:5" pos:end="902:11">private</specifier> <specifier pos:start="902:13" pos:end="902:17">final</specifier> <name pos:start="902:19" pos:end="902:24">String</name></type> <name pos:start="902:26" pos:end="902:29">name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="904:5" pos:end="904:42"><decl pos:start="904:5" pos:end="904:41"><type pos:start="904:5" pos:end="904:34"><specifier pos:start="904:5" pos:end="904:11">private</specifier> <specifier pos:start="904:13" pos:end="904:17">final</specifier> <name pos:start="904:19" pos:end="904:34">ZipEntryCallback</name></type> <name pos:start="904:36" pos:end="904:41">action</name></decl>;</decl_stmt>

    <decl_stmt pos:start="906:5" pos:end="906:26"><decl pos:start="906:5" pos:end="906:25"><type pos:start="906:5" pos:end="906:19"><specifier pos:start="906:5" pos:end="906:11">private</specifier> <name pos:start="906:13" pos:end="906:19">boolean</name></type> <name pos:start="906:21" pos:end="906:25">found</name></decl>;</decl_stmt>

    <constructor pos:start="908:5" pos:end="911:5"><specifier pos:start="908:5" pos:end="908:10">public</specifier> <name pos:start="908:12" pos:end="908:33">SingleZipEntryCallback</name><parameter_list pos:start="908:34" pos:end="908:71">(<parameter pos:start="908:35" pos:end="908:45"><decl pos:start="908:35" pos:end="908:45"><type pos:start="908:35" pos:end="908:45"><name pos:start="908:35" pos:end="908:40">String</name></type> <name pos:start="908:42" pos:end="908:45">name</name></decl></parameter>, <parameter pos:start="908:48" pos:end="908:70"><decl pos:start="908:48" pos:end="908:70"><type pos:start="908:48" pos:end="908:70"><name pos:start="908:48" pos:end="908:63">ZipEntryCallback</name></type> <name pos:start="908:65" pos:end="908:70">action</name></decl></parameter>)</parameter_list> <block pos:start="908:73" pos:end="911:5">{<block_content pos:start="909:7" pos:end="910:27">
      <expr_stmt pos:start="909:7" pos:end="909:23"><expr pos:start="909:7" pos:end="909:22"><name pos:start="909:7" pos:end="909:15"><name pos:start="909:7" pos:end="909:10">this</name><operator pos:start="909:11" pos:end="909:11">.</operator><name pos:start="909:12" pos:end="909:15">name</name></name> <operator pos:start="909:17" pos:end="909:17">=</operator> <name pos:start="909:19" pos:end="909:22">name</name></expr>;</expr_stmt>
      <expr_stmt pos:start="910:7" pos:end="910:27"><expr pos:start="910:7" pos:end="910:26"><name pos:start="910:7" pos:end="910:17"><name pos:start="910:7" pos:end="910:10">this</name><operator pos:start="910:11" pos:end="910:11">.</operator><name pos:start="910:12" pos:end="910:17">action</name></name> <operator pos:start="910:19" pos:end="910:19">=</operator> <name pos:start="910:21" pos:end="910:26">action</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="913:5" pos:end="918:5"><type pos:start="913:5" pos:end="913:15"><specifier pos:start="913:5" pos:end="913:10">public</specifier> <name pos:start="913:12" pos:end="913:15">void</name></type> <name pos:start="913:17" pos:end="913:23">process</name><parameter_list pos:start="913:24" pos:end="913:58">(<parameter pos:start="913:25" pos:end="913:38"><decl pos:start="913:25" pos:end="913:38"><type pos:start="913:25" pos:end="913:38"><name pos:start="913:25" pos:end="913:35">InputStream</name></type> <name pos:start="913:37" pos:end="913:38">in</name></decl></parameter>, <parameter pos:start="913:41" pos:end="913:57"><decl pos:start="913:41" pos:end="913:57"><type pos:start="913:41" pos:end="913:57"><name pos:start="913:41" pos:end="913:48">ZipEntry</name></type> <name pos:start="913:50" pos:end="913:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="913:60" pos:end="913:77">throws <argument pos:start="913:67" pos:end="913:77"><expr pos:start="913:67" pos:end="913:77"><name pos:start="913:67" pos:end="913:77">IOException</name></expr></argument></throws> <block pos:start="913:79" pos:end="918:5">{<block_content pos:start="914:7" pos:end="917:7">
      <if_stmt pos:start="914:7" pos:end="917:7"><if pos:start="914:7" pos:end="917:7">if <condition pos:start="914:10" pos:end="914:42">(<expr pos:start="914:11" pos:end="914:41"><call pos:start="914:11" pos:end="914:41"><name pos:start="914:11" pos:end="914:21"><name pos:start="914:11" pos:end="914:14">name</name><operator pos:start="914:15" pos:end="914:15">.</operator><name pos:start="914:16" pos:end="914:21">equals</name></name><argument_list pos:start="914:22" pos:end="914:41">(<argument pos:start="914:23" pos:end="914:40"><expr pos:start="914:23" pos:end="914:40"><call pos:start="914:23" pos:end="914:40"><name pos:start="914:23" pos:end="914:38"><name pos:start="914:23" pos:end="914:30">zipEntry</name><operator pos:start="914:31" pos:end="914:31">.</operator><name pos:start="914:32" pos:end="914:38">getName</name></name><argument_list pos:start="914:39" pos:end="914:40">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="914:44" pos:end="917:7">{<block_content pos:start="915:9" pos:end="916:37">
        <expr_stmt pos:start="915:9" pos:end="915:21"><expr pos:start="915:9" pos:end="915:20"><name pos:start="915:9" pos:end="915:13">found</name> <operator pos:start="915:15" pos:end="915:15">=</operator> <literal type="boolean" pos:start="915:17" pos:end="915:20">true</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="916:9" pos:end="916:37"><expr pos:start="916:9" pos:end="916:36"><call pos:start="916:9" pos:end="916:36"><name pos:start="916:9" pos:end="916:22"><name pos:start="916:9" pos:end="916:14">action</name><operator pos:start="916:15" pos:end="916:15">.</operator><name pos:start="916:16" pos:end="916:22">process</name></name><argument_list pos:start="916:23" pos:end="916:36">(<argument pos:start="916:24" pos:end="916:25"><expr pos:start="916:24" pos:end="916:25"><name pos:start="916:24" pos:end="916:25">in</name></expr></argument>, <argument pos:start="916:28" pos:end="916:35"><expr pos:start="916:28" pos:end="916:35"><name pos:start="916:28" pos:end="916:35">zipEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function pos:start="920:5" pos:end="922:5"><type pos:start="920:5" pos:end="920:18"><specifier pos:start="920:5" pos:end="920:10">public</specifier> <name pos:start="920:12" pos:end="920:18">boolean</name></type> <name pos:start="920:20" pos:end="920:24">found</name><parameter_list pos:start="920:25" pos:end="920:26">()</parameter_list> <block pos:start="920:28" pos:end="922:5">{<block_content pos:start="921:7" pos:end="921:19">
      <return pos:start="921:7" pos:end="921:19">return <expr pos:start="921:14" pos:end="921:18"><name pos:start="921:14" pos:end="921:18">found</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <comment type="block" pos:start="926:3" pos:end="926:35">/* Extracting whole ZIP files. */</comment>

  <comment type="block" format="javadoc" pos:start="928:3" pos:end="937:5">/**
   * Unpacks a ZIP file to the given directory.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param zip
   *          input ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   */</comment>
  <function pos:start="938:3" pos:end="940:3"><type pos:start="938:3" pos:end="938:20"><specifier pos:start="938:3" pos:end="938:8">public</specifier> <specifier pos:start="938:10" pos:end="938:15">static</specifier> <name pos:start="938:17" pos:end="938:20">void</name></type> <name pos:start="938:22" pos:end="938:27">unpack</name><parameter_list pos:start="938:28" pos:end="938:59">(<parameter pos:start="938:29" pos:end="938:36"><decl pos:start="938:29" pos:end="938:36"><type pos:start="938:29" pos:end="938:36"><name pos:start="938:29" pos:end="938:32">File</name></type> <name pos:start="938:34" pos:end="938:36">zip</name></decl></parameter>, <parameter pos:start="938:39" pos:end="938:58"><decl pos:start="938:39" pos:end="938:58"><type pos:start="938:39" pos:end="938:58"><specifier pos:start="938:39" pos:end="938:43">final</specifier> <name pos:start="938:45" pos:end="938:48">File</name></type> <name pos:start="938:50" pos:end="938:58">outputDir</name></decl></parameter>)</parameter_list> <block pos:start="938:61" pos:end="940:3">{<block_content pos:start="939:5" pos:end="939:56">
    <expr_stmt pos:start="939:5" pos:end="939:56"><expr pos:start="939:5" pos:end="939:55"><call pos:start="939:5" pos:end="939:55"><name pos:start="939:5" pos:end="939:10">unpack</name><argument_list pos:start="939:11" pos:end="939:55">(<argument pos:start="939:12" pos:end="939:14"><expr pos:start="939:12" pos:end="939:14"><name pos:start="939:12" pos:end="939:14">zip</name></expr></argument>, <argument pos:start="939:17" pos:end="939:25"><expr pos:start="939:17" pos:end="939:25"><name pos:start="939:17" pos:end="939:25">outputDir</name></expr></argument>, <argument pos:start="939:28" pos:end="939:54"><expr pos:start="939:28" pos:end="939:54"><name pos:start="939:28" pos:end="939:54"><name pos:start="939:28" pos:end="939:45">IdentityNameMapper</name><operator pos:start="939:46" pos:end="939:46">.</operator><name pos:start="939:47" pos:end="939:54">INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="942:3" pos:end="956:5">/**
   * Unpacks a ZIP file to the given directory using a specific Charset
   * for the input file.
   *
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param zip
   *          input ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   *
   * @param charset
   *          charset used to unpack the zip file
   */</comment>
  <function pos:start="957:3" pos:end="959:3"><type pos:start="957:3" pos:end="957:20"><specifier pos:start="957:3" pos:end="957:8">public</specifier> <specifier pos:start="957:10" pos:end="957:15">static</specifier> <name pos:start="957:17" pos:end="957:20">void</name></type> <name pos:start="957:22" pos:end="957:27">unpack</name><parameter_list pos:start="957:28" pos:end="957:76">(<parameter pos:start="957:29" pos:end="957:36"><decl pos:start="957:29" pos:end="957:36"><type pos:start="957:29" pos:end="957:36"><name pos:start="957:29" pos:end="957:32">File</name></type> <name pos:start="957:34" pos:end="957:36">zip</name></decl></parameter>, <parameter pos:start="957:39" pos:end="957:58"><decl pos:start="957:39" pos:end="957:58"><type pos:start="957:39" pos:end="957:58"><specifier pos:start="957:39" pos:end="957:43">final</specifier> <name pos:start="957:45" pos:end="957:48">File</name></type> <name pos:start="957:50" pos:end="957:58">outputDir</name></decl></parameter>, <parameter pos:start="957:61" pos:end="957:75"><decl pos:start="957:61" pos:end="957:75"><type pos:start="957:61" pos:end="957:75"><name pos:start="957:61" pos:end="957:67">Charset</name></type> <name pos:start="957:69" pos:end="957:75">charset</name></decl></parameter>)</parameter_list> <block pos:start="957:78" pos:end="959:3">{<block_content pos:start="958:5" pos:end="958:65">
    <expr_stmt pos:start="958:5" pos:end="958:65"><expr pos:start="958:5" pos:end="958:64"><call pos:start="958:5" pos:end="958:64"><name pos:start="958:5" pos:end="958:10">unpack</name><argument_list pos:start="958:11" pos:end="958:64">(<argument pos:start="958:12" pos:end="958:14"><expr pos:start="958:12" pos:end="958:14"><name pos:start="958:12" pos:end="958:14">zip</name></expr></argument>, <argument pos:start="958:17" pos:end="958:25"><expr pos:start="958:17" pos:end="958:25"><name pos:start="958:17" pos:end="958:25">outputDir</name></expr></argument>, <argument pos:start="958:28" pos:end="958:54"><expr pos:start="958:28" pos:end="958:54"><name pos:start="958:28" pos:end="958:54"><name pos:start="958:28" pos:end="958:45">IdentityNameMapper</name><operator pos:start="958:46" pos:end="958:46">.</operator><name pos:start="958:47" pos:end="958:54">INSTANCE</name></name></expr></argument>, <argument pos:start="958:57" pos:end="958:63"><expr pos:start="958:57" pos:end="958:63"><name pos:start="958:57" pos:end="958:63">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="961:3" pos:end="974:5">/**
   * Unpacks a ZIP file to the given directory.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param zip
   *          input ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param mapper
   *          call-back for renaming the entries.
   * @param charset
   *          charset used to process the zip file
   */</comment>
  <function pos:start="975:3" pos:end="978:3"><type pos:start="975:3" pos:end="975:20"><specifier pos:start="975:3" pos:end="975:8">public</specifier> <specifier pos:start="975:10" pos:end="975:15">static</specifier> <name pos:start="975:17" pos:end="975:20">void</name></type> <name pos:start="975:22" pos:end="975:27">unpack</name><parameter_list pos:start="975:28" pos:end="975:89">(<parameter pos:start="975:29" pos:end="975:36"><decl pos:start="975:29" pos:end="975:36"><type pos:start="975:29" pos:end="975:36"><name pos:start="975:29" pos:end="975:32">File</name></type> <name pos:start="975:34" pos:end="975:36">zip</name></decl></parameter>, <parameter pos:start="975:39" pos:end="975:52"><decl pos:start="975:39" pos:end="975:52"><type pos:start="975:39" pos:end="975:52"><name pos:start="975:39" pos:end="975:42">File</name></type> <name pos:start="975:44" pos:end="975:52">outputDir</name></decl></parameter>, <parameter pos:start="975:55" pos:end="975:71"><decl pos:start="975:55" pos:end="975:71"><type pos:start="975:55" pos:end="975:71"><name pos:start="975:55" pos:end="975:64">NameMapper</name></type> <name pos:start="975:66" pos:end="975:71">mapper</name></decl></parameter>, <parameter pos:start="975:74" pos:end="975:88"><decl pos:start="975:74" pos:end="975:88"><type pos:start="975:74" pos:end="975:88"><name pos:start="975:74" pos:end="975:80">Charset</name></type> <name pos:start="975:82" pos:end="975:88">charset</name></decl></parameter>)</parameter_list> <block pos:start="975:91" pos:end="978:3">{<block_content pos:start="976:5" pos:end="977:59">
    <expr_stmt pos:start="976:5" pos:end="976:60"><expr pos:start="976:5" pos:end="976:59"><call pos:start="976:5" pos:end="976:59"><name pos:start="976:5" pos:end="976:13"><name pos:start="976:5" pos:end="976:7">log</name><operator pos:start="976:8" pos:end="976:8">.</operator><name pos:start="976:9" pos:end="976:13">debug</name></name><argument_list pos:start="976:14" pos:end="976:59">(<argument pos:start="976:15" pos:end="976:42"><expr pos:start="976:15" pos:end="976:42"><literal type="string" pos:start="976:15" pos:end="976:42">"Extracting '{}' into '{}'."</literal></expr></argument>, <argument pos:start="976:45" pos:end="976:47"><expr pos:start="976:45" pos:end="976:47"><name pos:start="976:45" pos:end="976:47">zip</name></expr></argument>, <argument pos:start="976:50" pos:end="976:58"><expr pos:start="976:50" pos:end="976:58"><name pos:start="976:50" pos:end="976:58">outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="977:5" pos:end="977:59"><expr pos:start="977:5" pos:end="977:58"><call pos:start="977:5" pos:end="977:58"><name pos:start="977:5" pos:end="977:11">iterate</name><argument_list pos:start="977:12" pos:end="977:58">(<argument pos:start="977:13" pos:end="977:15"><expr pos:start="977:13" pos:end="977:15"><name pos:start="977:13" pos:end="977:15">zip</name></expr></argument>, <argument pos:start="977:18" pos:end="977:48"><expr pos:start="977:18" pos:end="977:48"><operator pos:start="977:18" pos:end="977:20">new</operator> <call pos:start="977:22" pos:end="977:48"><name pos:start="977:22" pos:end="977:29">Unpacker</name><argument_list pos:start="977:30" pos:end="977:48">(<argument pos:start="977:31" pos:end="977:39"><expr pos:start="977:31" pos:end="977:39"><name pos:start="977:31" pos:end="977:39">outputDir</name></expr></argument>, <argument pos:start="977:42" pos:end="977:47"><expr pos:start="977:42" pos:end="977:47"><name pos:start="977:42" pos:end="977:47">mapper</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="977:51" pos:end="977:57"><expr pos:start="977:51" pos:end="977:57"><name pos:start="977:51" pos:end="977:57">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="980:3" pos:end="993:5">/**
   * Unpacks a ZIP file to the given directory using a specific Charset
   * for the input file.
   *
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param zip
   *          input ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="994:3" pos:end="997:3"><type pos:start="994:3" pos:end="994:20"><specifier pos:start="994:3" pos:end="994:8">public</specifier> <specifier pos:start="994:10" pos:end="994:15">static</specifier> <name pos:start="994:17" pos:end="994:20">void</name></type> <name pos:start="994:22" pos:end="994:27">unpack</name><parameter_list pos:start="994:28" pos:end="994:72">(<parameter pos:start="994:29" pos:end="994:36"><decl pos:start="994:29" pos:end="994:36"><type pos:start="994:29" pos:end="994:36"><name pos:start="994:29" pos:end="994:32">File</name></type> <name pos:start="994:34" pos:end="994:36">zip</name></decl></parameter>, <parameter pos:start="994:39" pos:end="994:52"><decl pos:start="994:39" pos:end="994:52"><type pos:start="994:39" pos:end="994:52"><name pos:start="994:39" pos:end="994:42">File</name></type> <name pos:start="994:44" pos:end="994:52">outputDir</name></decl></parameter>, <parameter pos:start="994:55" pos:end="994:71"><decl pos:start="994:55" pos:end="994:71"><type pos:start="994:55" pos:end="994:71"><name pos:start="994:55" pos:end="994:64">NameMapper</name></type> <name pos:start="994:66" pos:end="994:71">mapper</name></decl></parameter>)</parameter_list> <block pos:start="994:74" pos:end="997:3">{<block_content pos:start="995:5" pos:end="996:50">
    <expr_stmt pos:start="995:5" pos:end="995:60"><expr pos:start="995:5" pos:end="995:59"><call pos:start="995:5" pos:end="995:59"><name pos:start="995:5" pos:end="995:13"><name pos:start="995:5" pos:end="995:7">log</name><operator pos:start="995:8" pos:end="995:8">.</operator><name pos:start="995:9" pos:end="995:13">debug</name></name><argument_list pos:start="995:14" pos:end="995:59">(<argument pos:start="995:15" pos:end="995:42"><expr pos:start="995:15" pos:end="995:42"><literal type="string" pos:start="995:15" pos:end="995:42">"Extracting '{}' into '{}'."</literal></expr></argument>, <argument pos:start="995:45" pos:end="995:47"><expr pos:start="995:45" pos:end="995:47"><name pos:start="995:45" pos:end="995:47">zip</name></expr></argument>, <argument pos:start="995:50" pos:end="995:58"><expr pos:start="995:50" pos:end="995:58"><name pos:start="995:50" pos:end="995:58">outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="996:5" pos:end="996:50"><expr pos:start="996:5" pos:end="996:49"><call pos:start="996:5" pos:end="996:49"><name pos:start="996:5" pos:end="996:11">iterate</name><argument_list pos:start="996:12" pos:end="996:49">(<argument pos:start="996:13" pos:end="996:15"><expr pos:start="996:13" pos:end="996:15"><name pos:start="996:13" pos:end="996:15">zip</name></expr></argument>, <argument pos:start="996:18" pos:end="996:48"><expr pos:start="996:18" pos:end="996:48"><operator pos:start="996:18" pos:end="996:20">new</operator> <call pos:start="996:22" pos:end="996:48"><name pos:start="996:22" pos:end="996:29">Unpacker</name><argument_list pos:start="996:30" pos:end="996:48">(<argument pos:start="996:31" pos:end="996:39"><expr pos:start="996:31" pos:end="996:39"><name pos:start="996:31" pos:end="996:39">outputDir</name></expr></argument>, <argument pos:start="996:42" pos:end="996:47"><expr pos:start="996:42" pos:end="996:47"><name pos:start="996:42" pos:end="996:47">mapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="999:3" pos:end="1010:5">/**
   * Unwraps a ZIP file to the given directory shaving of root dir.
   * If there are multiple root dirs or entries in the root of zip,
   * ZipException is thrown.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param zip
   *          input ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   */</comment>
  <function pos:start="1011:3" pos:end="1013:3"><type pos:start="1011:3" pos:end="1011:20"><specifier pos:start="1011:3" pos:end="1011:8">public</specifier> <specifier pos:start="1011:10" pos:end="1011:15">static</specifier> <name pos:start="1011:17" pos:end="1011:20">void</name></type> <name pos:start="1011:22" pos:end="1011:27">unwrap</name><parameter_list pos:start="1011:28" pos:end="1011:59">(<parameter pos:start="1011:29" pos:end="1011:36"><decl pos:start="1011:29" pos:end="1011:36"><type pos:start="1011:29" pos:end="1011:36"><name pos:start="1011:29" pos:end="1011:32">File</name></type> <name pos:start="1011:34" pos:end="1011:36">zip</name></decl></parameter>, <parameter pos:start="1011:39" pos:end="1011:58"><decl pos:start="1011:39" pos:end="1011:58"><type pos:start="1011:39" pos:end="1011:58"><specifier pos:start="1011:39" pos:end="1011:43">final</specifier> <name pos:start="1011:45" pos:end="1011:48">File</name></type> <name pos:start="1011:50" pos:end="1011:58">outputDir</name></decl></parameter>)</parameter_list> <block pos:start="1011:61" pos:end="1013:3">{<block_content pos:start="1012:5" pos:end="1012:56">
    <expr_stmt pos:start="1012:5" pos:end="1012:56"><expr pos:start="1012:5" pos:end="1012:55"><call pos:start="1012:5" pos:end="1012:55"><name pos:start="1012:5" pos:end="1012:10">unwrap</name><argument_list pos:start="1012:11" pos:end="1012:55">(<argument pos:start="1012:12" pos:end="1012:14"><expr pos:start="1012:12" pos:end="1012:14"><name pos:start="1012:12" pos:end="1012:14">zip</name></expr></argument>, <argument pos:start="1012:17" pos:end="1012:25"><expr pos:start="1012:17" pos:end="1012:25"><name pos:start="1012:17" pos:end="1012:25">outputDir</name></expr></argument>, <argument pos:start="1012:28" pos:end="1012:54"><expr pos:start="1012:28" pos:end="1012:54"><name pos:start="1012:28" pos:end="1012:54"><name pos:start="1012:28" pos:end="1012:45">IdentityNameMapper</name><operator pos:start="1012:46" pos:end="1012:46">.</operator><name pos:start="1012:47" pos:end="1012:54">INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1015:3" pos:end="1028:5">/**
   * Unwraps a ZIP file to the given directory shaving of root dir.
   * If there are multiple root dirs or entries in the root of zip,
   * ZipException is thrown.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param zip
   *          input ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="1029:3" pos:end="1032:3"><type pos:start="1029:3" pos:end="1029:20"><specifier pos:start="1029:3" pos:end="1029:8">public</specifier> <specifier pos:start="1029:10" pos:end="1029:15">static</specifier> <name pos:start="1029:17" pos:end="1029:20">void</name></type> <name pos:start="1029:22" pos:end="1029:27">unwrap</name><parameter_list pos:start="1029:28" pos:end="1029:72">(<parameter pos:start="1029:29" pos:end="1029:36"><decl pos:start="1029:29" pos:end="1029:36"><type pos:start="1029:29" pos:end="1029:36"><name pos:start="1029:29" pos:end="1029:32">File</name></type> <name pos:start="1029:34" pos:end="1029:36">zip</name></decl></parameter>, <parameter pos:start="1029:39" pos:end="1029:52"><decl pos:start="1029:39" pos:end="1029:52"><type pos:start="1029:39" pos:end="1029:52"><name pos:start="1029:39" pos:end="1029:42">File</name></type> <name pos:start="1029:44" pos:end="1029:52">outputDir</name></decl></parameter>, <parameter pos:start="1029:55" pos:end="1029:71"><decl pos:start="1029:55" pos:end="1029:71"><type pos:start="1029:55" pos:end="1029:71"><name pos:start="1029:55" pos:end="1029:64">NameMapper</name></type> <name pos:start="1029:66" pos:end="1029:71">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1029:74" pos:end="1032:3">{<block_content pos:start="1030:5" pos:end="1031:50">
    <expr_stmt pos:start="1030:5" pos:end="1030:60"><expr pos:start="1030:5" pos:end="1030:59"><call pos:start="1030:5" pos:end="1030:59"><name pos:start="1030:5" pos:end="1030:13"><name pos:start="1030:5" pos:end="1030:7">log</name><operator pos:start="1030:8" pos:end="1030:8">.</operator><name pos:start="1030:9" pos:end="1030:13">debug</name></name><argument_list pos:start="1030:14" pos:end="1030:59">(<argument pos:start="1030:15" pos:end="1030:42"><expr pos:start="1030:15" pos:end="1030:42"><literal type="string" pos:start="1030:15" pos:end="1030:42">"Unwrapping '{}' into '{}'."</literal></expr></argument>, <argument pos:start="1030:45" pos:end="1030:47"><expr pos:start="1030:45" pos:end="1030:47"><name pos:start="1030:45" pos:end="1030:47">zip</name></expr></argument>, <argument pos:start="1030:50" pos:end="1030:58"><expr pos:start="1030:50" pos:end="1030:58"><name pos:start="1030:50" pos:end="1030:58">outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1031:5" pos:end="1031:50"><expr pos:start="1031:5" pos:end="1031:49"><call pos:start="1031:5" pos:end="1031:49"><name pos:start="1031:5" pos:end="1031:11">iterate</name><argument_list pos:start="1031:12" pos:end="1031:49">(<argument pos:start="1031:13" pos:end="1031:15"><expr pos:start="1031:13" pos:end="1031:15"><name pos:start="1031:13" pos:end="1031:15">zip</name></expr></argument>, <argument pos:start="1031:18" pos:end="1031:48"><expr pos:start="1031:18" pos:end="1031:48"><operator pos:start="1031:18" pos:end="1031:20">new</operator> <call pos:start="1031:22" pos:end="1031:48"><name pos:start="1031:22" pos:end="1031:29">Unwraper</name><argument_list pos:start="1031:30" pos:end="1031:48">(<argument pos:start="1031:31" pos:end="1031:39"><expr pos:start="1031:31" pos:end="1031:39"><name pos:start="1031:31" pos:end="1031:39">outputDir</name></expr></argument>, <argument pos:start="1031:42" pos:end="1031:47"><expr pos:start="1031:42" pos:end="1031:47"><name pos:start="1031:42" pos:end="1031:47">mapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1034:3" pos:end="1043:5">/**
   * Unpacks a ZIP stream to the given directory.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param is
   *          inputstream for ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   */</comment>
  <function pos:start="1044:3" pos:end="1046:3"><type pos:start="1044:3" pos:end="1044:20"><specifier pos:start="1044:3" pos:end="1044:8">public</specifier> <specifier pos:start="1044:10" pos:end="1044:15">static</specifier> <name pos:start="1044:17" pos:end="1044:20">void</name></type> <name pos:start="1044:22" pos:end="1044:27">unpack</name><parameter_list pos:start="1044:28" pos:end="1044:59">(<parameter pos:start="1044:29" pos:end="1044:42"><decl pos:start="1044:29" pos:end="1044:42"><type pos:start="1044:29" pos:end="1044:42"><name pos:start="1044:29" pos:end="1044:39">InputStream</name></type> <name pos:start="1044:41" pos:end="1044:42">is</name></decl></parameter>, <parameter pos:start="1044:45" pos:end="1044:58"><decl pos:start="1044:45" pos:end="1044:58"><type pos:start="1044:45" pos:end="1044:58"><name pos:start="1044:45" pos:end="1044:48">File</name></type> <name pos:start="1044:50" pos:end="1044:58">outputDir</name></decl></parameter>)</parameter_list> <block pos:start="1044:61" pos:end="1046:3">{<block_content pos:start="1045:5" pos:end="1045:61">
    <expr_stmt pos:start="1045:5" pos:end="1045:61"><expr pos:start="1045:5" pos:end="1045:60"><call pos:start="1045:5" pos:end="1045:60"><name pos:start="1045:5" pos:end="1045:10">unpack</name><argument_list pos:start="1045:11" pos:end="1045:60">(<argument pos:start="1045:12" pos:end="1045:13"><expr pos:start="1045:12" pos:end="1045:13"><name pos:start="1045:12" pos:end="1045:13">is</name></expr></argument>, <argument pos:start="1045:16" pos:end="1045:24"><expr pos:start="1045:16" pos:end="1045:24"><name pos:start="1045:16" pos:end="1045:24">outputDir</name></expr></argument>, <argument pos:start="1045:27" pos:end="1045:53"><expr pos:start="1045:27" pos:end="1045:53"><name pos:start="1045:27" pos:end="1045:53"><name pos:start="1045:27" pos:end="1045:44">IdentityNameMapper</name><operator pos:start="1045:45" pos:end="1045:45">.</operator><name pos:start="1045:46" pos:end="1045:53">INSTANCE</name></name></expr></argument>, <argument pos:start="1045:56" pos:end="1045:59"><expr pos:start="1045:56" pos:end="1045:59"><literal type="null" pos:start="1045:56" pos:end="1045:59">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1048:3" pos:end="1059:5">/**
   * Unpacks a ZIP stream to the given directory.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param is
   *          inputstream for ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param charset
   *          charset used to process the zip stream
   */</comment>
  <function pos:start="1060:3" pos:end="1062:3"><type pos:start="1060:3" pos:end="1060:20"><specifier pos:start="1060:3" pos:end="1060:8">public</specifier> <specifier pos:start="1060:10" pos:end="1060:15">static</specifier> <name pos:start="1060:17" pos:end="1060:20">void</name></type> <name pos:start="1060:22" pos:end="1060:27">unpack</name><parameter_list pos:start="1060:28" pos:end="1060:76">(<parameter pos:start="1060:29" pos:end="1060:42"><decl pos:start="1060:29" pos:end="1060:42"><type pos:start="1060:29" pos:end="1060:42"><name pos:start="1060:29" pos:end="1060:39">InputStream</name></type> <name pos:start="1060:41" pos:end="1060:42">is</name></decl></parameter>, <parameter pos:start="1060:45" pos:end="1060:58"><decl pos:start="1060:45" pos:end="1060:58"><type pos:start="1060:45" pos:end="1060:58"><name pos:start="1060:45" pos:end="1060:48">File</name></type> <name pos:start="1060:50" pos:end="1060:58">outputDir</name></decl></parameter>, <parameter pos:start="1060:61" pos:end="1060:75"><decl pos:start="1060:61" pos:end="1060:75"><type pos:start="1060:61" pos:end="1060:75"><name pos:start="1060:61" pos:end="1060:67">Charset</name></type> <name pos:start="1060:69" pos:end="1060:75">charset</name></decl></parameter>)</parameter_list> <block pos:start="1060:78" pos:end="1062:3">{<block_content pos:start="1061:5" pos:end="1061:64">
    <expr_stmt pos:start="1061:5" pos:end="1061:64"><expr pos:start="1061:5" pos:end="1061:63"><call pos:start="1061:5" pos:end="1061:63"><name pos:start="1061:5" pos:end="1061:10">unpack</name><argument_list pos:start="1061:11" pos:end="1061:63">(<argument pos:start="1061:12" pos:end="1061:13"><expr pos:start="1061:12" pos:end="1061:13"><name pos:start="1061:12" pos:end="1061:13">is</name></expr></argument>, <argument pos:start="1061:16" pos:end="1061:24"><expr pos:start="1061:16" pos:end="1061:24"><name pos:start="1061:16" pos:end="1061:24">outputDir</name></expr></argument>, <argument pos:start="1061:27" pos:end="1061:53"><expr pos:start="1061:27" pos:end="1061:53"><name pos:start="1061:27" pos:end="1061:53"><name pos:start="1061:27" pos:end="1061:44">IdentityNameMapper</name><operator pos:start="1061:45" pos:end="1061:45">.</operator><name pos:start="1061:46" pos:end="1061:53">INSTANCE</name></name></expr></argument>, <argument pos:start="1061:56" pos:end="1061:62"><expr pos:start="1061:56" pos:end="1061:62"><name pos:start="1061:56" pos:end="1061:62">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1064:3" pos:end="1075:5">/**
   * Unpacks a ZIP stream to the given directory.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param is
   *          inputstream for ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="1076:3" pos:end="1078:3"><type pos:start="1076:3" pos:end="1076:20"><specifier pos:start="1076:3" pos:end="1076:8">public</specifier> <specifier pos:start="1076:10" pos:end="1076:15">static</specifier> <name pos:start="1076:17" pos:end="1076:20">void</name></type> <name pos:start="1076:22" pos:end="1076:27">unpack</name><parameter_list pos:start="1076:28" pos:end="1076:78">(<parameter pos:start="1076:29" pos:end="1076:42"><decl pos:start="1076:29" pos:end="1076:42"><type pos:start="1076:29" pos:end="1076:42"><name pos:start="1076:29" pos:end="1076:39">InputStream</name></type> <name pos:start="1076:41" pos:end="1076:42">is</name></decl></parameter>, <parameter pos:start="1076:45" pos:end="1076:58"><decl pos:start="1076:45" pos:end="1076:58"><type pos:start="1076:45" pos:end="1076:58"><name pos:start="1076:45" pos:end="1076:48">File</name></type> <name pos:start="1076:50" pos:end="1076:58">outputDir</name></decl></parameter>, <parameter pos:start="1076:61" pos:end="1076:77"><decl pos:start="1076:61" pos:end="1076:77"><type pos:start="1076:61" pos:end="1076:77"><name pos:start="1076:61" pos:end="1076:70">NameMapper</name></type> <name pos:start="1076:72" pos:end="1076:77">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1076:80" pos:end="1078:3">{<block_content pos:start="1077:5" pos:end="1077:40">
    <expr_stmt pos:start="1077:5" pos:end="1077:40"><expr pos:start="1077:5" pos:end="1077:39"><call pos:start="1077:5" pos:end="1077:39"><name pos:start="1077:5" pos:end="1077:10">unpack</name><argument_list pos:start="1077:11" pos:end="1077:39">(<argument pos:start="1077:12" pos:end="1077:13"><expr pos:start="1077:12" pos:end="1077:13"><name pos:start="1077:12" pos:end="1077:13">is</name></expr></argument>, <argument pos:start="1077:16" pos:end="1077:24"><expr pos:start="1077:16" pos:end="1077:24"><name pos:start="1077:16" pos:end="1077:24">outputDir</name></expr></argument>, <argument pos:start="1077:27" pos:end="1077:32"><expr pos:start="1077:27" pos:end="1077:32"><name pos:start="1077:27" pos:end="1077:32">mapper</name></expr></argument>, <argument pos:start="1077:35" pos:end="1077:38"><expr pos:start="1077:35" pos:end="1077:38"><literal type="null" pos:start="1077:35" pos:end="1077:38">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1080:3" pos:end="1093:5">/**
   * Unpacks a ZIP stream to the given directory.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param is
   *          inputstream for ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param mapper
   *          call-back for renaming the entries.
   * @param charset
   *          charset to use when unpacking the stream
   */</comment>
  <function pos:start="1094:3" pos:end="1097:3"><type pos:start="1094:3" pos:end="1094:20"><specifier pos:start="1094:3" pos:end="1094:8">public</specifier> <specifier pos:start="1094:10" pos:end="1094:15">static</specifier> <name pos:start="1094:17" pos:end="1094:20">void</name></type> <name pos:start="1094:22" pos:end="1094:27">unpack</name><parameter_list pos:start="1094:28" pos:end="1094:95">(<parameter pos:start="1094:29" pos:end="1094:42"><decl pos:start="1094:29" pos:end="1094:42"><type pos:start="1094:29" pos:end="1094:42"><name pos:start="1094:29" pos:end="1094:39">InputStream</name></type> <name pos:start="1094:41" pos:end="1094:42">is</name></decl></parameter>, <parameter pos:start="1094:45" pos:end="1094:58"><decl pos:start="1094:45" pos:end="1094:58"><type pos:start="1094:45" pos:end="1094:58"><name pos:start="1094:45" pos:end="1094:48">File</name></type> <name pos:start="1094:50" pos:end="1094:58">outputDir</name></decl></parameter>, <parameter pos:start="1094:61" pos:end="1094:77"><decl pos:start="1094:61" pos:end="1094:77"><type pos:start="1094:61" pos:end="1094:77"><name pos:start="1094:61" pos:end="1094:70">NameMapper</name></type> <name pos:start="1094:72" pos:end="1094:77">mapper</name></decl></parameter>, <parameter pos:start="1094:80" pos:end="1094:94"><decl pos:start="1094:80" pos:end="1094:94"><type pos:start="1094:80" pos:end="1094:94"><name pos:start="1094:80" pos:end="1094:86">Charset</name></type> <name pos:start="1094:88" pos:end="1094:94">charset</name></decl></parameter>)</parameter_list> <block pos:start="1094:97" pos:end="1097:3">{<block_content pos:start="1095:5" pos:end="1096:58">
    <expr_stmt pos:start="1095:5" pos:end="1095:57"><expr pos:start="1095:5" pos:end="1095:56"><call pos:start="1095:5" pos:end="1095:56"><name pos:start="1095:5" pos:end="1095:13"><name pos:start="1095:5" pos:end="1095:7">log</name><operator pos:start="1095:8" pos:end="1095:8">.</operator><name pos:start="1095:9" pos:end="1095:13">debug</name></name><argument_list pos:start="1095:14" pos:end="1095:56">(<argument pos:start="1095:15" pos:end="1095:40"><expr pos:start="1095:15" pos:end="1095:40"><literal type="string" pos:start="1095:15" pos:end="1095:40">"Extracting {} into '{}'."</literal></expr></argument>, <argument pos:start="1095:43" pos:end="1095:44"><expr pos:start="1095:43" pos:end="1095:44"><name pos:start="1095:43" pos:end="1095:44">is</name></expr></argument>, <argument pos:start="1095:47" pos:end="1095:55"><expr pos:start="1095:47" pos:end="1095:55"><name pos:start="1095:47" pos:end="1095:55">outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1096:5" pos:end="1096:58"><expr pos:start="1096:5" pos:end="1096:57"><call pos:start="1096:5" pos:end="1096:57"><name pos:start="1096:5" pos:end="1096:11">iterate</name><argument_list pos:start="1096:12" pos:end="1096:57">(<argument pos:start="1096:13" pos:end="1096:14"><expr pos:start="1096:13" pos:end="1096:14"><name pos:start="1096:13" pos:end="1096:14">is</name></expr></argument>, <argument pos:start="1096:17" pos:end="1096:47"><expr pos:start="1096:17" pos:end="1096:47"><operator pos:start="1096:17" pos:end="1096:19">new</operator> <call pos:start="1096:21" pos:end="1096:47"><name pos:start="1096:21" pos:end="1096:28">Unpacker</name><argument_list pos:start="1096:29" pos:end="1096:47">(<argument pos:start="1096:30" pos:end="1096:38"><expr pos:start="1096:30" pos:end="1096:38"><name pos:start="1096:30" pos:end="1096:38">outputDir</name></expr></argument>, <argument pos:start="1096:41" pos:end="1096:46"><expr pos:start="1096:41" pos:end="1096:46"><name pos:start="1096:41" pos:end="1096:46">mapper</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1096:50" pos:end="1096:56"><expr pos:start="1096:50" pos:end="1096:56"><name pos:start="1096:50" pos:end="1096:56">charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1099:3" pos:end="1110:5">/**
   * Unwraps a ZIP file to the given directory shaving of root dir.
   * If there are multiple root dirs or entries in the root of zip,
   * ZipException is thrown.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param is
   *          inputstream for ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   */</comment>
  <function pos:start="1111:3" pos:end="1113:3"><type pos:start="1111:3" pos:end="1111:20"><specifier pos:start="1111:3" pos:end="1111:8">public</specifier> <specifier pos:start="1111:10" pos:end="1111:15">static</specifier> <name pos:start="1111:17" pos:end="1111:20">void</name></type> <name pos:start="1111:22" pos:end="1111:27">unwrap</name><parameter_list pos:start="1111:28" pos:end="1111:59">(<parameter pos:start="1111:29" pos:end="1111:42"><decl pos:start="1111:29" pos:end="1111:42"><type pos:start="1111:29" pos:end="1111:42"><name pos:start="1111:29" pos:end="1111:39">InputStream</name></type> <name pos:start="1111:41" pos:end="1111:42">is</name></decl></parameter>, <parameter pos:start="1111:45" pos:end="1111:58"><decl pos:start="1111:45" pos:end="1111:58"><type pos:start="1111:45" pos:end="1111:58"><name pos:start="1111:45" pos:end="1111:48">File</name></type> <name pos:start="1111:50" pos:end="1111:58">outputDir</name></decl></parameter>)</parameter_list> <block pos:start="1111:61" pos:end="1113:3">{<block_content pos:start="1112:5" pos:end="1112:55">
    <expr_stmt pos:start="1112:5" pos:end="1112:55"><expr pos:start="1112:5" pos:end="1112:54"><call pos:start="1112:5" pos:end="1112:54"><name pos:start="1112:5" pos:end="1112:10">unwrap</name><argument_list pos:start="1112:11" pos:end="1112:54">(<argument pos:start="1112:12" pos:end="1112:13"><expr pos:start="1112:12" pos:end="1112:13"><name pos:start="1112:12" pos:end="1112:13">is</name></expr></argument>, <argument pos:start="1112:16" pos:end="1112:24"><expr pos:start="1112:16" pos:end="1112:24"><name pos:start="1112:16" pos:end="1112:24">outputDir</name></expr></argument>, <argument pos:start="1112:27" pos:end="1112:53"><expr pos:start="1112:27" pos:end="1112:53"><name pos:start="1112:27" pos:end="1112:53"><name pos:start="1112:27" pos:end="1112:44">IdentityNameMapper</name><operator pos:start="1112:45" pos:end="1112:45">.</operator><name pos:start="1112:46" pos:end="1112:53">INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1115:3" pos:end="1128:5">/**
   * Unwraps a ZIP file to the given directory shaving of root dir.
   * If there are multiple root dirs or entries in the root of zip,
   * ZipException is thrown.
   * &lt;p&gt;
   * The output directory must not be a file.
   *
   * @param is
   *          inputstream for ZIP file.
   * @param outputDir
   *          output directory (created automatically if not found).
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="1129:3" pos:end="1132:3"><type pos:start="1129:3" pos:end="1129:20"><specifier pos:start="1129:3" pos:end="1129:8">public</specifier> <specifier pos:start="1129:10" pos:end="1129:15">static</specifier> <name pos:start="1129:17" pos:end="1129:20">void</name></type> <name pos:start="1129:22" pos:end="1129:27">unwrap</name><parameter_list pos:start="1129:28" pos:end="1129:78">(<parameter pos:start="1129:29" pos:end="1129:42"><decl pos:start="1129:29" pos:end="1129:42"><type pos:start="1129:29" pos:end="1129:42"><name pos:start="1129:29" pos:end="1129:39">InputStream</name></type> <name pos:start="1129:41" pos:end="1129:42">is</name></decl></parameter>, <parameter pos:start="1129:45" pos:end="1129:58"><decl pos:start="1129:45" pos:end="1129:58"><type pos:start="1129:45" pos:end="1129:58"><name pos:start="1129:45" pos:end="1129:48">File</name></type> <name pos:start="1129:50" pos:end="1129:58">outputDir</name></decl></parameter>, <parameter pos:start="1129:61" pos:end="1129:77"><decl pos:start="1129:61" pos:end="1129:77"><type pos:start="1129:61" pos:end="1129:77"><name pos:start="1129:61" pos:end="1129:70">NameMapper</name></type> <name pos:start="1129:72" pos:end="1129:77">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1129:80" pos:end="1132:3">{<block_content pos:start="1130:5" pos:end="1131:49">
    <expr_stmt pos:start="1130:5" pos:end="1130:57"><expr pos:start="1130:5" pos:end="1130:56"><call pos:start="1130:5" pos:end="1130:56"><name pos:start="1130:5" pos:end="1130:13"><name pos:start="1130:5" pos:end="1130:7">log</name><operator pos:start="1130:8" pos:end="1130:8">.</operator><name pos:start="1130:9" pos:end="1130:13">debug</name></name><argument_list pos:start="1130:14" pos:end="1130:56">(<argument pos:start="1130:15" pos:end="1130:40"><expr pos:start="1130:15" pos:end="1130:40"><literal type="string" pos:start="1130:15" pos:end="1130:40">"Unwrapping {} into '{}'."</literal></expr></argument>, <argument pos:start="1130:43" pos:end="1130:44"><expr pos:start="1130:43" pos:end="1130:44"><name pos:start="1130:43" pos:end="1130:44">is</name></expr></argument>, <argument pos:start="1130:47" pos:end="1130:55"><expr pos:start="1130:47" pos:end="1130:55"><name pos:start="1130:47" pos:end="1130:55">outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1131:5" pos:end="1131:49"><expr pos:start="1131:5" pos:end="1131:48"><call pos:start="1131:5" pos:end="1131:48"><name pos:start="1131:5" pos:end="1131:11">iterate</name><argument_list pos:start="1131:12" pos:end="1131:48">(<argument pos:start="1131:13" pos:end="1131:14"><expr pos:start="1131:13" pos:end="1131:14"><name pos:start="1131:13" pos:end="1131:14">is</name></expr></argument>, <argument pos:start="1131:17" pos:end="1131:47"><expr pos:start="1131:17" pos:end="1131:47"><operator pos:start="1131:17" pos:end="1131:19">new</operator> <call pos:start="1131:21" pos:end="1131:47"><name pos:start="1131:21" pos:end="1131:28">Unwraper</name><argument_list pos:start="1131:29" pos:end="1131:47">(<argument pos:start="1131:30" pos:end="1131:38"><expr pos:start="1131:30" pos:end="1131:38"><name pos:start="1131:30" pos:end="1131:38">outputDir</name></expr></argument>, <argument pos:start="1131:41" pos:end="1131:46"><expr pos:start="1131:41" pos:end="1131:46"><name pos:start="1131:41" pos:end="1131:46">mapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1134:3" pos:end="1138:5">/**
   * Unpacks each ZIP entry.
   *
   * @author Rein RaudjÃ¤rv
   */</comment>
  <class pos:start="1139:3" pos:end="1172:3"><specifier pos:start="1139:3" pos:end="1139:9">private</specifier> <specifier pos:start="1139:11" pos:end="1139:16">static</specifier> class <name pos:start="1139:24" pos:end="1139:31">Unpacker</name> <super_list pos:start="1139:33" pos:end="1139:59"><implements pos:start="1139:33" pos:end="1139:59">implements <super pos:start="1139:44" pos:end="1139:59"><name pos:start="1139:44" pos:end="1139:59">ZipEntryCallback</name></super></implements></super_list> <block pos:start="1139:61" pos:end="1172:3">{

    <decl_stmt pos:start="1141:5" pos:end="1141:33"><decl pos:start="1141:5" pos:end="1141:32"><type pos:start="1141:5" pos:end="1141:22"><specifier pos:start="1141:5" pos:end="1141:11">private</specifier> <specifier pos:start="1141:13" pos:end="1141:17">final</specifier> <name pos:start="1141:19" pos:end="1141:22">File</name></type> <name pos:start="1141:24" pos:end="1141:32">outputDir</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1142:5" pos:end="1142:36"><decl pos:start="1142:5" pos:end="1142:35"><type pos:start="1142:5" pos:end="1142:28"><specifier pos:start="1142:5" pos:end="1142:11">private</specifier> <specifier pos:start="1142:13" pos:end="1142:17">final</specifier> <name pos:start="1142:19" pos:end="1142:28">NameMapper</name></type> <name pos:start="1142:30" pos:end="1142:35">mapper</name></decl>;</decl_stmt>

    <constructor pos:start="1144:5" pos:end="1147:5"><specifier pos:start="1144:5" pos:end="1144:10">public</specifier> <name pos:start="1144:12" pos:end="1144:19">Unpacker</name><parameter_list pos:start="1144:20" pos:end="1144:54">(<parameter pos:start="1144:21" pos:end="1144:34"><decl pos:start="1144:21" pos:end="1144:34"><type pos:start="1144:21" pos:end="1144:34"><name pos:start="1144:21" pos:end="1144:24">File</name></type> <name pos:start="1144:26" pos:end="1144:34">outputDir</name></decl></parameter>, <parameter pos:start="1144:37" pos:end="1144:53"><decl pos:start="1144:37" pos:end="1144:53"><type pos:start="1144:37" pos:end="1144:53"><name pos:start="1144:37" pos:end="1144:46">NameMapper</name></type> <name pos:start="1144:48" pos:end="1144:53">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1144:56" pos:end="1147:5">{<block_content pos:start="1145:7" pos:end="1146:27">
      <expr_stmt pos:start="1145:7" pos:end="1145:33"><expr pos:start="1145:7" pos:end="1145:32"><name pos:start="1145:7" pos:end="1145:20"><name pos:start="1145:7" pos:end="1145:10">this</name><operator pos:start="1145:11" pos:end="1145:11">.</operator><name pos:start="1145:12" pos:end="1145:20">outputDir</name></name> <operator pos:start="1145:22" pos:end="1145:22">=</operator> <name pos:start="1145:24" pos:end="1145:32">outputDir</name></expr>;</expr_stmt>
      <expr_stmt pos:start="1146:7" pos:end="1146:27"><expr pos:start="1146:7" pos:end="1146:26"><name pos:start="1146:7" pos:end="1146:17"><name pos:start="1146:7" pos:end="1146:10">this</name><operator pos:start="1146:11" pos:end="1146:11">.</operator><name pos:start="1146:12" pos:end="1146:17">mapper</name></name> <operator pos:start="1146:19" pos:end="1146:19">=</operator> <name pos:start="1146:21" pos:end="1146:26">mapper</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="1149:5" pos:end="1171:5"><type pos:start="1149:5" pos:end="1149:15"><specifier pos:start="1149:5" pos:end="1149:10">public</specifier> <name pos:start="1149:12" pos:end="1149:15">void</name></type> <name pos:start="1149:17" pos:end="1149:23">process</name><parameter_list pos:start="1149:24" pos:end="1149:58">(<parameter pos:start="1149:25" pos:end="1149:38"><decl pos:start="1149:25" pos:end="1149:38"><type pos:start="1149:25" pos:end="1149:38"><name pos:start="1149:25" pos:end="1149:35">InputStream</name></type> <name pos:start="1149:37" pos:end="1149:38">in</name></decl></parameter>, <parameter pos:start="1149:41" pos:end="1149:57"><decl pos:start="1149:41" pos:end="1149:57"><type pos:start="1149:41" pos:end="1149:57"><name pos:start="1149:41" pos:end="1149:48">ZipEntry</name></type> <name pos:start="1149:50" pos:end="1149:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="1149:60" pos:end="1149:77">throws <argument pos:start="1149:67" pos:end="1149:77"><expr pos:start="1149:67" pos:end="1149:77"><name pos:start="1149:67" pos:end="1149:77">IOException</name></expr></argument></throws> <block pos:start="1149:79" pos:end="1171:5">{<block_content pos:start="1150:7" pos:end="1170:7">
      <decl_stmt pos:start="1150:7" pos:end="1150:51"><decl pos:start="1150:7" pos:end="1150:50"><type pos:start="1150:7" pos:end="1150:12"><name pos:start="1150:7" pos:end="1150:12">String</name></type> <name pos:start="1150:14" pos:end="1150:17">name</name> <init pos:start="1150:19" pos:end="1150:50">= <expr pos:start="1150:21" pos:end="1150:50"><call pos:start="1150:21" pos:end="1150:50"><name pos:start="1150:21" pos:end="1150:30"><name pos:start="1150:21" pos:end="1150:26">mapper</name><operator pos:start="1150:27" pos:end="1150:27">.</operator><name pos:start="1150:28" pos:end="1150:30">map</name></name><argument_list pos:start="1150:31" pos:end="1150:50">(<argument pos:start="1150:32" pos:end="1150:49"><expr pos:start="1150:32" pos:end="1150:49"><call pos:start="1150:32" pos:end="1150:49"><name pos:start="1150:32" pos:end="1150:47"><name pos:start="1150:32" pos:end="1150:39">zipEntry</name><operator pos:start="1150:40" pos:end="1150:40">.</operator><name pos:start="1150:41" pos:end="1150:47">getName</name></name><argument_list pos:start="1150:48" pos:end="1150:49">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="1151:7" pos:end="1170:7"><if pos:start="1151:7" pos:end="1170:7">if <condition pos:start="1151:10" pos:end="1151:23">(<expr pos:start="1151:11" pos:end="1151:22"><name pos:start="1151:11" pos:end="1151:14">name</name> <operator pos:start="1151:16" pos:end="1151:17">!=</operator> <literal type="null" pos:start="1151:19" pos:end="1151:22">null</literal></expr>)</condition> <block pos:start="1151:25" pos:end="1170:7">{<block_content pos:start="1152:9" pos:end="1169:9">
        <decl_stmt pos:start="1152:9" pos:end="1152:46"><decl pos:start="1152:9" pos:end="1152:45"><type pos:start="1152:9" pos:end="1152:12"><name pos:start="1152:9" pos:end="1152:12">File</name></type> <name pos:start="1152:14" pos:end="1152:17">file</name> <init pos:start="1152:19" pos:end="1152:45">= <expr pos:start="1152:21" pos:end="1152:45"><operator pos:start="1152:21" pos:end="1152:23">new</operator> <call pos:start="1152:25" pos:end="1152:45"><name pos:start="1152:25" pos:end="1152:28">File</name><argument_list pos:start="1152:29" pos:end="1152:45">(<argument pos:start="1152:30" pos:end="1152:38"><expr pos:start="1152:30" pos:end="1152:38"><name pos:start="1152:30" pos:end="1152:38">outputDir</name></expr></argument>, <argument pos:start="1152:41" pos:end="1152:44"><expr pos:start="1152:41" pos:end="1152:44"><name pos:start="1152:41" pos:end="1152:44">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="1153:9" pos:end="1164:9"><if pos:start="1153:9" pos:end="1155:9">if <condition pos:start="1153:12" pos:end="1153:35">(<expr pos:start="1153:13" pos:end="1153:34"><call pos:start="1153:13" pos:end="1153:34"><name pos:start="1153:13" pos:end="1153:32"><name pos:start="1153:13" pos:end="1153:20">zipEntry</name><operator pos:start="1153:21" pos:end="1153:21">.</operator><name pos:start="1153:22" pos:end="1153:32">isDirectory</name></name><argument_list pos:start="1153:33" pos:end="1153:34">()</argument_list></call></expr>)</condition> <block pos:start="1153:37" pos:end="1155:9">{<block_content pos:start="1154:11" pos:end="1154:37">
          <expr_stmt pos:start="1154:11" pos:end="1154:37"><expr pos:start="1154:11" pos:end="1154:36"><call pos:start="1154:11" pos:end="1154:36"><name pos:start="1154:11" pos:end="1154:30"><name pos:start="1154:11" pos:end="1154:19">FileUtils</name><operator pos:start="1154:20" pos:end="1154:20">.</operator><name pos:start="1154:21" pos:end="1154:30">forceMkdir</name></name><argument_list pos:start="1154:31" pos:end="1154:36">(<argument pos:start="1154:32" pos:end="1154:35"><expr pos:start="1154:32" pos:end="1154:35"><name pos:start="1154:32" pos:end="1154:35">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="1156:9" pos:end="1164:9">else <block pos:start="1156:14" pos:end="1164:9">{<block_content pos:start="1157:11" pos:end="1163:35">
          <expr_stmt pos:start="1157:11" pos:end="1157:53"><expr pos:start="1157:11" pos:end="1157:52"><call pos:start="1157:11" pos:end="1157:52"><name pos:start="1157:11" pos:end="1157:30"><name pos:start="1157:11" pos:end="1157:19">FileUtils</name><operator pos:start="1157:20" pos:end="1157:20">.</operator><name pos:start="1157:21" pos:end="1157:30">forceMkdir</name></name><argument_list pos:start="1157:31" pos:end="1157:52">(<argument pos:start="1157:32" pos:end="1157:51"><expr pos:start="1157:32" pos:end="1157:51"><call pos:start="1157:32" pos:end="1157:51"><name pos:start="1157:32" pos:end="1157:49"><name pos:start="1157:32" pos:end="1157:35">file</name><operator pos:start="1157:36" pos:end="1157:36">.</operator><name pos:start="1157:37" pos:end="1157:49">getParentFile</name></name><argument_list pos:start="1157:50" pos:end="1157:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="1159:11" pos:end="1161:11"><if pos:start="1159:11" pos:end="1161:11">if <condition pos:start="1159:14" pos:end="1159:52">(<expr pos:start="1159:15" pos:end="1159:51"><call pos:start="1159:15" pos:end="1159:34"><name pos:start="1159:15" pos:end="1159:32"><name pos:start="1159:15" pos:end="1159:17">log</name><operator pos:start="1159:18" pos:end="1159:18">.</operator><name pos:start="1159:19" pos:end="1159:32">isDebugEnabled</name></name><argument_list pos:start="1159:33" pos:end="1159:34">()</argument_list></call> <operator pos:start="1159:36" pos:end="1159:37">&amp;&amp;</operator> <call pos:start="1159:39" pos:end="1159:51"><name pos:start="1159:39" pos:end="1159:49"><name pos:start="1159:39" pos:end="1159:42">file</name><operator pos:start="1159:43" pos:end="1159:43">.</operator><name pos:start="1159:44" pos:end="1159:49">exists</name></name><argument_list pos:start="1159:50" pos:end="1159:51">()</argument_list></call></expr>)</condition> <block pos:start="1159:54" pos:end="1161:11">{<block_content pos:start="1160:13" pos:end="1160:68">
            <expr_stmt pos:start="1160:13" pos:end="1160:68"><expr pos:start="1160:13" pos:end="1160:67"><call pos:start="1160:13" pos:end="1160:67"><name pos:start="1160:13" pos:end="1160:21"><name pos:start="1160:13" pos:end="1160:15">log</name><operator pos:start="1160:16" pos:end="1160:16">.</operator><name pos:start="1160:17" pos:end="1160:21">debug</name></name><argument_list pos:start="1160:22" pos:end="1160:67">(<argument pos:start="1160:23" pos:end="1160:46"><expr pos:start="1160:23" pos:end="1160:46"><literal type="string" pos:start="1160:23" pos:end="1160:46">"Overwriting file '{}'."</literal></expr></argument>, <argument pos:start="1160:49" pos:end="1160:66"><expr pos:start="1160:49" pos:end="1160:66"><call pos:start="1160:49" pos:end="1160:66"><name pos:start="1160:49" pos:end="1160:64"><name pos:start="1160:49" pos:end="1160:56">zipEntry</name><operator pos:start="1160:57" pos:end="1160:57">.</operator><name pos:start="1160:58" pos:end="1160:64">getName</name></name><argument_list pos:start="1160:65" pos:end="1160:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt pos:start="1163:11" pos:end="1163:35"><expr pos:start="1163:11" pos:end="1163:34"><call pos:start="1163:11" pos:end="1163:34"><name pos:start="1163:11" pos:end="1163:24"><name pos:start="1163:11" pos:end="1163:19">FileUtils</name><operator pos:start="1163:20" pos:end="1163:20">.</operator><name pos:start="1163:21" pos:end="1163:24">copy</name></name><argument_list pos:start="1163:25" pos:end="1163:34">(<argument pos:start="1163:26" pos:end="1163:27"><expr pos:start="1163:26" pos:end="1163:27"><name pos:start="1163:26" pos:end="1163:27">in</name></expr></argument>, <argument pos:start="1163:30" pos:end="1163:33"><expr pos:start="1163:30" pos:end="1163:33"><name pos:start="1163:30" pos:end="1163:33">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt pos:start="1166:9" pos:end="1166:84"><decl pos:start="1166:9" pos:end="1166:83"><type pos:start="1166:9" pos:end="1166:25"><name pos:start="1166:9" pos:end="1166:25">ZTFilePermissions</name></type> <name pos:start="1166:27" pos:end="1166:37">permissions</name> <init pos:start="1166:39" pos:end="1166:83">= <expr pos:start="1166:41" pos:end="1166:83"><call pos:start="1166:41" pos:end="1166:83"><name pos:start="1166:41" pos:end="1166:73"><name pos:start="1166:41" pos:end="1166:52">ZipEntryUtil</name><operator pos:start="1166:53" pos:end="1166:53">.</operator><name pos:start="1166:54" pos:end="1166:73">getZTFilePermissions</name></name><argument_list pos:start="1166:74" pos:end="1166:83">(<argument pos:start="1166:75" pos:end="1166:82"><expr pos:start="1166:75" pos:end="1166:82"><name pos:start="1166:75" pos:end="1166:82">zipEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="1167:9" pos:end="1169:9"><if pos:start="1167:9" pos:end="1169:9">if <condition pos:start="1167:12" pos:end="1167:32">(<expr pos:start="1167:13" pos:end="1167:31"><name pos:start="1167:13" pos:end="1167:23">permissions</name> <operator pos:start="1167:25" pos:end="1167:26">!=</operator> <literal type="null" pos:start="1167:28" pos:end="1167:31">null</literal></expr>)</condition> <block pos:start="1167:34" pos:end="1169:9">{<block_content pos:start="1168:11" pos:end="1168:86">
          <expr_stmt pos:start="1168:11" pos:end="1168:86"><expr pos:start="1168:11" pos:end="1168:85"><call pos:start="1168:11" pos:end="1168:51"><name pos:start="1168:11" pos:end="1168:49"><name pos:start="1168:11" pos:end="1168:31">ZTFilePermissionsUtil</name><operator pos:start="1168:32" pos:end="1168:32">.</operator><name pos:start="1168:33" pos:end="1168:49">getDefaultStategy</name></name><argument_list pos:start="1168:50" pos:end="1168:51">()</argument_list></call><operator pos:start="1168:52" pos:end="1168:52">.</operator><call pos:start="1168:53" pos:end="1168:85"><name pos:start="1168:53" pos:end="1168:66">setPermissions</name><argument_list pos:start="1168:67" pos:end="1168:85">(<argument pos:start="1168:68" pos:end="1168:71"><expr pos:start="1168:68" pos:end="1168:71"><name pos:start="1168:68" pos:end="1168:71">file</name></expr></argument>, <argument pos:start="1168:74" pos:end="1168:84"><expr pos:start="1168:74" pos:end="1168:84"><name pos:start="1168:74" pos:end="1168:84">permissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc" pos:start="1174:3" pos:end="1180:5">/**
   * Unpacks each ZIP entries. Presumes they are packed with the backslash separator.
   * Some archives can have this problem if they are created with some software
   * that is not following the ZIP specification.
   *
   * @since zt-zip 1.9
   */</comment>
  <class pos:start="1181:3" pos:end="1230:3"><specifier pos:start="1181:3" pos:end="1181:8">public</specifier> <specifier pos:start="1181:10" pos:end="1181:15">static</specifier> class <name pos:start="1181:23" pos:end="1181:39">BackslashUnpacker</name> <super_list pos:start="1181:41" pos:end="1181:67"><implements pos:start="1181:41" pos:end="1181:67">implements <super pos:start="1181:52" pos:end="1181:67"><name pos:start="1181:52" pos:end="1181:67">ZipEntryCallback</name></super></implements></super_list> <block pos:start="1181:69" pos:end="1230:3">{

    <decl_stmt pos:start="1183:5" pos:end="1183:33"><decl pos:start="1183:5" pos:end="1183:32"><type pos:start="1183:5" pos:end="1183:22"><specifier pos:start="1183:5" pos:end="1183:11">private</specifier> <specifier pos:start="1183:13" pos:end="1183:17">final</specifier> <name pos:start="1183:19" pos:end="1183:22">File</name></type> <name pos:start="1183:24" pos:end="1183:32">outputDir</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1184:5" pos:end="1184:36"><decl pos:start="1184:5" pos:end="1184:35"><type pos:start="1184:5" pos:end="1184:28"><specifier pos:start="1184:5" pos:end="1184:11">private</specifier> <specifier pos:start="1184:13" pos:end="1184:17">final</specifier> <name pos:start="1184:19" pos:end="1184:28">NameMapper</name></type> <name pos:start="1184:30" pos:end="1184:35">mapper</name></decl>;</decl_stmt>

    <constructor pos:start="1186:5" pos:end="1189:5"><specifier pos:start="1186:5" pos:end="1186:10">public</specifier> <name pos:start="1186:12" pos:end="1186:28">BackslashUnpacker</name><parameter_list pos:start="1186:29" pos:end="1186:63">(<parameter pos:start="1186:30" pos:end="1186:43"><decl pos:start="1186:30" pos:end="1186:43"><type pos:start="1186:30" pos:end="1186:43"><name pos:start="1186:30" pos:end="1186:33">File</name></type> <name pos:start="1186:35" pos:end="1186:43">outputDir</name></decl></parameter>, <parameter pos:start="1186:46" pos:end="1186:62"><decl pos:start="1186:46" pos:end="1186:62"><type pos:start="1186:46" pos:end="1186:62"><name pos:start="1186:46" pos:end="1186:55">NameMapper</name></type> <name pos:start="1186:57" pos:end="1186:62">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1186:65" pos:end="1189:5">{<block_content pos:start="1187:7" pos:end="1188:27">
      <expr_stmt pos:start="1187:7" pos:end="1187:33"><expr pos:start="1187:7" pos:end="1187:32"><name pos:start="1187:7" pos:end="1187:20"><name pos:start="1187:7" pos:end="1187:10">this</name><operator pos:start="1187:11" pos:end="1187:11">.</operator><name pos:start="1187:12" pos:end="1187:20">outputDir</name></name> <operator pos:start="1187:22" pos:end="1187:22">=</operator> <name pos:start="1187:24" pos:end="1187:32">outputDir</name></expr>;</expr_stmt>
      <expr_stmt pos:start="1188:7" pos:end="1188:27"><expr pos:start="1188:7" pos:end="1188:26"><name pos:start="1188:7" pos:end="1188:17"><name pos:start="1188:7" pos:end="1188:10">this</name><operator pos:start="1188:11" pos:end="1188:11">.</operator><name pos:start="1188:12" pos:end="1188:17">mapper</name></name> <operator pos:start="1188:19" pos:end="1188:19">=</operator> <name pos:start="1188:21" pos:end="1188:26">mapper</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor pos:start="1191:5" pos:end="1193:5"><specifier pos:start="1191:5" pos:end="1191:10">public</specifier> <name pos:start="1191:12" pos:end="1191:28">BackslashUnpacker</name><parameter_list pos:start="1191:29" pos:end="1191:44">(<parameter pos:start="1191:30" pos:end="1191:43"><decl pos:start="1191:30" pos:end="1191:43"><type pos:start="1191:30" pos:end="1191:33"><name pos:start="1191:30" pos:end="1191:33">File</name></type> <name pos:start="1191:35" pos:end="1191:43">outputDir</name></decl></parameter>)</parameter_list> <block pos:start="1191:46" pos:end="1193:5">{<block_content pos:start="1192:7" pos:end="1192:51">
      <expr_stmt pos:start="1192:7" pos:end="1192:51"><expr pos:start="1192:7" pos:end="1192:50"><call pos:start="1192:7" pos:end="1192:50"><name pos:start="1192:7" pos:end="1192:10">this</name><argument_list pos:start="1192:11" pos:end="1192:50">(<argument pos:start="1192:12" pos:end="1192:20"><expr pos:start="1192:12" pos:end="1192:20"><name pos:start="1192:12" pos:end="1192:20">outputDir</name></expr></argument>, <argument pos:start="1192:23" pos:end="1192:49"><expr pos:start="1192:23" pos:end="1192:49"><name pos:start="1192:23" pos:end="1192:49"><name pos:start="1192:23" pos:end="1192:40">IdentityNameMapper</name><operator pos:start="1192:41" pos:end="1192:41">.</operator><name pos:start="1192:42" pos:end="1192:49">INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="1195:5" pos:end="1229:5"><type pos:start="1195:5" pos:end="1195:15"><specifier pos:start="1195:5" pos:end="1195:10">public</specifier> <name pos:start="1195:12" pos:end="1195:15">void</name></type> <name pos:start="1195:17" pos:end="1195:23">process</name><parameter_list pos:start="1195:24" pos:end="1195:58">(<parameter pos:start="1195:25" pos:end="1195:38"><decl pos:start="1195:25" pos:end="1195:38"><type pos:start="1195:25" pos:end="1195:38"><name pos:start="1195:25" pos:end="1195:35">InputStream</name></type> <name pos:start="1195:37" pos:end="1195:38">in</name></decl></parameter>, <parameter pos:start="1195:41" pos:end="1195:57"><decl pos:start="1195:41" pos:end="1195:57"><type pos:start="1195:41" pos:end="1195:57"><name pos:start="1195:41" pos:end="1195:48">ZipEntry</name></type> <name pos:start="1195:50" pos:end="1195:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="1195:60" pos:end="1195:77">throws <argument pos:start="1195:67" pos:end="1195:77"><expr pos:start="1195:67" pos:end="1195:77"><name pos:start="1195:67" pos:end="1195:77">IOException</name></expr></argument></throws> <block pos:start="1195:79" pos:end="1229:5">{<block_content pos:start="1196:7" pos:end="1228:7">
      <decl_stmt pos:start="1196:7" pos:end="1196:51"><decl pos:start="1196:7" pos:end="1196:50"><type pos:start="1196:7" pos:end="1196:12"><name pos:start="1196:7" pos:end="1196:12">String</name></type> <name pos:start="1196:14" pos:end="1196:17">name</name> <init pos:start="1196:19" pos:end="1196:50">= <expr pos:start="1196:21" pos:end="1196:50"><call pos:start="1196:21" pos:end="1196:50"><name pos:start="1196:21" pos:end="1196:30"><name pos:start="1196:21" pos:end="1196:26">mapper</name><operator pos:start="1196:27" pos:end="1196:27">.</operator><name pos:start="1196:28" pos:end="1196:30">map</name></name><argument_list pos:start="1196:31" pos:end="1196:50">(<argument pos:start="1196:32" pos:end="1196:49"><expr pos:start="1196:32" pos:end="1196:49"><call pos:start="1196:32" pos:end="1196:49"><name pos:start="1196:32" pos:end="1196:47"><name pos:start="1196:32" pos:end="1196:39">zipEntry</name><operator pos:start="1196:40" pos:end="1196:40">.</operator><name pos:start="1196:41" pos:end="1196:47">getName</name></name><argument_list pos:start="1196:48" pos:end="1196:49">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="1197:7" pos:end="1228:7"><if pos:start="1197:7" pos:end="1228:7">if <condition pos:start="1197:10" pos:end="1197:23">(<expr pos:start="1197:11" pos:end="1197:22"><name pos:start="1197:11" pos:end="1197:14">name</name> <operator pos:start="1197:16" pos:end="1197:17">!=</operator> <literal type="null" pos:start="1197:19" pos:end="1197:22">null</literal></expr>)</condition> <block pos:start="1197:25" pos:end="1228:7">{<block_content pos:start="1208:9" pos:end="1227:9">
        <comment type="block" format="javadoc" pos:start="1198:9" pos:end="1207:11">/**
         * We assume that EVERY backslash will denote a directory
         * separator. Also such broken archives don't have entries that
         * are just directories. Everything is a file. See the example
         *
         * Archive: backSlashTest.zip
         * testing: testDirectory\testfileInTestDirectory.txt OK
         * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
         * No errors detected in compressed data of backSlashTest.zip.
         */</comment>
        <if_stmt pos:start="1208:9" pos:end="1227:9"><if pos:start="1208:9" pos:end="1222:9">if <condition pos:start="1208:12" pos:end="1208:37">(<expr pos:start="1208:13" pos:end="1208:36"><call pos:start="1208:13" pos:end="1208:30"><name pos:start="1208:13" pos:end="1208:24"><name pos:start="1208:13" pos:end="1208:16">name</name><operator pos:start="1208:17" pos:end="1208:17">.</operator><name pos:start="1208:18" pos:end="1208:24">indexOf</name></name><argument_list pos:start="1208:25" pos:end="1208:30">(<argument pos:start="1208:26" pos:end="1208:29"><expr pos:start="1208:26" pos:end="1208:29"><literal type="char" pos:start="1208:26" pos:end="1208:29">'\\'</literal></expr></argument>)</argument_list></call> <operator pos:start="1208:32" pos:end="1208:33">!=</operator> <operator pos:start="1208:35" pos:end="1208:35">-</operator><literal type="number" pos:start="1208:36" pos:end="1208:36">1</literal></expr>)</condition> <block pos:start="1208:39" pos:end="1222:9">{<block_content pos:start="1209:11" pos:end="1221:39">
          <decl_stmt pos:start="1209:11" pos:end="1209:43"><decl pos:start="1209:11" pos:end="1209:42"><type pos:start="1209:11" pos:end="1209:14"><name pos:start="1209:11" pos:end="1209:14">File</name></type> <name pos:start="1209:16" pos:end="1209:30">parentDirectory</name> <init pos:start="1209:32" pos:end="1209:42">= <expr pos:start="1209:34" pos:end="1209:42"><name pos:start="1209:34" pos:end="1209:42">outputDir</name></expr></init></decl>;</decl_stmt>
          <decl_stmt pos:start="1210:11" pos:end="1210:45"><decl pos:start="1210:11" pos:end="1210:44"><type pos:start="1210:11" pos:end="1210:18"><name pos:start="1210:11" pos:end="1210:18"><name pos:start="1210:11" pos:end="1210:16">String</name><index pos:start="1210:17" pos:end="1210:18">[]</index></name></type> <name pos:start="1210:20" pos:end="1210:23">dirs</name> <init pos:start="1210:25" pos:end="1210:44">= <expr pos:start="1210:27" pos:end="1210:44"><call pos:start="1210:27" pos:end="1210:44"><name pos:start="1210:27" pos:end="1210:36"><name pos:start="1210:27" pos:end="1210:30">name</name><operator pos:start="1210:31" pos:end="1210:31">.</operator><name pos:start="1210:32" pos:end="1210:36">split</name></name><argument_list pos:start="1210:37" pos:end="1210:44">(<argument pos:start="1210:38" pos:end="1210:43"><expr pos:start="1210:38" pos:end="1210:43"><literal type="string" pos:start="1210:38" pos:end="1210:43">"\\\\"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <comment type="line" pos:start="1212:11" pos:end="1212:100">// lets create all the directories and the last entry is the file as EVERY entry is a file</comment>
          <for pos:start="1213:11" pos:end="1219:11">for <control pos:start="1213:15" pos:end="1213:51">(<init pos:start="1213:16" pos:end="1213:25"><decl pos:start="1213:16" pos:end="1213:24"><type pos:start="1213:16" pos:end="1213:18"><name pos:start="1213:16" pos:end="1213:18">int</name></type> <name pos:start="1213:20" pos:end="1213:20">i</name> <init pos:start="1213:22" pos:end="1213:24">= <expr pos:start="1213:24" pos:end="1213:24"><literal type="number" pos:start="1213:24" pos:end="1213:24">0</literal></expr></init></decl>;</init> <condition pos:start="1213:27" pos:end="1213:46"><expr pos:start="1213:27" pos:end="1213:45"><name pos:start="1213:27" pos:end="1213:27">i</name> <operator pos:start="1213:29" pos:end="1213:29">&lt;</operator> <name pos:start="1213:31" pos:end="1213:41"><name pos:start="1213:31" pos:end="1213:34">dirs</name><operator pos:start="1213:35" pos:end="1213:35">.</operator><name pos:start="1213:36" pos:end="1213:41">length</name></name> <operator pos:start="1213:43" pos:end="1213:43">-</operator> <literal type="number" pos:start="1213:45" pos:end="1213:45">1</literal></expr>;</condition> <incr pos:start="1213:48" pos:end="1213:50"><expr pos:start="1213:48" pos:end="1213:50"><name pos:start="1213:48" pos:end="1213:48">i</name><operator pos:start="1213:49" pos:end="1213:50">++</operator></expr></incr>)</control> <block pos:start="1213:53" pos:end="1219:11">{<block_content pos:start="1214:13" pos:end="1218:35">
            <decl_stmt pos:start="1214:13" pos:end="1214:59"><decl pos:start="1214:13" pos:end="1214:58"><type pos:start="1214:13" pos:end="1214:16"><name pos:start="1214:13" pos:end="1214:16">File</name></type> <name pos:start="1214:18" pos:end="1214:21">file</name> <init pos:start="1214:23" pos:end="1214:58">= <expr pos:start="1214:25" pos:end="1214:58"><operator pos:start="1214:25" pos:end="1214:27">new</operator> <call pos:start="1214:29" pos:end="1214:58"><name pos:start="1214:29" pos:end="1214:32">File</name><argument_list pos:start="1214:33" pos:end="1214:58">(<argument pos:start="1214:34" pos:end="1214:48"><expr pos:start="1214:34" pos:end="1214:48"><name pos:start="1214:34" pos:end="1214:48">parentDirectory</name></expr></argument>, <argument pos:start="1214:51" pos:end="1214:57"><expr pos:start="1214:51" pos:end="1214:57"><name pos:start="1214:51" pos:end="1214:57"><name pos:start="1214:51" pos:end="1214:54">dirs</name><index pos:start="1214:55" pos:end="1214:57">[<expr pos:start="1214:56" pos:end="1214:56"><name pos:start="1214:56" pos:end="1214:56">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="1215:13" pos:end="1217:13"><if pos:start="1215:13" pos:end="1217:13">if <condition pos:start="1215:16" pos:end="1215:31">(<expr pos:start="1215:17" pos:end="1215:30"><operator pos:start="1215:17" pos:end="1215:17">!</operator><call pos:start="1215:18" pos:end="1215:30"><name pos:start="1215:18" pos:end="1215:28"><name pos:start="1215:18" pos:end="1215:21">file</name><operator pos:start="1215:22" pos:end="1215:22">.</operator><name pos:start="1215:23" pos:end="1215:28">exists</name></name><argument_list pos:start="1215:29" pos:end="1215:30">()</argument_list></call></expr>)</condition> <block pos:start="1215:33" pos:end="1217:13">{<block_content pos:start="1216:15" pos:end="1216:41">
              <expr_stmt pos:start="1216:15" pos:end="1216:41"><expr pos:start="1216:15" pos:end="1216:40"><call pos:start="1216:15" pos:end="1216:40"><name pos:start="1216:15" pos:end="1216:34"><name pos:start="1216:15" pos:end="1216:23">FileUtils</name><operator pos:start="1216:24" pos:end="1216:24">.</operator><name pos:start="1216:25" pos:end="1216:34">forceMkdir</name></name><argument_list pos:start="1216:35" pos:end="1216:40">(<argument pos:start="1216:36" pos:end="1216:39"><expr pos:start="1216:36" pos:end="1216:39"><name pos:start="1216:36" pos:end="1216:39">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1218:13" pos:end="1218:35"><expr pos:start="1218:13" pos:end="1218:34"><name pos:start="1218:13" pos:end="1218:27">parentDirectory</name> <operator pos:start="1218:29" pos:end="1218:29">=</operator> <name pos:start="1218:31" pos:end="1218:34">file</name></expr>;</expr_stmt>
          </block_content>}</block></for>
          <decl_stmt pos:start="1220:11" pos:end="1220:75"><decl pos:start="1220:11" pos:end="1220:74"><type pos:start="1220:11" pos:end="1220:14"><name pos:start="1220:11" pos:end="1220:14">File</name></type> <name pos:start="1220:16" pos:end="1220:23">destFile</name> <init pos:start="1220:25" pos:end="1220:74">= <expr pos:start="1220:27" pos:end="1220:74"><operator pos:start="1220:27" pos:end="1220:29">new</operator> <call pos:start="1220:31" pos:end="1220:74"><name pos:start="1220:31" pos:end="1220:34">File</name><argument_list pos:start="1220:35" pos:end="1220:74">(<argument pos:start="1220:36" pos:end="1220:50"><expr pos:start="1220:36" pos:end="1220:50"><name pos:start="1220:36" pos:end="1220:50">parentDirectory</name></expr></argument>, <argument pos:start="1220:53" pos:end="1220:73"><expr pos:start="1220:53" pos:end="1220:73"><name pos:start="1220:53" pos:end="1220:73"><name pos:start="1220:53" pos:end="1220:56">dirs</name><index pos:start="1220:57" pos:end="1220:73">[<expr pos:start="1220:58" pos:end="1220:72"><name pos:start="1220:58" pos:end="1220:68"><name pos:start="1220:58" pos:end="1220:61">dirs</name><operator pos:start="1220:62" pos:end="1220:62">.</operator><name pos:start="1220:63" pos:end="1220:68">length</name></name> <operator pos:start="1220:70" pos:end="1220:70">-</operator> <literal type="number" pos:start="1220:72" pos:end="1220:72">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt pos:start="1221:11" pos:end="1221:39"><expr pos:start="1221:11" pos:end="1221:38"><call pos:start="1221:11" pos:end="1221:38"><name pos:start="1221:11" pos:end="1221:24"><name pos:start="1221:11" pos:end="1221:19">FileUtils</name><operator pos:start="1221:20" pos:end="1221:20">.</operator><name pos:start="1221:21" pos:end="1221:24">copy</name></name><argument_list pos:start="1221:25" pos:end="1221:38">(<argument pos:start="1221:26" pos:end="1221:27"><expr pos:start="1221:26" pos:end="1221:27"><name pos:start="1221:26" pos:end="1221:27">in</name></expr></argument>, <argument pos:start="1221:30" pos:end="1221:37"><expr pos:start="1221:30" pos:end="1221:37"><name pos:start="1221:30" pos:end="1221:37">destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line" pos:start="1223:9" pos:end="1223:88">// it could be that there are just top level files that the unpacker is used for</comment>
        <else pos:start="1224:9" pos:end="1227:9">else <block pos:start="1224:14" pos:end="1227:9">{<block_content pos:start="1225:11" pos:end="1226:39">
          <decl_stmt pos:start="1225:11" pos:end="1225:52"><decl pos:start="1225:11" pos:end="1225:51"><type pos:start="1225:11" pos:end="1225:14"><name pos:start="1225:11" pos:end="1225:14">File</name></type> <name pos:start="1225:16" pos:end="1225:23">destFile</name> <init pos:start="1225:25" pos:end="1225:51">= <expr pos:start="1225:27" pos:end="1225:51"><operator pos:start="1225:27" pos:end="1225:29">new</operator> <call pos:start="1225:31" pos:end="1225:51"><name pos:start="1225:31" pos:end="1225:34">File</name><argument_list pos:start="1225:35" pos:end="1225:51">(<argument pos:start="1225:36" pos:end="1225:44"><expr pos:start="1225:36" pos:end="1225:44"><name pos:start="1225:36" pos:end="1225:44">outputDir</name></expr></argument>, <argument pos:start="1225:47" pos:end="1225:50"><expr pos:start="1225:47" pos:end="1225:50"><name pos:start="1225:47" pos:end="1225:50">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt pos:start="1226:11" pos:end="1226:39"><expr pos:start="1226:11" pos:end="1226:38"><call pos:start="1226:11" pos:end="1226:38"><name pos:start="1226:11" pos:end="1226:24"><name pos:start="1226:11" pos:end="1226:19">FileUtils</name><operator pos:start="1226:20" pos:end="1226:20">.</operator><name pos:start="1226:21" pos:end="1226:24">copy</name></name><argument_list pos:start="1226:25" pos:end="1226:38">(<argument pos:start="1226:26" pos:end="1226:27"><expr pos:start="1226:26" pos:end="1226:27"><name pos:start="1226:26" pos:end="1226:27">in</name></expr></argument>, <argument pos:start="1226:30" pos:end="1226:37"><expr pos:start="1226:30" pos:end="1226:37"><name pos:start="1226:30" pos:end="1226:37">destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc" pos:start="1232:3" pos:end="1237:5">/**
   * Unwraps entries excluding a single parent dir. If there are multiple roots
   * ZipException is thrown.
   *
   * @author Oleg Shelajev
   */</comment>
  <class pos:start="1238:3" pos:end="1288:3"><specifier pos:start="1238:3" pos:end="1238:9">private</specifier> <specifier pos:start="1238:11" pos:end="1238:16">static</specifier> class <name pos:start="1238:24" pos:end="1238:31">Unwraper</name> <super_list pos:start="1238:33" pos:end="1238:59"><implements pos:start="1238:33" pos:end="1238:59">implements <super pos:start="1238:44" pos:end="1238:59"><name pos:start="1238:44" pos:end="1238:59">ZipEntryCallback</name></super></implements></super_list> <block pos:start="1238:61" pos:end="1288:3">{

    <decl_stmt pos:start="1240:5" pos:end="1240:33"><decl pos:start="1240:5" pos:end="1240:32"><type pos:start="1240:5" pos:end="1240:22"><specifier pos:start="1240:5" pos:end="1240:11">private</specifier> <specifier pos:start="1240:13" pos:end="1240:17">final</specifier> <name pos:start="1240:19" pos:end="1240:22">File</name></type> <name pos:start="1240:24" pos:end="1240:32">outputDir</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1241:5" pos:end="1241:36"><decl pos:start="1241:5" pos:end="1241:35"><type pos:start="1241:5" pos:end="1241:28"><specifier pos:start="1241:5" pos:end="1241:11">private</specifier> <specifier pos:start="1241:13" pos:end="1241:17">final</specifier> <name pos:start="1241:19" pos:end="1241:28">NameMapper</name></type> <name pos:start="1241:30" pos:end="1241:35">mapper</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1242:5" pos:end="1242:27"><decl pos:start="1242:5" pos:end="1242:26"><type pos:start="1242:5" pos:end="1242:18"><specifier pos:start="1242:5" pos:end="1242:11">private</specifier> <name pos:start="1242:13" pos:end="1242:18">String</name></type> <name pos:start="1242:20" pos:end="1242:26">rootDir</name></decl>;</decl_stmt>

    <constructor pos:start="1244:5" pos:end="1247:5"><specifier pos:start="1244:5" pos:end="1244:10">public</specifier> <name pos:start="1244:12" pos:end="1244:19">Unwraper</name><parameter_list pos:start="1244:20" pos:end="1244:54">(<parameter pos:start="1244:21" pos:end="1244:34"><decl pos:start="1244:21" pos:end="1244:34"><type pos:start="1244:21" pos:end="1244:34"><name pos:start="1244:21" pos:end="1244:24">File</name></type> <name pos:start="1244:26" pos:end="1244:34">outputDir</name></decl></parameter>, <parameter pos:start="1244:37" pos:end="1244:53"><decl pos:start="1244:37" pos:end="1244:53"><type pos:start="1244:37" pos:end="1244:53"><name pos:start="1244:37" pos:end="1244:46">NameMapper</name></type> <name pos:start="1244:48" pos:end="1244:53">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1244:56" pos:end="1247:5">{<block_content pos:start="1245:7" pos:end="1246:27">
      <expr_stmt pos:start="1245:7" pos:end="1245:33"><expr pos:start="1245:7" pos:end="1245:32"><name pos:start="1245:7" pos:end="1245:20"><name pos:start="1245:7" pos:end="1245:10">this</name><operator pos:start="1245:11" pos:end="1245:11">.</operator><name pos:start="1245:12" pos:end="1245:20">outputDir</name></name> <operator pos:start="1245:22" pos:end="1245:22">=</operator> <name pos:start="1245:24" pos:end="1245:32">outputDir</name></expr>;</expr_stmt>
      <expr_stmt pos:start="1246:7" pos:end="1246:27"><expr pos:start="1246:7" pos:end="1246:26"><name pos:start="1246:7" pos:end="1246:17"><name pos:start="1246:7" pos:end="1246:10">this</name><operator pos:start="1246:11" pos:end="1246:11">.</operator><name pos:start="1246:12" pos:end="1246:17">mapper</name></name> <operator pos:start="1246:19" pos:end="1246:19">=</operator> <name pos:start="1246:21" pos:end="1246:26">mapper</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="1249:5" pos:end="1274:5"><type pos:start="1249:5" pos:end="1249:15"><specifier pos:start="1249:5" pos:end="1249:10">public</specifier> <name pos:start="1249:12" pos:end="1249:15">void</name></type> <name pos:start="1249:17" pos:end="1249:23">process</name><parameter_list pos:start="1249:24" pos:end="1249:58">(<parameter pos:start="1249:25" pos:end="1249:38"><decl pos:start="1249:25" pos:end="1249:38"><type pos:start="1249:25" pos:end="1249:38"><name pos:start="1249:25" pos:end="1249:35">InputStream</name></type> <name pos:start="1249:37" pos:end="1249:38">in</name></decl></parameter>, <parameter pos:start="1249:41" pos:end="1249:57"><decl pos:start="1249:41" pos:end="1249:57"><type pos:start="1249:41" pos:end="1249:57"><name pos:start="1249:41" pos:end="1249:48">ZipEntry</name></type> <name pos:start="1249:50" pos:end="1249:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="1249:60" pos:end="1249:77">throws <argument pos:start="1249:67" pos:end="1249:77"><expr pos:start="1249:67" pos:end="1249:77"><name pos:start="1249:67" pos:end="1249:77">IOException</name></expr></argument></throws> <block pos:start="1249:79" pos:end="1274:5">{<block_content pos:start="1250:7" pos:end="1273:7">
      <decl_stmt pos:start="1250:7" pos:end="1250:52"><decl pos:start="1250:7" pos:end="1250:51"><type pos:start="1250:7" pos:end="1250:12"><name pos:start="1250:7" pos:end="1250:12">String</name></type> <name pos:start="1250:14" pos:end="1250:17">root</name> <init pos:start="1250:19" pos:end="1250:51">= <expr pos:start="1250:21" pos:end="1250:51"><call pos:start="1250:21" pos:end="1250:51"><name pos:start="1250:21" pos:end="1250:31">getRootName</name><argument_list pos:start="1250:32" pos:end="1250:51">(<argument pos:start="1250:33" pos:end="1250:50"><expr pos:start="1250:33" pos:end="1250:50"><call pos:start="1250:33" pos:end="1250:50"><name pos:start="1250:33" pos:end="1250:48"><name pos:start="1250:33" pos:end="1250:40">zipEntry</name><operator pos:start="1250:41" pos:end="1250:41">.</operator><name pos:start="1250:42" pos:end="1250:48">getName</name></name><argument_list pos:start="1250:49" pos:end="1250:50">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="1251:7" pos:end="1256:7"><if pos:start="1251:7" pos:end="1253:7">if <condition pos:start="1251:10" pos:end="1251:26">(<expr pos:start="1251:11" pos:end="1251:25"><name pos:start="1251:11" pos:end="1251:17">rootDir</name> <operator pos:start="1251:19" pos:end="1251:20">==</operator> <literal type="null" pos:start="1251:22" pos:end="1251:25">null</literal></expr>)</condition> <block pos:start="1251:28" pos:end="1253:7">{<block_content pos:start="1252:9" pos:end="1252:23">
        <expr_stmt pos:start="1252:9" pos:end="1252:23"><expr pos:start="1252:9" pos:end="1252:22"><name pos:start="1252:9" pos:end="1252:15">rootDir</name> <operator pos:start="1252:17" pos:end="1252:17">=</operator> <name pos:start="1252:19" pos:end="1252:22">root</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif" pos:start="1254:7" pos:end="1256:7">else if <condition pos:start="1254:15" pos:end="1254:37">(<expr pos:start="1254:16" pos:end="1254:36"><operator pos:start="1254:16" pos:end="1254:16">!</operator><call pos:start="1254:17" pos:end="1254:36"><name pos:start="1254:17" pos:end="1254:30"><name pos:start="1254:17" pos:end="1254:23">rootDir</name><operator pos:start="1254:24" pos:end="1254:24">.</operator><name pos:start="1254:25" pos:end="1254:30">equals</name></name><argument_list pos:start="1254:31" pos:end="1254:36">(<argument pos:start="1254:32" pos:end="1254:35"><expr pos:start="1254:32" pos:end="1254:35"><name pos:start="1254:32" pos:end="1254:35">root</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1254:39" pos:end="1256:7">{<block_content pos:start="1255:9" pos:end="1255:115">
        <throw pos:start="1255:9" pos:end="1255:115">throw <expr pos:start="1255:15" pos:end="1255:114"><operator pos:start="1255:15" pos:end="1255:17">new</operator> <call pos:start="1255:19" pos:end="1255:114"><name pos:start="1255:19" pos:end="1255:30">ZipException</name><argument_list pos:start="1255:31" pos:end="1255:114">(<argument pos:start="1255:32" pos:end="1255:113"><expr pos:start="1255:32" pos:end="1255:113"><literal type="string" pos:start="1255:32" pos:end="1255:89">"Unwrapping with multiple roots is not supported, roots: "</literal> <operator pos:start="1255:91" pos:end="1255:91">+</operator> <name pos:start="1255:93" pos:end="1255:99">rootDir</name> <operator pos:start="1255:101" pos:end="1255:101">+</operator> <literal type="string" pos:start="1255:103" pos:end="1255:106">", "</literal> <operator pos:start="1255:108" pos:end="1255:108">+</operator> <name pos:start="1255:110" pos:end="1255:113">root</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <decl_stmt pos:start="1258:7" pos:end="1258:74"><decl pos:start="1258:7" pos:end="1258:73"><type pos:start="1258:7" pos:end="1258:12"><name pos:start="1258:7" pos:end="1258:12">String</name></type> <name pos:start="1258:14" pos:end="1258:17">name</name> <init pos:start="1258:19" pos:end="1258:73">= <expr pos:start="1258:21" pos:end="1258:73"><call pos:start="1258:21" pos:end="1258:73"><name pos:start="1258:21" pos:end="1258:30"><name pos:start="1258:21" pos:end="1258:26">mapper</name><operator pos:start="1258:27" pos:end="1258:27">.</operator><name pos:start="1258:28" pos:end="1258:30">map</name></name><argument_list pos:start="1258:31" pos:end="1258:73">(<argument pos:start="1258:32" pos:end="1258:72"><expr pos:start="1258:32" pos:end="1258:72"><call pos:start="1258:32" pos:end="1258:72"><name pos:start="1258:32" pos:end="1258:46">getUnrootedName</name><argument_list pos:start="1258:47" pos:end="1258:72">(<argument pos:start="1258:48" pos:end="1258:51"><expr pos:start="1258:48" pos:end="1258:51"><name pos:start="1258:48" pos:end="1258:51">root</name></expr></argument>, <argument pos:start="1258:54" pos:end="1258:71"><expr pos:start="1258:54" pos:end="1258:71"><call pos:start="1258:54" pos:end="1258:71"><name pos:start="1258:54" pos:end="1258:69"><name pos:start="1258:54" pos:end="1258:61">zipEntry</name><operator pos:start="1258:62" pos:end="1258:62">.</operator><name pos:start="1258:63" pos:end="1258:69">getName</name></name><argument_list pos:start="1258:70" pos:end="1258:71">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="1259:7" pos:end="1273:7"><if pos:start="1259:7" pos:end="1273:7">if <condition pos:start="1259:10" pos:end="1259:23">(<expr pos:start="1259:11" pos:end="1259:22"><name pos:start="1259:11" pos:end="1259:14">name</name> <operator pos:start="1259:16" pos:end="1259:17">!=</operator> <literal type="null" pos:start="1259:19" pos:end="1259:22">null</literal></expr>)</condition> <block pos:start="1259:25" pos:end="1273:7">{<block_content pos:start="1260:9" pos:end="1272:9">
        <decl_stmt pos:start="1260:9" pos:end="1260:46"><decl pos:start="1260:9" pos:end="1260:45"><type pos:start="1260:9" pos:end="1260:12"><name pos:start="1260:9" pos:end="1260:12">File</name></type> <name pos:start="1260:14" pos:end="1260:17">file</name> <init pos:start="1260:19" pos:end="1260:45">= <expr pos:start="1260:21" pos:end="1260:45"><operator pos:start="1260:21" pos:end="1260:23">new</operator> <call pos:start="1260:25" pos:end="1260:45"><name pos:start="1260:25" pos:end="1260:28">File</name><argument_list pos:start="1260:29" pos:end="1260:45">(<argument pos:start="1260:30" pos:end="1260:38"><expr pos:start="1260:30" pos:end="1260:38"><name pos:start="1260:30" pos:end="1260:38">outputDir</name></expr></argument>, <argument pos:start="1260:41" pos:end="1260:44"><expr pos:start="1260:41" pos:end="1260:44"><name pos:start="1260:41" pos:end="1260:44">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="1261:9" pos:end="1272:9"><if pos:start="1261:9" pos:end="1263:9">if <condition pos:start="1261:12" pos:end="1261:35">(<expr pos:start="1261:13" pos:end="1261:34"><call pos:start="1261:13" pos:end="1261:34"><name pos:start="1261:13" pos:end="1261:32"><name pos:start="1261:13" pos:end="1261:20">zipEntry</name><operator pos:start="1261:21" pos:end="1261:21">.</operator><name pos:start="1261:22" pos:end="1261:32">isDirectory</name></name><argument_list pos:start="1261:33" pos:end="1261:34">()</argument_list></call></expr>)</condition> <block pos:start="1261:37" pos:end="1263:9">{<block_content pos:start="1262:11" pos:end="1262:37">
          <expr_stmt pos:start="1262:11" pos:end="1262:37"><expr pos:start="1262:11" pos:end="1262:36"><call pos:start="1262:11" pos:end="1262:36"><name pos:start="1262:11" pos:end="1262:30"><name pos:start="1262:11" pos:end="1262:19">FileUtils</name><operator pos:start="1262:20" pos:end="1262:20">.</operator><name pos:start="1262:21" pos:end="1262:30">forceMkdir</name></name><argument_list pos:start="1262:31" pos:end="1262:36">(<argument pos:start="1262:32" pos:end="1262:35"><expr pos:start="1262:32" pos:end="1262:35"><name pos:start="1262:32" pos:end="1262:35">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="1264:9" pos:end="1272:9">else <block pos:start="1264:14" pos:end="1272:9">{<block_content pos:start="1265:11" pos:end="1271:35">
          <expr_stmt pos:start="1265:11" pos:end="1265:53"><expr pos:start="1265:11" pos:end="1265:52"><call pos:start="1265:11" pos:end="1265:52"><name pos:start="1265:11" pos:end="1265:30"><name pos:start="1265:11" pos:end="1265:19">FileUtils</name><operator pos:start="1265:20" pos:end="1265:20">.</operator><name pos:start="1265:21" pos:end="1265:30">forceMkdir</name></name><argument_list pos:start="1265:31" pos:end="1265:52">(<argument pos:start="1265:32" pos:end="1265:51"><expr pos:start="1265:32" pos:end="1265:51"><call pos:start="1265:32" pos:end="1265:51"><name pos:start="1265:32" pos:end="1265:49"><name pos:start="1265:32" pos:end="1265:35">file</name><operator pos:start="1265:36" pos:end="1265:36">.</operator><name pos:start="1265:37" pos:end="1265:49">getParentFile</name></name><argument_list pos:start="1265:50" pos:end="1265:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="1267:11" pos:end="1269:11"><if pos:start="1267:11" pos:end="1269:11">if <condition pos:start="1267:14" pos:end="1267:52">(<expr pos:start="1267:15" pos:end="1267:51"><call pos:start="1267:15" pos:end="1267:34"><name pos:start="1267:15" pos:end="1267:32"><name pos:start="1267:15" pos:end="1267:17">log</name><operator pos:start="1267:18" pos:end="1267:18">.</operator><name pos:start="1267:19" pos:end="1267:32">isDebugEnabled</name></name><argument_list pos:start="1267:33" pos:end="1267:34">()</argument_list></call> <operator pos:start="1267:36" pos:end="1267:37">&amp;&amp;</operator> <call pos:start="1267:39" pos:end="1267:51"><name pos:start="1267:39" pos:end="1267:49"><name pos:start="1267:39" pos:end="1267:42">file</name><operator pos:start="1267:43" pos:end="1267:43">.</operator><name pos:start="1267:44" pos:end="1267:49">exists</name></name><argument_list pos:start="1267:50" pos:end="1267:51">()</argument_list></call></expr>)</condition> <block pos:start="1267:54" pos:end="1269:11">{<block_content pos:start="1268:13" pos:end="1268:68">
            <expr_stmt pos:start="1268:13" pos:end="1268:68"><expr pos:start="1268:13" pos:end="1268:67"><call pos:start="1268:13" pos:end="1268:67"><name pos:start="1268:13" pos:end="1268:21"><name pos:start="1268:13" pos:end="1268:15">log</name><operator pos:start="1268:16" pos:end="1268:16">.</operator><name pos:start="1268:17" pos:end="1268:21">debug</name></name><argument_list pos:start="1268:22" pos:end="1268:67">(<argument pos:start="1268:23" pos:end="1268:46"><expr pos:start="1268:23" pos:end="1268:46"><literal type="string" pos:start="1268:23" pos:end="1268:46">"Overwriting file '{}'."</literal></expr></argument>, <argument pos:start="1268:49" pos:end="1268:66"><expr pos:start="1268:49" pos:end="1268:66"><call pos:start="1268:49" pos:end="1268:66"><name pos:start="1268:49" pos:end="1268:64"><name pos:start="1268:49" pos:end="1268:56">zipEntry</name><operator pos:start="1268:57" pos:end="1268:57">.</operator><name pos:start="1268:58" pos:end="1268:64">getName</name></name><argument_list pos:start="1268:65" pos:end="1268:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt pos:start="1271:11" pos:end="1271:35"><expr pos:start="1271:11" pos:end="1271:34"><call pos:start="1271:11" pos:end="1271:34"><name pos:start="1271:11" pos:end="1271:24"><name pos:start="1271:11" pos:end="1271:19">FileUtils</name><operator pos:start="1271:20" pos:end="1271:20">.</operator><name pos:start="1271:21" pos:end="1271:24">copy</name></name><argument_list pos:start="1271:25" pos:end="1271:34">(<argument pos:start="1271:26" pos:end="1271:27"><expr pos:start="1271:26" pos:end="1271:27"><name pos:start="1271:26" pos:end="1271:27">in</name></expr></argument>, <argument pos:start="1271:30" pos:end="1271:33"><expr pos:start="1271:30" pos:end="1271:33"><name pos:start="1271:30" pos:end="1271:33">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function pos:start="1276:5" pos:end="1278:5"><type pos:start="1276:5" pos:end="1276:18"><specifier pos:start="1276:5" pos:end="1276:11">private</specifier> <name pos:start="1276:13" pos:end="1276:18">String</name></type> <name pos:start="1276:20" pos:end="1276:34">getUnrootedName</name><parameter_list pos:start="1276:35" pos:end="1276:60">(<parameter pos:start="1276:36" pos:end="1276:46"><decl pos:start="1276:36" pos:end="1276:46"><type pos:start="1276:36" pos:end="1276:46"><name pos:start="1276:36" pos:end="1276:41">String</name></type> <name pos:start="1276:43" pos:end="1276:46">root</name></decl></parameter>, <parameter pos:start="1276:49" pos:end="1276:59"><decl pos:start="1276:49" pos:end="1276:59"><type pos:start="1276:49" pos:end="1276:59"><name pos:start="1276:49" pos:end="1276:54">String</name></type> <name pos:start="1276:56" pos:end="1276:59">name</name></decl></parameter>)</parameter_list> <block pos:start="1276:62" pos:end="1278:5">{<block_content pos:start="1277:7" pos:end="1277:43">
      <return pos:start="1277:7" pos:end="1277:43">return <expr pos:start="1277:14" pos:end="1277:42"><call pos:start="1277:14" pos:end="1277:42"><name pos:start="1277:14" pos:end="1277:27"><name pos:start="1277:14" pos:end="1277:17">name</name><operator pos:start="1277:18" pos:end="1277:18">.</operator><name pos:start="1277:19" pos:end="1277:27">substring</name></name><argument_list pos:start="1277:28" pos:end="1277:42">(<argument pos:start="1277:29" pos:end="1277:41"><expr pos:start="1277:29" pos:end="1277:41"><call pos:start="1277:29" pos:end="1277:41"><name pos:start="1277:29" pos:end="1277:39"><name pos:start="1277:29" pos:end="1277:32">root</name><operator pos:start="1277:33" pos:end="1277:33">.</operator><name pos:start="1277:34" pos:end="1277:39">length</name></name><argument_list pos:start="1277:40" pos:end="1277:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1280:5" pos:end="1287:5"><type pos:start="1280:5" pos:end="1280:18"><specifier pos:start="1280:5" pos:end="1280:11">private</specifier> <name pos:start="1280:13" pos:end="1280:18">String</name></type> <name pos:start="1280:20" pos:end="1280:30">getRootName</name><parameter_list pos:start="1280:31" pos:end="1280:49">(<parameter pos:start="1280:32" pos:end="1280:48"><decl pos:start="1280:32" pos:end="1280:48"><type pos:start="1280:32" pos:end="1280:43"><specifier pos:start="1280:32" pos:end="1280:36">final</specifier> <name pos:start="1280:38" pos:end="1280:43">String</name></type> <name pos:start="1280:45" pos:end="1280:48">name</name></decl></parameter>)</parameter_list> <block pos:start="1280:51" pos:end="1287:5">{<block_content pos:start="1281:7" pos:end="1286:67">
      <decl_stmt pos:start="1281:7" pos:end="1281:75"><decl pos:start="1281:7" pos:end="1281:74"><type pos:start="1281:7" pos:end="1281:12"><name pos:start="1281:7" pos:end="1281:12">String</name></type> <name pos:start="1281:14" pos:end="1281:20">newName</name> <init pos:start="1281:22" pos:end="1281:74">= <expr pos:start="1281:24" pos:end="1281:74"><call pos:start="1281:24" pos:end="1281:74"><name pos:start="1281:24" pos:end="1281:37"><name pos:start="1281:24" pos:end="1281:27">name</name><operator pos:start="1281:28" pos:end="1281:28">.</operator><name pos:start="1281:29" pos:end="1281:37">substring</name></name><argument_list pos:start="1281:38" pos:end="1281:74">(<argument pos:start="1281:39" pos:end="1281:73"><expr pos:start="1281:39" pos:end="1281:73"><call pos:start="1281:39" pos:end="1281:73"><name pos:start="1281:39" pos:end="1281:67"><name pos:start="1281:39" pos:end="1281:51">FilenameUtils</name><operator pos:start="1281:52" pos:end="1281:52">.</operator><name pos:start="1281:53" pos:end="1281:67">getPrefixLength</name></name><argument_list pos:start="1281:68" pos:end="1281:73">(<argument pos:start="1281:69" pos:end="1281:72"><expr pos:start="1281:69" pos:end="1281:72"><name pos:start="1281:69" pos:end="1281:72">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="1282:7" pos:end="1282:48"><decl pos:start="1282:7" pos:end="1282:47"><type pos:start="1282:7" pos:end="1282:9"><name pos:start="1282:7" pos:end="1282:9">int</name></type> <name pos:start="1282:11" pos:end="1282:13">idx</name> <init pos:start="1282:15" pos:end="1282:47">= <expr pos:start="1282:17" pos:end="1282:47"><call pos:start="1282:17" pos:end="1282:47"><name pos:start="1282:17" pos:end="1282:31"><name pos:start="1282:17" pos:end="1282:23">newName</name><operator pos:start="1282:24" pos:end="1282:24">.</operator><name pos:start="1282:25" pos:end="1282:31">indexOf</name></name><argument_list pos:start="1282:32" pos:end="1282:47">(<argument pos:start="1282:33" pos:end="1282:46"><expr pos:start="1282:33" pos:end="1282:46"><name pos:start="1282:33" pos:end="1282:46">PATH_SEPARATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="1283:7" pos:end="1285:7"><if pos:start="1283:7" pos:end="1285:7">if <condition pos:start="1283:10" pos:end="1283:18">(<expr pos:start="1283:11" pos:end="1283:17"><name pos:start="1283:11" pos:end="1283:13">idx</name> <operator pos:start="1283:15" pos:end="1283:15">&lt;</operator> <literal type="number" pos:start="1283:17" pos:end="1283:17">0</literal></expr>)</condition> <block pos:start="1283:20" pos:end="1285:7">{<block_content pos:start="1284:9" pos:end="1284:98">
        <throw pos:start="1284:9" pos:end="1284:98">throw <expr pos:start="1284:15" pos:end="1284:97"><operator pos:start="1284:15" pos:end="1284:17">new</operator> <call pos:start="1284:19" pos:end="1284:97"><name pos:start="1284:19" pos:end="1284:30">ZipException</name><argument_list pos:start="1284:31" pos:end="1284:97">(<argument pos:start="1284:32" pos:end="1284:96"><expr pos:start="1284:32" pos:end="1284:96"><literal type="string" pos:start="1284:32" pos:end="1284:39">"Entry "</literal> <operator pos:start="1284:41" pos:end="1284:41">+</operator> <name pos:start="1284:43" pos:end="1284:49">newName</name> <operator pos:start="1284:51" pos:end="1284:51">+</operator> <literal type="string" pos:start="1284:53" pos:end="1284:96">" from the root of the zip is not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <return pos:start="1286:7" pos:end="1286:67">return <expr pos:start="1286:14" pos:end="1286:66"><call pos:start="1286:14" pos:end="1286:66"><name pos:start="1286:14" pos:end="1286:30"><name pos:start="1286:14" pos:end="1286:20">newName</name><operator pos:start="1286:21" pos:end="1286:21">.</operator><name pos:start="1286:22" pos:end="1286:30">substring</name></name><argument_list pos:start="1286:31" pos:end="1286:66">(<argument pos:start="1286:32" pos:end="1286:32"><expr pos:start="1286:32" pos:end="1286:32"><literal type="number" pos:start="1286:32" pos:end="1286:32">0</literal></expr></argument>, <argument pos:start="1286:35" pos:end="1286:65"><expr pos:start="1286:35" pos:end="1286:65"><call pos:start="1286:35" pos:end="1286:65"><name pos:start="1286:35" pos:end="1286:49"><name pos:start="1286:35" pos:end="1286:41">newName</name><operator pos:start="1286:42" pos:end="1286:42">.</operator><name pos:start="1286:43" pos:end="1286:49">indexOf</name></name><argument_list pos:start="1286:50" pos:end="1286:65">(<argument pos:start="1286:51" pos:end="1286:64"><expr pos:start="1286:51" pos:end="1286:64"><name pos:start="1286:51" pos:end="1286:64">PATH_SEPARATOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc" pos:start="1290:3" pos:end="1300:5">/**
   * Unpacks a ZIP file to its own location.
   * &lt;p&gt;
   * The ZIP file will be first renamed (using a temporary name). After the
   * extraction it will be deleted.
   *
   * @param zip
   *          input ZIP file as well as the target directory.
   *
   * @see #unpack(File, File)
   */</comment>
  <function pos:start="1301:3" pos:end="1320:3"><type pos:start="1301:3" pos:end="1301:20"><specifier pos:start="1301:3" pos:end="1301:8">public</specifier> <specifier pos:start="1301:10" pos:end="1301:15">static</specifier> <name pos:start="1301:17" pos:end="1301:20">void</name></type> <name pos:start="1301:22" pos:end="1301:28">explode</name><parameter_list pos:start="1301:29" pos:end="1301:38">(<parameter pos:start="1301:30" pos:end="1301:37"><decl pos:start="1301:30" pos:end="1301:37"><type pos:start="1301:30" pos:end="1301:33"><name pos:start="1301:30" pos:end="1301:33">File</name></type> <name pos:start="1301:35" pos:end="1301:37">zip</name></decl></parameter>)</parameter_list> <block pos:start="1301:40" pos:end="1320:3">{<block_content pos:start="1302:5" pos:end="1319:5">
    <try pos:start="1302:5" pos:end="1319:5">try <block pos:start="1302:9" pos:end="1316:5">{<block_content pos:start="1304:7" pos:end="1315:7">
      <comment type="line" pos:start="1303:7" pos:end="1303:53">// Find a new unique name is the same directory</comment>
      <decl_stmt pos:start="1304:7" pos:end="1304:52"><decl pos:start="1304:7" pos:end="1304:51"><type pos:start="1304:7" pos:end="1304:10"><name pos:start="1304:7" pos:end="1304:10">File</name></type> <name pos:start="1304:12" pos:end="1304:19">tempFile</name> <init pos:start="1304:21" pos:end="1304:51">= <expr pos:start="1304:23" pos:end="1304:51"><call pos:start="1304:23" pos:end="1304:51"><name pos:start="1304:23" pos:end="1304:46"><name pos:start="1304:23" pos:end="1304:31">FileUtils</name><operator pos:start="1304:32" pos:end="1304:32">.</operator><name pos:start="1304:33" pos:end="1304:46">getTempFileFor</name></name><argument_list pos:start="1304:47" pos:end="1304:51">(<argument pos:start="1304:48" pos:end="1304:50"><expr pos:start="1304:48" pos:end="1304:50"><name pos:start="1304:48" pos:end="1304:50">zip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line" pos:start="1306:7" pos:end="1306:27">// Rename the archive</comment>
      <expr_stmt pos:start="1307:7" pos:end="1307:40"><expr pos:start="1307:7" pos:end="1307:39"><call pos:start="1307:7" pos:end="1307:39"><name pos:start="1307:7" pos:end="1307:24"><name pos:start="1307:7" pos:end="1307:15">FileUtils</name><operator pos:start="1307:16" pos:end="1307:16">.</operator><name pos:start="1307:17" pos:end="1307:24">moveFile</name></name><argument_list pos:start="1307:25" pos:end="1307:39">(<argument pos:start="1307:26" pos:end="1307:28"><expr pos:start="1307:26" pos:end="1307:28"><name pos:start="1307:26" pos:end="1307:28">zip</name></expr></argument>, <argument pos:start="1307:31" pos:end="1307:38"><expr pos:start="1307:31" pos:end="1307:38"><name pos:start="1307:31" pos:end="1307:38">tempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line" pos:start="1309:7" pos:end="1309:18">// Unpack it</comment>
      <expr_stmt pos:start="1310:7" pos:end="1310:28"><expr pos:start="1310:7" pos:end="1310:27"><call pos:start="1310:7" pos:end="1310:27"><name pos:start="1310:7" pos:end="1310:12">unpack</name><argument_list pos:start="1310:13" pos:end="1310:27">(<argument pos:start="1310:14" pos:end="1310:21"><expr pos:start="1310:14" pos:end="1310:21"><name pos:start="1310:14" pos:end="1310:21">tempFile</name></expr></argument>, <argument pos:start="1310:24" pos:end="1310:26"><expr pos:start="1310:24" pos:end="1310:26"><name pos:start="1310:24" pos:end="1310:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line" pos:start="1312:7" pos:end="1312:27">// Delete the archive</comment>
      <if_stmt pos:start="1313:7" pos:end="1315:7"><if pos:start="1313:7" pos:end="1315:7">if <condition pos:start="1313:10" pos:end="1313:29">(<expr pos:start="1313:11" pos:end="1313:28"><operator pos:start="1313:11" pos:end="1313:11">!</operator><call pos:start="1313:12" pos:end="1313:28"><name pos:start="1313:12" pos:end="1313:26"><name pos:start="1313:12" pos:end="1313:19">tempFile</name><operator pos:start="1313:20" pos:end="1313:20">.</operator><name pos:start="1313:21" pos:end="1313:26">delete</name></name><argument_list pos:start="1313:27" pos:end="1313:28">()</argument_list></call></expr>)</condition> <block pos:start="1313:31" pos:end="1315:7">{<block_content pos:start="1314:9" pos:end="1314:68">
        <throw pos:start="1314:9" pos:end="1314:68">throw <expr pos:start="1314:15" pos:end="1314:67"><operator pos:start="1314:15" pos:end="1314:17">new</operator> <call pos:start="1314:19" pos:end="1314:67"><name pos:start="1314:19" pos:end="1314:29">IOException</name><argument_list pos:start="1314:30" pos:end="1314:67">(<argument pos:start="1314:31" pos:end="1314:66"><expr pos:start="1314:31" pos:end="1314:66"><literal type="string" pos:start="1314:31" pos:end="1314:55">"Unable to delete file: "</literal> <operator pos:start="1314:57" pos:end="1314:57">+</operator> <name pos:start="1314:59" pos:end="1314:66">tempFile</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <catch pos:start="1317:5" pos:end="1319:5">catch <parameter_list pos:start="1317:11" pos:end="1317:25">(<parameter pos:start="1317:12" pos:end="1317:24"><decl pos:start="1317:12" pos:end="1317:24"><type pos:start="1317:12" pos:end="1317:24"><name pos:start="1317:12" pos:end="1317:22">IOException</name></type> <name pos:start="1317:24" pos:end="1317:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1317:27" pos:end="1319:5">{<block_content pos:start="1318:7" pos:end="1318:40">
      <throw pos:start="1318:7" pos:end="1318:40">throw <expr pos:start="1318:13" pos:end="1318:39"><call pos:start="1318:13" pos:end="1318:39"><name pos:start="1318:13" pos:end="1318:36"><name pos:start="1318:13" pos:end="1318:28">ZipExceptionUtil</name><operator pos:start="1318:29" pos:end="1318:29">.</operator><name pos:start="1318:30" pos:end="1318:36">rethrow</name></name><argument_list pos:start="1318:37" pos:end="1318:39">(<argument pos:start="1318:38" pos:end="1318:38"><expr pos:start="1318:38" pos:end="1318:38"><name pos:start="1318:38" pos:end="1318:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" pos:start="1322:3" pos:end="1322:48">/* Compressing single entries to ZIP files. */</comment>

  <comment type="block" format="javadoc" pos:start="1324:3" pos:end="1329:5">/**
   * Compresses the given file into a ZIP file with single entry.
   *
   * @param file file to be compressed.
   * @return ZIP file created.
   */</comment>
  <function pos:start="1330:3" pos:end="1350:3"><type pos:start="1330:3" pos:end="1330:22"><specifier pos:start="1330:3" pos:end="1330:8">public</specifier> <specifier pos:start="1330:10" pos:end="1330:15">static</specifier> <name pos:start="1330:17" pos:end="1330:22"><name pos:start="1330:17" pos:end="1330:20">byte</name><index pos:start="1330:21" pos:end="1330:22">[]</index></name></type> <name pos:start="1330:24" pos:end="1330:32">packEntry</name><parameter_list pos:start="1330:33" pos:end="1330:43">(<parameter pos:start="1330:34" pos:end="1330:42"><decl pos:start="1330:34" pos:end="1330:42"><type pos:start="1330:34" pos:end="1330:37"><name pos:start="1330:34" pos:end="1330:37">File</name></type> <name pos:start="1330:39" pos:end="1330:42">file</name></decl></parameter>)</parameter_list> <block pos:start="1330:45" pos:end="1350:3">{<block_content pos:start="1331:5" pos:end="1349:32">
    <expr_stmt pos:start="1331:5" pos:end="1331:75"><expr pos:start="1331:5" pos:end="1331:74"><call pos:start="1331:5" pos:end="1331:74"><name pos:start="1331:5" pos:end="1331:13"><name pos:start="1331:5" pos:end="1331:7">log</name><operator pos:start="1331:8" pos:end="1331:8">.</operator><name pos:start="1331:9" pos:end="1331:13">trace</name></name><argument_list pos:start="1331:14" pos:end="1331:74">(<argument pos:start="1331:15" pos:end="1331:67"><expr pos:start="1331:15" pos:end="1331:67"><literal type="string" pos:start="1331:15" pos:end="1331:67">"Compressing '{}' into a ZIP file with single entry."</literal></expr></argument>, <argument pos:start="1331:70" pos:end="1331:73"><expr pos:start="1331:70" pos:end="1331:73"><name pos:start="1331:70" pos:end="1331:73">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="1333:5" pos:end="1333:63"><decl pos:start="1333:5" pos:end="1333:62"><type pos:start="1333:5" pos:end="1333:25"><name pos:start="1333:5" pos:end="1333:25">ByteArrayOutputStream</name></type> <name pos:start="1333:27" pos:end="1333:32">result</name> <init pos:start="1333:34" pos:end="1333:62">= <expr pos:start="1333:36" pos:end="1333:62"><operator pos:start="1333:36" pos:end="1333:38">new</operator> <call pos:start="1333:40" pos:end="1333:62"><name pos:start="1333:40" pos:end="1333:60">ByteArrayOutputStream</name><argument_list pos:start="1333:61" pos:end="1333:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try pos:start="1334:5" pos:end="1348:5">try <block pos:start="1334:9" pos:end="1345:5">{<block_content pos:start="1335:7" pos:end="1344:18">
      <decl_stmt pos:start="1335:7" pos:end="1335:56"><decl pos:start="1335:7" pos:end="1335:55"><type pos:start="1335:7" pos:end="1335:21"><name pos:start="1335:7" pos:end="1335:21">ZipOutputStream</name></type> <name pos:start="1335:23" pos:end="1335:25">out</name> <init pos:start="1335:27" pos:end="1335:55">= <expr pos:start="1335:29" pos:end="1335:55"><operator pos:start="1335:29" pos:end="1335:31">new</operator> <call pos:start="1335:33" pos:end="1335:55"><name pos:start="1335:33" pos:end="1335:47">ZipOutputStream</name><argument_list pos:start="1335:48" pos:end="1335:55">(<argument pos:start="1335:49" pos:end="1335:54"><expr pos:start="1335:49" pos:end="1335:54"><name pos:start="1335:49" pos:end="1335:54">result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="1336:7" pos:end="1336:67"><decl pos:start="1336:7" pos:end="1336:66"><type pos:start="1336:7" pos:end="1336:14"><name pos:start="1336:7" pos:end="1336:14">ZipEntry</name></type> <name pos:start="1336:16" pos:end="1336:20">entry</name> <init pos:start="1336:22" pos:end="1336:66">= <expr pos:start="1336:24" pos:end="1336:66"><call pos:start="1336:24" pos:end="1336:66"><name pos:start="1336:24" pos:end="1336:44"><name pos:start="1336:24" pos:end="1336:35">ZipEntryUtil</name><operator pos:start="1336:36" pos:end="1336:36">.</operator><name pos:start="1336:37" pos:end="1336:44">fromFile</name></name><argument_list pos:start="1336:45" pos:end="1336:66">(<argument pos:start="1336:46" pos:end="1336:59"><expr pos:start="1336:46" pos:end="1336:59"><call pos:start="1336:46" pos:end="1336:59"><name pos:start="1336:46" pos:end="1336:57"><name pos:start="1336:46" pos:end="1336:49">file</name><operator pos:start="1336:50" pos:end="1336:50">.</operator><name pos:start="1336:51" pos:end="1336:57">getName</name></name><argument_list pos:start="1336:58" pos:end="1336:59">()</argument_list></call></expr></argument>, <argument pos:start="1336:62" pos:end="1336:65"><expr pos:start="1336:62" pos:end="1336:65"><name pos:start="1336:62" pos:end="1336:65">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="1337:7" pos:end="1337:74"><decl pos:start="1337:7" pos:end="1337:73"><type pos:start="1337:7" pos:end="1337:17"><name pos:start="1337:7" pos:end="1337:17">InputStream</name></type> <name pos:start="1337:19" pos:end="1337:20">in</name> <init pos:start="1337:22" pos:end="1337:73">= <expr pos:start="1337:24" pos:end="1337:73"><operator pos:start="1337:24" pos:end="1337:26">new</operator> <call pos:start="1337:28" pos:end="1337:73"><name pos:start="1337:28" pos:end="1337:46">BufferedInputStream</name><argument_list pos:start="1337:47" pos:end="1337:73">(<argument pos:start="1337:48" pos:end="1337:72"><expr pos:start="1337:48" pos:end="1337:72"><operator pos:start="1337:48" pos:end="1337:50">new</operator> <call pos:start="1337:52" pos:end="1337:72"><name pos:start="1337:52" pos:end="1337:66">FileInputStream</name><argument_list pos:start="1337:67" pos:end="1337:72">(<argument pos:start="1337:68" pos:end="1337:71"><expr pos:start="1337:68" pos:end="1337:71"><name pos:start="1337:68" pos:end="1337:71">file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <try pos:start="1338:7" pos:end="1343:7">try <block pos:start="1338:11" pos:end="1340:7">{<block_content pos:start="1339:9" pos:end="1339:46">
        <expr_stmt pos:start="1339:9" pos:end="1339:46"><expr pos:start="1339:9" pos:end="1339:45"><call pos:start="1339:9" pos:end="1339:45"><name pos:start="1339:9" pos:end="1339:29"><name pos:start="1339:9" pos:end="1339:20">ZipEntryUtil</name><operator pos:start="1339:21" pos:end="1339:21">.</operator><name pos:start="1339:22" pos:end="1339:29">addEntry</name></name><argument_list pos:start="1339:30" pos:end="1339:45">(<argument pos:start="1339:31" pos:end="1339:35"><expr pos:start="1339:31" pos:end="1339:35"><name pos:start="1339:31" pos:end="1339:35">entry</name></expr></argument>, <argument pos:start="1339:38" pos:end="1339:39"><expr pos:start="1339:38" pos:end="1339:39"><name pos:start="1339:38" pos:end="1339:39">in</name></expr></argument>, <argument pos:start="1339:42" pos:end="1339:44"><expr pos:start="1339:42" pos:end="1339:44"><name pos:start="1339:42" pos:end="1339:44">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <finally pos:start="1341:7" pos:end="1343:7">finally <block pos:start="1341:15" pos:end="1343:7">{<block_content pos:start="1342:9" pos:end="1342:33">
        <expr_stmt pos:start="1342:9" pos:end="1342:33"><expr pos:start="1342:9" pos:end="1342:32"><call pos:start="1342:9" pos:end="1342:32"><name pos:start="1342:9" pos:end="1342:28"><name pos:start="1342:9" pos:end="1342:15">IOUtils</name><operator pos:start="1342:16" pos:end="1342:16">.</operator><name pos:start="1342:17" pos:end="1342:28">closeQuietly</name></name><argument_list pos:start="1342:29" pos:end="1342:32">(<argument pos:start="1342:30" pos:end="1342:31"><expr pos:start="1342:30" pos:end="1342:31"><name pos:start="1342:30" pos:end="1342:31">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
      <expr_stmt pos:start="1344:7" pos:end="1344:18"><expr pos:start="1344:7" pos:end="1344:17"><call pos:start="1344:7" pos:end="1344:17"><name pos:start="1344:7" pos:end="1344:15"><name pos:start="1344:7" pos:end="1344:9">out</name><operator pos:start="1344:10" pos:end="1344:10">.</operator><name pos:start="1344:11" pos:end="1344:15">close</name></name><argument_list pos:start="1344:16" pos:end="1344:17">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="1346:5" pos:end="1348:5">catch <parameter_list pos:start="1346:11" pos:end="1346:25">(<parameter pos:start="1346:12" pos:end="1346:24"><decl pos:start="1346:12" pos:end="1346:24"><type pos:start="1346:12" pos:end="1346:24"><name pos:start="1346:12" pos:end="1346:22">IOException</name></type> <name pos:start="1346:24" pos:end="1346:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1346:27" pos:end="1348:5">{<block_content pos:start="1347:7" pos:end="1347:40">
      <throw pos:start="1347:7" pos:end="1347:40">throw <expr pos:start="1347:13" pos:end="1347:39"><call pos:start="1347:13" pos:end="1347:39"><name pos:start="1347:13" pos:end="1347:36"><name pos:start="1347:13" pos:end="1347:28">ZipExceptionUtil</name><operator pos:start="1347:29" pos:end="1347:29">.</operator><name pos:start="1347:30" pos:end="1347:36">rethrow</name></name><argument_list pos:start="1347:37" pos:end="1347:39">(<argument pos:start="1347:38" pos:end="1347:38"><expr pos:start="1347:38" pos:end="1347:38"><name pos:start="1347:38" pos:end="1347:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return pos:start="1349:5" pos:end="1349:32">return <expr pos:start="1349:12" pos:end="1349:31"><call pos:start="1349:12" pos:end="1349:31"><name pos:start="1349:12" pos:end="1349:29"><name pos:start="1349:12" pos:end="1349:17">result</name><operator pos:start="1349:18" pos:end="1349:18">.</operator><name pos:start="1349:19" pos:end="1349:29">toByteArray</name></name><argument_list pos:start="1349:30" pos:end="1349:31">()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" pos:start="1352:3" pos:end="1352:30">/* Compressing ZIP files. */</comment>

  <comment type="block" format="javadoc" pos:start="1354:3" pos:end="1364:5">/**
   * Compresses the given directory and all its sub-directories into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   * Will not include the root directory name in the archive.
   *
   * @param rootDir
   *          root directory.
   * @param zip
   *          ZIP file that will be created or overwritten.
   */</comment>
  <function pos:start="1365:3" pos:end="1367:3"><type pos:start="1365:3" pos:end="1365:20"><specifier pos:start="1365:3" pos:end="1365:8">public</specifier> <specifier pos:start="1365:10" pos:end="1365:15">static</specifier> <name pos:start="1365:17" pos:end="1365:20">void</name></type> <name pos:start="1365:22" pos:end="1365:25">pack</name><parameter_list pos:start="1365:26" pos:end="1365:49">(<parameter pos:start="1365:27" pos:end="1365:38"><decl pos:start="1365:27" pos:end="1365:38"><type pos:start="1365:27" pos:end="1365:38"><name pos:start="1365:27" pos:end="1365:30">File</name></type> <name pos:start="1365:32" pos:end="1365:38">rootDir</name></decl></parameter>, <parameter pos:start="1365:41" pos:end="1365:48"><decl pos:start="1365:41" pos:end="1365:48"><type pos:start="1365:41" pos:end="1365:48"><name pos:start="1365:41" pos:end="1365:44">File</name></type> <name pos:start="1365:46" pos:end="1365:48">zip</name></decl></parameter>)</parameter_list> <block pos:start="1365:51" pos:end="1367:3">{<block_content pos:start="1366:5" pos:end="1366:50">
    <expr_stmt pos:start="1366:5" pos:end="1366:50"><expr pos:start="1366:5" pos:end="1366:49"><call pos:start="1366:5" pos:end="1366:49"><name pos:start="1366:5" pos:end="1366:8">pack</name><argument_list pos:start="1366:9" pos:end="1366:49">(<argument pos:start="1366:10" pos:end="1366:16"><expr pos:start="1366:10" pos:end="1366:16"><name pos:start="1366:10" pos:end="1366:16">rootDir</name></expr></argument>, <argument pos:start="1366:19" pos:end="1366:21"><expr pos:start="1366:19" pos:end="1366:21"><name pos:start="1366:19" pos:end="1366:21">zip</name></expr></argument>, <argument pos:start="1366:24" pos:end="1366:48"><expr pos:start="1366:24" pos:end="1366:48"><name pos:start="1366:24" pos:end="1366:48">DEFAULT_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1369:3" pos:end="1381:5">/**
   * Compresses the given directory and all its sub-directories into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   * Will not include the root directory name in the archive.
   *
   * @param rootDir
   *          root directory.
   * @param zip
   *          ZIP file that will be created or overwritten.
   * @param compressionLevel
   *          compression level
   */</comment>
  <function pos:start="1382:3" pos:end="1384:3"><type pos:start="1382:3" pos:end="1382:20"><specifier pos:start="1382:3" pos:end="1382:8">public</specifier> <specifier pos:start="1382:10" pos:end="1382:15">static</specifier> <name pos:start="1382:17" pos:end="1382:20">void</name></type> <name pos:start="1382:22" pos:end="1382:25">pack</name><parameter_list pos:start="1382:26" pos:end="1382:71">(<parameter pos:start="1382:27" pos:end="1382:38"><decl pos:start="1382:27" pos:end="1382:38"><type pos:start="1382:27" pos:end="1382:38"><name pos:start="1382:27" pos:end="1382:30">File</name></type> <name pos:start="1382:32" pos:end="1382:38">rootDir</name></decl></parameter>, <parameter pos:start="1382:41" pos:end="1382:48"><decl pos:start="1382:41" pos:end="1382:48"><type pos:start="1382:41" pos:end="1382:48"><name pos:start="1382:41" pos:end="1382:44">File</name></type> <name pos:start="1382:46" pos:end="1382:48">zip</name></decl></parameter>, <parameter pos:start="1382:51" pos:end="1382:70"><decl pos:start="1382:51" pos:end="1382:70"><type pos:start="1382:51" pos:end="1382:70"><name pos:start="1382:51" pos:end="1382:53">int</name></type> <name pos:start="1382:55" pos:end="1382:70">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1382:73" pos:end="1384:3">{<block_content pos:start="1383:5" pos:end="1383:70">
    <expr_stmt pos:start="1383:5" pos:end="1383:70"><expr pos:start="1383:5" pos:end="1383:69"><call pos:start="1383:5" pos:end="1383:69"><name pos:start="1383:5" pos:end="1383:8">pack</name><argument_list pos:start="1383:9" pos:end="1383:69">(<argument pos:start="1383:10" pos:end="1383:16"><expr pos:start="1383:10" pos:end="1383:16"><name pos:start="1383:10" pos:end="1383:16">rootDir</name></expr></argument>, <argument pos:start="1383:19" pos:end="1383:21"><expr pos:start="1383:19" pos:end="1383:21"><name pos:start="1383:19" pos:end="1383:21">zip</name></expr></argument>, <argument pos:start="1383:24" pos:end="1383:50"><expr pos:start="1383:24" pos:end="1383:50"><name pos:start="1383:24" pos:end="1383:50"><name pos:start="1383:24" pos:end="1383:41">IdentityNameMapper</name><operator pos:start="1383:42" pos:end="1383:42">.</operator><name pos:start="1383:43" pos:end="1383:50">INSTANCE</name></name></expr></argument>, <argument pos:start="1383:53" pos:end="1383:68"><expr pos:start="1383:53" pos:end="1383:68"><name pos:start="1383:53" pos:end="1383:68">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1386:3" pos:end="1398:5">/**
   * Compresses the given directory and all its sub-directories into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   * Will not include the root directory name in the archive.
   *
   * @param sourceDir
   *          root directory.
   * @param targetZipFile
   *          ZIP file that will be created or overwritten.
   * @param preserveRoot
   *          true if the resulted archive should have the top directory entry
   */</comment>
  <function pos:start="1399:3" pos:end="1411:3"><type pos:start="1399:3" pos:end="1399:20"><specifier pos:start="1399:3" pos:end="1399:8">public</specifier> <specifier pos:start="1399:10" pos:end="1399:15">static</specifier> <name pos:start="1399:17" pos:end="1399:20">void</name></type> <name pos:start="1399:22" pos:end="1399:25">pack</name><parameter_list pos:start="1399:26" pos:end="1399:101">(<parameter pos:start="1399:27" pos:end="1399:46"><decl pos:start="1399:27" pos:end="1399:46"><type pos:start="1399:27" pos:end="1399:46"><specifier pos:start="1399:27" pos:end="1399:31">final</specifier> <name pos:start="1399:33" pos:end="1399:36">File</name></type> <name pos:start="1399:38" pos:end="1399:46">sourceDir</name></decl></parameter>, <parameter pos:start="1399:49" pos:end="1399:72"><decl pos:start="1399:49" pos:end="1399:72"><type pos:start="1399:49" pos:end="1399:72"><specifier pos:start="1399:49" pos:end="1399:53">final</specifier> <name pos:start="1399:55" pos:end="1399:58">File</name></type> <name pos:start="1399:60" pos:end="1399:72">targetZipFile</name></decl></parameter>, <parameter pos:start="1399:75" pos:end="1399:100"><decl pos:start="1399:75" pos:end="1399:100"><type pos:start="1399:75" pos:end="1399:100"><specifier pos:start="1399:75" pos:end="1399:79">final</specifier> <name pos:start="1399:81" pos:end="1399:87">boolean</name></type> <name pos:start="1399:89" pos:end="1399:100">preserveRoot</name></decl></parameter>)</parameter_list> <block pos:start="1399:103" pos:end="1411:3">{<block_content pos:start="1400:5" pos:end="1410:5">
    <if_stmt pos:start="1400:5" pos:end="1410:5"><if pos:start="1400:5" pos:end="1407:5">if <condition pos:start="1400:8" pos:end="1400:21">(<expr pos:start="1400:9" pos:end="1400:20"><name pos:start="1400:9" pos:end="1400:20">preserveRoot</name></expr>)</condition> <block pos:start="1400:23" pos:end="1407:5">{<block_content pos:start="1401:7" pos:end="1406:9">
      <decl_stmt pos:start="1401:7" pos:end="1401:52"><decl pos:start="1401:7" pos:end="1401:51"><type pos:start="1401:7" pos:end="1401:18"><specifier pos:start="1401:7" pos:end="1401:11">final</specifier> <name pos:start="1401:13" pos:end="1401:18">String</name></type> <name pos:start="1401:20" pos:end="1401:29">parentName</name> <init pos:start="1401:31" pos:end="1401:51">= <expr pos:start="1401:33" pos:end="1401:51"><call pos:start="1401:33" pos:end="1401:51"><name pos:start="1401:33" pos:end="1401:49"><name pos:start="1401:33" pos:end="1401:41">sourceDir</name><operator pos:start="1401:42" pos:end="1401:42">.</operator><name pos:start="1401:43" pos:end="1401:49">getName</name></name><argument_list pos:start="1401:50" pos:end="1401:51">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt pos:start="1402:7" pos:end="1406:9"><expr pos:start="1402:7" pos:end="1406:8"><call pos:start="1402:7" pos:end="1406:8"><name pos:start="1402:7" pos:end="1402:10">pack</name><argument_list pos:start="1402:11" pos:end="1406:8">(<argument pos:start="1402:12" pos:end="1402:20"><expr pos:start="1402:12" pos:end="1402:20"><name pos:start="1402:12" pos:end="1402:20">sourceDir</name></expr></argument>, <argument pos:start="1402:23" pos:end="1402:35"><expr pos:start="1402:23" pos:end="1402:35"><name pos:start="1402:23" pos:end="1402:35">targetZipFile</name></expr></argument>, <argument pos:start="1402:38" pos:end="1406:7"><expr pos:start="1402:38" pos:end="1406:7"><operator pos:start="1402:38" pos:end="1402:40">new</operator> <class pos:start="1402:42" pos:end="1406:7"><super pos:start="1402:42" pos:end="1402:51"><name pos:start="1402:42" pos:end="1402:51">NameMapper</name></super><argument_list pos:start="1402:52" pos:end="1402:53">()</argument_list> <block pos:start="1402:55" pos:end="1406:7">{
        <function pos:start="1403:9" pos:end="1405:9"><type pos:start="1403:9" pos:end="1403:21"><specifier pos:start="1403:9" pos:end="1403:14">public</specifier> <name pos:start="1403:16" pos:end="1403:21">String</name></type> <name pos:start="1403:23" pos:end="1403:25">map</name><parameter_list pos:start="1403:26" pos:end="1403:38">(<parameter pos:start="1403:27" pos:end="1403:37"><decl pos:start="1403:27" pos:end="1403:37"><type pos:start="1403:27" pos:end="1403:32"><name pos:start="1403:27" pos:end="1403:32">String</name></type> <name pos:start="1403:34" pos:end="1403:37">name</name></decl></parameter>)</parameter_list> <block pos:start="1403:40" pos:end="1405:9">{<block_content pos:start="1404:11" pos:end="1404:52">
          <return pos:start="1404:11" pos:end="1404:52">return <expr pos:start="1404:18" pos:end="1404:51"><name pos:start="1404:18" pos:end="1404:27">parentName</name> <operator pos:start="1404:29" pos:end="1404:29">+</operator> <name pos:start="1404:31" pos:end="1404:44">PATH_SEPARATOR</name> <operator pos:start="1404:46" pos:end="1404:46">+</operator> <name pos:start="1404:48" pos:end="1404:51">name</name></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else pos:start="1408:5" pos:end="1410:5">else <block pos:start="1408:10" pos:end="1410:5">{<block_content pos:start="1409:7" pos:end="1409:37">
      <expr_stmt pos:start="1409:7" pos:end="1409:37"><expr pos:start="1409:7" pos:end="1409:36"><call pos:start="1409:7" pos:end="1409:36"><name pos:start="1409:7" pos:end="1409:10">pack</name><argument_list pos:start="1409:11" pos:end="1409:36">(<argument pos:start="1409:12" pos:end="1409:20"><expr pos:start="1409:12" pos:end="1409:20"><name pos:start="1409:12" pos:end="1409:20">sourceDir</name></expr></argument>, <argument pos:start="1409:23" pos:end="1409:35"><expr pos:start="1409:23" pos:end="1409:35"><name pos:start="1409:23" pos:end="1409:35">targetZipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1413:3" pos:end="1422:5">/**
   * Compresses the given file into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param fileToPack
   *          file that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   */</comment>
  <function pos:start="1423:3" pos:end="1425:3"><type pos:start="1423:3" pos:end="1423:20"><specifier pos:start="1423:3" pos:end="1423:8">public</specifier> <specifier pos:start="1423:10" pos:end="1423:15">static</specifier> <name pos:start="1423:17" pos:end="1423:20">void</name></type> <name pos:start="1423:22" pos:end="1423:30">packEntry</name><parameter_list pos:start="1423:31" pos:end="1423:65">(<parameter pos:start="1423:32" pos:end="1423:46"><decl pos:start="1423:32" pos:end="1423:46"><type pos:start="1423:32" pos:end="1423:46"><name pos:start="1423:32" pos:end="1423:35">File</name></type> <name pos:start="1423:37" pos:end="1423:46">fileToPack</name></decl></parameter>, <parameter pos:start="1423:49" pos:end="1423:64"><decl pos:start="1423:49" pos:end="1423:64"><type pos:start="1423:49" pos:end="1423:64"><name pos:start="1423:49" pos:end="1423:52">File</name></type> <name pos:start="1423:54" pos:end="1423:64">destZipFile</name></decl></parameter>)</parameter_list> <block pos:start="1423:67" pos:end="1425:3">{<block_content pos:start="1424:5" pos:end="1424:68">
    <expr_stmt pos:start="1424:5" pos:end="1424:68"><expr pos:start="1424:5" pos:end="1424:67"><call pos:start="1424:5" pos:end="1424:67"><name pos:start="1424:5" pos:end="1424:13">packEntry</name><argument_list pos:start="1424:14" pos:end="1424:67">(<argument pos:start="1424:15" pos:end="1424:24"><expr pos:start="1424:15" pos:end="1424:24"><name pos:start="1424:15" pos:end="1424:24">fileToPack</name></expr></argument>, <argument pos:start="1424:27" pos:end="1424:37"><expr pos:start="1424:27" pos:end="1424:37"><name pos:start="1424:27" pos:end="1424:37">destZipFile</name></expr></argument>, <argument pos:start="1424:40" pos:end="1424:66"><expr pos:start="1424:40" pos:end="1424:66"><name pos:start="1424:40" pos:end="1424:66"><name pos:start="1424:40" pos:end="1424:57">IdentityNameMapper</name><operator pos:start="1424:58" pos:end="1424:58">.</operator><name pos:start="1424:59" pos:end="1424:66">INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1427:3" pos:end="1438:5">/**
   * Compresses the given file into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param fileToPack
   *          file that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   * @param fileName
   *          the name for the file inside the archive
   */</comment>
  <function pos:start="1439:3" pos:end="1445:3"><type pos:start="1439:3" pos:end="1439:20"><specifier pos:start="1439:3" pos:end="1439:8">public</specifier> <specifier pos:start="1439:10" pos:end="1439:15">static</specifier> <name pos:start="1439:17" pos:end="1439:20">void</name></type> <name pos:start="1439:22" pos:end="1439:30">packEntry</name><parameter_list pos:start="1439:31" pos:end="1439:88">(<parameter pos:start="1439:32" pos:end="1439:46"><decl pos:start="1439:32" pos:end="1439:46"><type pos:start="1439:32" pos:end="1439:46"><name pos:start="1439:32" pos:end="1439:35">File</name></type> <name pos:start="1439:37" pos:end="1439:46">fileToPack</name></decl></parameter>, <parameter pos:start="1439:49" pos:end="1439:64"><decl pos:start="1439:49" pos:end="1439:64"><type pos:start="1439:49" pos:end="1439:64"><name pos:start="1439:49" pos:end="1439:52">File</name></type> <name pos:start="1439:54" pos:end="1439:64">destZipFile</name></decl></parameter>, <parameter pos:start="1439:67" pos:end="1439:87"><decl pos:start="1439:67" pos:end="1439:87"><type pos:start="1439:67" pos:end="1439:87"><specifier pos:start="1439:67" pos:end="1439:71">final</specifier> <name pos:start="1439:73" pos:end="1439:78">String</name></type> <name pos:start="1439:80" pos:end="1439:87">fileName</name></decl></parameter>)</parameter_list> <block pos:start="1439:90" pos:end="1445:3">{<block_content pos:start="1440:5" pos:end="1444:7">
    <expr_stmt pos:start="1440:5" pos:end="1444:7"><expr pos:start="1440:5" pos:end="1444:6"><call pos:start="1440:5" pos:end="1444:6"><name pos:start="1440:5" pos:end="1440:13">packEntry</name><argument_list pos:start="1440:14" pos:end="1444:6">(<argument pos:start="1440:15" pos:end="1440:24"><expr pos:start="1440:15" pos:end="1440:24"><name pos:start="1440:15" pos:end="1440:24">fileToPack</name></expr></argument>, <argument pos:start="1440:27" pos:end="1440:37"><expr pos:start="1440:27" pos:end="1440:37"><name pos:start="1440:27" pos:end="1440:37">destZipFile</name></expr></argument>, <argument pos:start="1440:40" pos:end="1444:5"><expr pos:start="1440:40" pos:end="1444:5"><operator pos:start="1440:40" pos:end="1440:42">new</operator> <class pos:start="1440:44" pos:end="1444:5"><super pos:start="1440:44" pos:end="1440:53"><name pos:start="1440:44" pos:end="1440:53">NameMapper</name></super><argument_list pos:start="1440:54" pos:end="1440:55">()</argument_list> <block pos:start="1440:57" pos:end="1444:5">{
      <function pos:start="1441:7" pos:end="1443:7"><type pos:start="1441:7" pos:end="1441:19"><specifier pos:start="1441:7" pos:end="1441:12">public</specifier> <name pos:start="1441:14" pos:end="1441:19">String</name></type> <name pos:start="1441:21" pos:end="1441:23">map</name><parameter_list pos:start="1441:24" pos:end="1441:36">(<parameter pos:start="1441:25" pos:end="1441:35"><decl pos:start="1441:25" pos:end="1441:35"><type pos:start="1441:25" pos:end="1441:30"><name pos:start="1441:25" pos:end="1441:30">String</name></type> <name pos:start="1441:32" pos:end="1441:35">name</name></decl></parameter>)</parameter_list> <block pos:start="1441:38" pos:end="1443:7">{<block_content pos:start="1442:9" pos:end="1442:24">
        <return pos:start="1442:9" pos:end="1442:24">return <expr pos:start="1442:16" pos:end="1442:23"><name pos:start="1442:16" pos:end="1442:23">fileName</name></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1447:3" pos:end="1458:5">/**
   * Compresses the given file into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param fileToPack
   *          file that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="1459:3" pos:end="1461:3"><type pos:start="1459:3" pos:end="1459:20"><specifier pos:start="1459:3" pos:end="1459:8">public</specifier> <specifier pos:start="1459:10" pos:end="1459:15">static</specifier> <name pos:start="1459:17" pos:end="1459:20">void</name></type> <name pos:start="1459:22" pos:end="1459:30">packEntry</name><parameter_list pos:start="1459:31" pos:end="1459:84">(<parameter pos:start="1459:32" pos:end="1459:46"><decl pos:start="1459:32" pos:end="1459:46"><type pos:start="1459:32" pos:end="1459:46"><name pos:start="1459:32" pos:end="1459:35">File</name></type> <name pos:start="1459:37" pos:end="1459:46">fileToPack</name></decl></parameter>, <parameter pos:start="1459:49" pos:end="1459:64"><decl pos:start="1459:49" pos:end="1459:64"><type pos:start="1459:49" pos:end="1459:64"><name pos:start="1459:49" pos:end="1459:52">File</name></type> <name pos:start="1459:54" pos:end="1459:64">destZipFile</name></decl></parameter>, <parameter pos:start="1459:67" pos:end="1459:83"><decl pos:start="1459:67" pos:end="1459:83"><type pos:start="1459:67" pos:end="1459:83"><name pos:start="1459:67" pos:end="1459:76">NameMapper</name></type> <name pos:start="1459:78" pos:end="1459:83">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1459:86" pos:end="1461:3">{<block_content pos:start="1460:5" pos:end="1460:64">
    <expr_stmt pos:start="1460:5" pos:end="1460:64"><expr pos:start="1460:5" pos:end="1460:63"><call pos:start="1460:5" pos:end="1460:63"><name pos:start="1460:5" pos:end="1460:15">packEntries</name><argument_list pos:start="1460:16" pos:end="1460:63">(<argument pos:start="1460:17" pos:end="1460:41"><expr pos:start="1460:17" pos:end="1460:41"><operator pos:start="1460:17" pos:end="1460:19">new</operator> <name pos:start="1460:21" pos:end="1460:26"><name pos:start="1460:21" pos:end="1460:24">File</name><index pos:start="1460:25" pos:end="1460:26">[]</index></name> <block pos:start="1460:28" pos:end="1460:41">{ <expr pos:start="1460:30" pos:end="1460:39"><name pos:start="1460:30" pos:end="1460:39">fileToPack</name></expr> }</block></expr></argument>, <argument pos:start="1460:44" pos:end="1460:54"><expr pos:start="1460:44" pos:end="1460:54"><name pos:start="1460:44" pos:end="1460:54">destZipFile</name></expr></argument>, <argument pos:start="1460:57" pos:end="1460:62"><expr pos:start="1460:57" pos:end="1460:62"><name pos:start="1460:57" pos:end="1460:62">mapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1463:3" pos:end="1472:5">/**
   * Compresses the given files into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param filesToPack
   *          files that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   */</comment>
  <function pos:start="1473:3" pos:end="1475:3"><type pos:start="1473:3" pos:end="1473:20"><specifier pos:start="1473:3" pos:end="1473:8">public</specifier> <specifier pos:start="1473:10" pos:end="1473:15">static</specifier> <name pos:start="1473:17" pos:end="1473:20">void</name></type> <name pos:start="1473:22" pos:end="1473:32">packEntries</name><parameter_list pos:start="1473:33" pos:end="1473:70">(<parameter pos:start="1473:34" pos:end="1473:51"><decl pos:start="1473:34" pos:end="1473:51"><type pos:start="1473:34" pos:end="1473:51"><name pos:start="1473:34" pos:end="1473:39"><name pos:start="1473:34" pos:end="1473:37">File</name><index pos:start="1473:38" pos:end="1473:39">[]</index></name></type> <name pos:start="1473:41" pos:end="1473:51">filesToPack</name></decl></parameter>, <parameter pos:start="1473:54" pos:end="1473:69"><decl pos:start="1473:54" pos:end="1473:69"><type pos:start="1473:54" pos:end="1473:69"><name pos:start="1473:54" pos:end="1473:57">File</name></type> <name pos:start="1473:59" pos:end="1473:69">destZipFile</name></decl></parameter>)</parameter_list> <block pos:start="1473:72" pos:end="1475:3">{<block_content pos:start="1474:5" pos:end="1474:71">
    <expr_stmt pos:start="1474:5" pos:end="1474:71"><expr pos:start="1474:5" pos:end="1474:70"><call pos:start="1474:5" pos:end="1474:70"><name pos:start="1474:5" pos:end="1474:15">packEntries</name><argument_list pos:start="1474:16" pos:end="1474:70">(<argument pos:start="1474:17" pos:end="1474:27"><expr pos:start="1474:17" pos:end="1474:27"><name pos:start="1474:17" pos:end="1474:27">filesToPack</name></expr></argument>, <argument pos:start="1474:30" pos:end="1474:40"><expr pos:start="1474:30" pos:end="1474:40"><name pos:start="1474:30" pos:end="1474:40">destZipFile</name></expr></argument>, <argument pos:start="1474:43" pos:end="1474:69"><expr pos:start="1474:43" pos:end="1474:69"><name pos:start="1474:43" pos:end="1474:69"><name pos:start="1474:43" pos:end="1474:60">IdentityNameMapper</name><operator pos:start="1474:61" pos:end="1474:61">.</operator><name pos:start="1474:62" pos:end="1474:69">INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1477:3" pos:end="1488:5">/**
   * Compresses the given files into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param filesToPack
   *          files that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="1489:3" pos:end="1491:3"><type pos:start="1489:3" pos:end="1489:20"><specifier pos:start="1489:3" pos:end="1489:8">public</specifier> <specifier pos:start="1489:10" pos:end="1489:15">static</specifier> <name pos:start="1489:17" pos:end="1489:20">void</name></type> <name pos:start="1489:22" pos:end="1489:32">packEntries</name><parameter_list pos:start="1489:33" pos:end="1489:89">(<parameter pos:start="1489:34" pos:end="1489:51"><decl pos:start="1489:34" pos:end="1489:51"><type pos:start="1489:34" pos:end="1489:51"><name pos:start="1489:34" pos:end="1489:39"><name pos:start="1489:34" pos:end="1489:37">File</name><index pos:start="1489:38" pos:end="1489:39">[]</index></name></type> <name pos:start="1489:41" pos:end="1489:51">filesToPack</name></decl></parameter>, <parameter pos:start="1489:54" pos:end="1489:69"><decl pos:start="1489:54" pos:end="1489:69"><type pos:start="1489:54" pos:end="1489:69"><name pos:start="1489:54" pos:end="1489:57">File</name></type> <name pos:start="1489:59" pos:end="1489:69">destZipFile</name></decl></parameter>, <parameter pos:start="1489:72" pos:end="1489:88"><decl pos:start="1489:72" pos:end="1489:88"><type pos:start="1489:72" pos:end="1489:88"><name pos:start="1489:72" pos:end="1489:81">NameMapper</name></type> <name pos:start="1489:83" pos:end="1489:88">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1489:91" pos:end="1491:3">{<block_content pos:start="1490:5" pos:end="1490:77">
    <expr_stmt pos:start="1490:5" pos:end="1490:77"><expr pos:start="1490:5" pos:end="1490:76"><call pos:start="1490:5" pos:end="1490:76"><name pos:start="1490:5" pos:end="1490:15">packEntries</name><argument_list pos:start="1490:16" pos:end="1490:76">(<argument pos:start="1490:17" pos:end="1490:27"><expr pos:start="1490:17" pos:end="1490:27"><name pos:start="1490:17" pos:end="1490:27">filesToPack</name></expr></argument>, <argument pos:start="1490:30" pos:end="1490:40"><expr pos:start="1490:30" pos:end="1490:40"><name pos:start="1490:30" pos:end="1490:40">destZipFile</name></expr></argument>, <argument pos:start="1490:43" pos:end="1490:48"><expr pos:start="1490:43" pos:end="1490:48"><name pos:start="1490:43" pos:end="1490:48">mapper</name></expr></argument>, <argument pos:start="1490:51" pos:end="1490:75"><expr pos:start="1490:51" pos:end="1490:75"><name pos:start="1490:51" pos:end="1490:75">DEFAULT_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1493:3" pos:end="1505:5">/**
   * Compresses the given files into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param filesToPack
   *          files that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   * @param compressionLevel
   *          ZIP file compression level (speed versus filesize), e.g. &lt;code&gt;Deflater.NO_COMPRESSION&lt;/code&gt;, &lt;code&gt;Deflater.BEST_SPEED&lt;/code&gt;, or
   *          &lt;code&gt;Deflater.BEST_COMPRESSION&lt;/code&gt;
   */</comment>
  <function pos:start="1506:3" pos:end="1508:3"><type pos:start="1506:3" pos:end="1506:20"><specifier pos:start="1506:3" pos:end="1506:8">public</specifier> <specifier pos:start="1506:10" pos:end="1506:15">static</specifier> <name pos:start="1506:17" pos:end="1506:20">void</name></type> <name pos:start="1506:22" pos:end="1506:32">packEntries</name><parameter_list pos:start="1506:33" pos:end="1506:92">(<parameter pos:start="1506:34" pos:end="1506:51"><decl pos:start="1506:34" pos:end="1506:51"><type pos:start="1506:34" pos:end="1506:51"><name pos:start="1506:34" pos:end="1506:39"><name pos:start="1506:34" pos:end="1506:37">File</name><index pos:start="1506:38" pos:end="1506:39">[]</index></name></type> <name pos:start="1506:41" pos:end="1506:51">filesToPack</name></decl></parameter>, <parameter pos:start="1506:54" pos:end="1506:69"><decl pos:start="1506:54" pos:end="1506:69"><type pos:start="1506:54" pos:end="1506:69"><name pos:start="1506:54" pos:end="1506:57">File</name></type> <name pos:start="1506:59" pos:end="1506:69">destZipFile</name></decl></parameter>, <parameter pos:start="1506:72" pos:end="1506:91"><decl pos:start="1506:72" pos:end="1506:91"><type pos:start="1506:72" pos:end="1506:91"><name pos:start="1506:72" pos:end="1506:74">int</name></type> <name pos:start="1506:76" pos:end="1506:91">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1506:94" pos:end="1508:3">{<block_content pos:start="1507:5" pos:end="1507:89">
    <expr_stmt pos:start="1507:5" pos:end="1507:89"><expr pos:start="1507:5" pos:end="1507:88"><call pos:start="1507:5" pos:end="1507:88"><name pos:start="1507:5" pos:end="1507:15">packEntries</name><argument_list pos:start="1507:16" pos:end="1507:88">(<argument pos:start="1507:17" pos:end="1507:27"><expr pos:start="1507:17" pos:end="1507:27"><name pos:start="1507:17" pos:end="1507:27">filesToPack</name></expr></argument>, <argument pos:start="1507:30" pos:end="1507:40"><expr pos:start="1507:30" pos:end="1507:40"><name pos:start="1507:30" pos:end="1507:40">destZipFile</name></expr></argument>, <argument pos:start="1507:43" pos:end="1507:69"><expr pos:start="1507:43" pos:end="1507:69"><name pos:start="1507:43" pos:end="1507:69"><name pos:start="1507:43" pos:end="1507:60">IdentityNameMapper</name><operator pos:start="1507:61" pos:end="1507:61">.</operator><name pos:start="1507:62" pos:end="1507:69">INSTANCE</name></name></expr></argument>, <argument pos:start="1507:72" pos:end="1507:87"><expr pos:start="1507:72" pos:end="1507:87"><name pos:start="1507:72" pos:end="1507:87">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1510:3" pos:end="1524:5">/**
   * Compresses the given files into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param filesToPack
   *          files that needs to be zipped.
   * @param destZipFile
   *          ZIP file that will be created or overwritten.
   * @param mapper
   *          call-back for renaming the entries.
   * @param compressionLevel
   *          ZIP file compression level (speed versus filesize), e.g. &lt;code&gt;Deflater.NO_COMPRESSION&lt;/code&gt;, &lt;code&gt;Deflater.BEST_SPEED&lt;/code&gt;, or
   *          &lt;code&gt;Deflater.BEST_COMPRESSION&lt;/code&gt;
   */</comment>
  <function pos:start="1525:3" pos:end="1551:3"><type pos:start="1525:3" pos:end="1525:20"><specifier pos:start="1525:3" pos:end="1525:8">public</specifier> <specifier pos:start="1525:10" pos:end="1525:15">static</specifier> <name pos:start="1525:17" pos:end="1525:20">void</name></type> <name pos:start="1525:22" pos:end="1525:32">packEntries</name><parameter_list pos:start="1525:33" pos:end="1525:111">(<parameter pos:start="1525:34" pos:end="1525:51"><decl pos:start="1525:34" pos:end="1525:51"><type pos:start="1525:34" pos:end="1525:51"><name pos:start="1525:34" pos:end="1525:39"><name pos:start="1525:34" pos:end="1525:37">File</name><index pos:start="1525:38" pos:end="1525:39">[]</index></name></type> <name pos:start="1525:41" pos:end="1525:51">filesToPack</name></decl></parameter>, <parameter pos:start="1525:54" pos:end="1525:69"><decl pos:start="1525:54" pos:end="1525:69"><type pos:start="1525:54" pos:end="1525:69"><name pos:start="1525:54" pos:end="1525:57">File</name></type> <name pos:start="1525:59" pos:end="1525:69">destZipFile</name></decl></parameter>, <parameter pos:start="1525:72" pos:end="1525:88"><decl pos:start="1525:72" pos:end="1525:88"><type pos:start="1525:72" pos:end="1525:88"><name pos:start="1525:72" pos:end="1525:81">NameMapper</name></type> <name pos:start="1525:83" pos:end="1525:88">mapper</name></decl></parameter>, <parameter pos:start="1525:91" pos:end="1525:110"><decl pos:start="1525:91" pos:end="1525:110"><type pos:start="1525:91" pos:end="1525:110"><name pos:start="1525:91" pos:end="1525:93">int</name></type> <name pos:start="1525:95" pos:end="1525:110">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1525:113" pos:end="1551:3">{<block_content pos:start="1526:5" pos:end="1550:5">
    <expr_stmt pos:start="1526:5" pos:end="1526:71"><expr pos:start="1526:5" pos:end="1526:70"><call pos:start="1526:5" pos:end="1526:70"><name pos:start="1526:5" pos:end="1526:13"><name pos:start="1526:5" pos:end="1526:7">log</name><operator pos:start="1526:8" pos:end="1526:8">.</operator><name pos:start="1526:9" pos:end="1526:13">debug</name></name><argument_list pos:start="1526:14" pos:end="1526:70">(<argument pos:start="1526:15" pos:end="1526:43"><expr pos:start="1526:15" pos:end="1526:43"><literal type="string" pos:start="1526:15" pos:end="1526:43">"Compressing '{}' into '{}'."</literal></expr></argument>, <argument pos:start="1526:46" pos:end="1526:56"><expr pos:start="1526:46" pos:end="1526:56"><name pos:start="1526:46" pos:end="1526:56">filesToPack</name></expr></argument>, <argument pos:start="1526:59" pos:end="1526:69"><expr pos:start="1526:59" pos:end="1526:69"><name pos:start="1526:59" pos:end="1526:69">destZipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="1528:5" pos:end="1528:31"><decl pos:start="1528:5" pos:end="1528:30"><type pos:start="1528:5" pos:end="1528:19"><name pos:start="1528:5" pos:end="1528:19">ZipOutputStream</name></type> <name pos:start="1528:21" pos:end="1528:23">out</name> <init pos:start="1528:25" pos:end="1528:30">= <expr pos:start="1528:27" pos:end="1528:30"><literal type="null" pos:start="1528:27" pos:end="1528:30">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1529:5" pos:end="1529:32"><decl pos:start="1529:5" pos:end="1529:31"><type pos:start="1529:5" pos:end="1529:20"><name pos:start="1529:5" pos:end="1529:20">FileOutputStream</name></type> <name pos:start="1529:22" pos:end="1529:24">fos</name> <init pos:start="1529:26" pos:end="1529:31">= <expr pos:start="1529:28" pos:end="1529:31"><literal type="null" pos:start="1529:28" pos:end="1529:31">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="1530:5" pos:end="1550:5">try <block pos:start="1530:9" pos:end="1543:5">{<block_content pos:start="1531:7" pos:end="1542:7">
      <expr_stmt pos:start="1531:7" pos:end="1531:46"><expr pos:start="1531:7" pos:end="1531:45"><name pos:start="1531:7" pos:end="1531:9">fos</name> <operator pos:start="1531:11" pos:end="1531:11">=</operator> <operator pos:start="1531:13" pos:end="1531:15">new</operator> <call pos:start="1531:17" pos:end="1531:45"><name pos:start="1531:17" pos:end="1531:32">FileOutputStream</name><argument_list pos:start="1531:33" pos:end="1531:45">(<argument pos:start="1531:34" pos:end="1531:44"><expr pos:start="1531:34" pos:end="1531:44"><name pos:start="1531:34" pos:end="1531:44">destZipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1532:7" pos:end="1532:63"><expr pos:start="1532:7" pos:end="1532:62"><name pos:start="1532:7" pos:end="1532:9">out</name> <operator pos:start="1532:11" pos:end="1532:11">=</operator> <operator pos:start="1532:13" pos:end="1532:15">new</operator> <call pos:start="1532:17" pos:end="1532:62"><name pos:start="1532:17" pos:end="1532:31">ZipOutputStream</name><argument_list pos:start="1532:32" pos:end="1532:62">(<argument pos:start="1532:33" pos:end="1532:61"><expr pos:start="1532:33" pos:end="1532:61"><operator pos:start="1532:33" pos:end="1532:35">new</operator> <call pos:start="1532:37" pos:end="1532:61"><name pos:start="1532:37" pos:end="1532:56">BufferedOutputStream</name><argument_list pos:start="1532:57" pos:end="1532:61">(<argument pos:start="1532:58" pos:end="1532:60"><expr pos:start="1532:58" pos:end="1532:60"><name pos:start="1532:58" pos:end="1532:60">fos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1533:7" pos:end="1533:37"><expr pos:start="1533:7" pos:end="1533:36"><call pos:start="1533:7" pos:end="1533:36"><name pos:start="1533:7" pos:end="1533:18"><name pos:start="1533:7" pos:end="1533:9">out</name><operator pos:start="1533:10" pos:end="1533:10">.</operator><name pos:start="1533:11" pos:end="1533:18">setLevel</name></name><argument_list pos:start="1533:19" pos:end="1533:36">(<argument pos:start="1533:20" pos:end="1533:35"><expr pos:start="1533:20" pos:end="1533:35"><name pos:start="1533:20" pos:end="1533:35">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for pos:start="1535:7" pos:end="1542:7">for <control pos:start="1535:11" pos:end="1535:50">(<init pos:start="1535:12" pos:end="1535:21"><decl pos:start="1535:12" pos:end="1535:20"><type pos:start="1535:12" pos:end="1535:14"><name pos:start="1535:12" pos:end="1535:14">int</name></type> <name pos:start="1535:16" pos:end="1535:16">i</name> <init pos:start="1535:18" pos:end="1535:20">= <expr pos:start="1535:20" pos:end="1535:20"><literal type="number" pos:start="1535:20" pos:end="1535:20">0</literal></expr></init></decl>;</init> <condition pos:start="1535:23" pos:end="1535:45"><expr pos:start="1535:23" pos:end="1535:44"><name pos:start="1535:23" pos:end="1535:23">i</name> <operator pos:start="1535:25" pos:end="1535:25">&lt;</operator> <name pos:start="1535:27" pos:end="1535:44"><name pos:start="1535:27" pos:end="1535:37">filesToPack</name><operator pos:start="1535:38" pos:end="1535:38">.</operator><name pos:start="1535:39" pos:end="1535:44">length</name></name></expr>;</condition> <incr pos:start="1535:47" pos:end="1535:49"><expr pos:start="1535:47" pos:end="1535:49"><name pos:start="1535:47" pos:end="1535:47">i</name><operator pos:start="1535:48" pos:end="1535:49">++</operator></expr></incr>)</control> <block pos:start="1535:52" pos:end="1542:7">{<block_content pos:start="1536:9" pos:end="1541:25">
        <decl_stmt pos:start="1536:9" pos:end="1536:41"><decl pos:start="1536:9" pos:end="1536:40"><type pos:start="1536:9" pos:end="1536:12"><name pos:start="1536:9" pos:end="1536:12">File</name></type> <name pos:start="1536:14" pos:end="1536:23">fileToPack</name> <init pos:start="1536:25" pos:end="1536:40">= <expr pos:start="1536:27" pos:end="1536:40"><name pos:start="1536:27" pos:end="1536:40"><name pos:start="1536:27" pos:end="1536:37">filesToPack</name><index pos:start="1536:38" pos:end="1536:40">[<expr pos:start="1536:39" pos:end="1536:39"><name pos:start="1536:39" pos:end="1536:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="1538:9" pos:end="1538:96"><decl pos:start="1538:9" pos:end="1538:95"><type pos:start="1538:9" pos:end="1538:16"><name pos:start="1538:9" pos:end="1538:16">ZipEntry</name></type> <name pos:start="1538:18" pos:end="1538:25">zipEntry</name> <init pos:start="1538:27" pos:end="1538:95">= <expr pos:start="1538:29" pos:end="1538:95"><call pos:start="1538:29" pos:end="1538:95"><name pos:start="1538:29" pos:end="1538:49"><name pos:start="1538:29" pos:end="1538:40">ZipEntryUtil</name><operator pos:start="1538:41" pos:end="1538:41">.</operator><name pos:start="1538:42" pos:end="1538:49">fromFile</name></name><argument_list pos:start="1538:50" pos:end="1538:95">(<argument pos:start="1538:51" pos:end="1538:82"><expr pos:start="1538:51" pos:end="1538:82"><call pos:start="1538:51" pos:end="1538:82"><name pos:start="1538:51" pos:end="1538:60"><name pos:start="1538:51" pos:end="1538:56">mapper</name><operator pos:start="1538:57" pos:end="1538:57">.</operator><name pos:start="1538:58" pos:end="1538:60">map</name></name><argument_list pos:start="1538:61" pos:end="1538:82">(<argument pos:start="1538:62" pos:end="1538:81"><expr pos:start="1538:62" pos:end="1538:81"><call pos:start="1538:62" pos:end="1538:81"><name pos:start="1538:62" pos:end="1538:79"><name pos:start="1538:62" pos:end="1538:71">fileToPack</name><operator pos:start="1538:72" pos:end="1538:72">.</operator><name pos:start="1538:73" pos:end="1538:79">getName</name></name><argument_list pos:start="1538:80" pos:end="1538:81">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1538:85" pos:end="1538:94"><expr pos:start="1538:85" pos:end="1538:94"><name pos:start="1538:85" pos:end="1538:94">fileToPack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1539:9" pos:end="1539:35"><expr pos:start="1539:9" pos:end="1539:34"><call pos:start="1539:9" pos:end="1539:34"><name pos:start="1539:9" pos:end="1539:24"><name pos:start="1539:9" pos:end="1539:11">out</name><operator pos:start="1539:12" pos:end="1539:12">.</operator><name pos:start="1539:13" pos:end="1539:24">putNextEntry</name></name><argument_list pos:start="1539:25" pos:end="1539:34">(<argument pos:start="1539:26" pos:end="1539:33"><expr pos:start="1539:26" pos:end="1539:33"><name pos:start="1539:26" pos:end="1539:33">zipEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1540:9" pos:end="1540:40"><expr pos:start="1540:9" pos:end="1540:39"><call pos:start="1540:9" pos:end="1540:39"><name pos:start="1540:9" pos:end="1540:22"><name pos:start="1540:9" pos:end="1540:17">FileUtils</name><operator pos:start="1540:18" pos:end="1540:18">.</operator><name pos:start="1540:19" pos:end="1540:22">copy</name></name><argument_list pos:start="1540:23" pos:end="1540:39">(<argument pos:start="1540:24" pos:end="1540:33"><expr pos:start="1540:24" pos:end="1540:33"><name pos:start="1540:24" pos:end="1540:33">fileToPack</name></expr></argument>, <argument pos:start="1540:36" pos:end="1540:38"><expr pos:start="1540:36" pos:end="1540:38"><name pos:start="1540:36" pos:end="1540:38">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1541:9" pos:end="1541:25"><expr pos:start="1541:9" pos:end="1541:24"><call pos:start="1541:9" pos:end="1541:24"><name pos:start="1541:9" pos:end="1541:22"><name pos:start="1541:9" pos:end="1541:11">out</name><operator pos:start="1541:12" pos:end="1541:12">.</operator><name pos:start="1541:13" pos:end="1541:22">closeEntry</name></name><argument_list pos:start="1541:23" pos:end="1541:24">()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block>
    <catch pos:start="1544:5" pos:end="1546:5">catch <parameter_list pos:start="1544:11" pos:end="1544:25">(<parameter pos:start="1544:12" pos:end="1544:24"><decl pos:start="1544:12" pos:end="1544:24"><type pos:start="1544:12" pos:end="1544:24"><name pos:start="1544:12" pos:end="1544:22">IOException</name></type> <name pos:start="1544:24" pos:end="1544:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1544:27" pos:end="1546:5">{<block_content pos:start="1545:7" pos:end="1545:40">
      <throw pos:start="1545:7" pos:end="1545:40">throw <expr pos:start="1545:13" pos:end="1545:39"><call pos:start="1545:13" pos:end="1545:39"><name pos:start="1545:13" pos:end="1545:36"><name pos:start="1545:13" pos:end="1545:28">ZipExceptionUtil</name><operator pos:start="1545:29" pos:end="1545:29">.</operator><name pos:start="1545:30" pos:end="1545:36">rethrow</name></name><argument_list pos:start="1545:37" pos:end="1545:39">(<argument pos:start="1545:38" pos:end="1545:38"><expr pos:start="1545:38" pos:end="1545:38"><name pos:start="1545:38" pos:end="1545:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="1547:5" pos:end="1550:5">finally <block pos:start="1547:13" pos:end="1550:5">{<block_content pos:start="1548:7" pos:end="1549:32">
      <expr_stmt pos:start="1548:7" pos:end="1548:32"><expr pos:start="1548:7" pos:end="1548:31"><call pos:start="1548:7" pos:end="1548:31"><name pos:start="1548:7" pos:end="1548:26"><name pos:start="1548:7" pos:end="1548:13">IOUtils</name><operator pos:start="1548:14" pos:end="1548:14">.</operator><name pos:start="1548:15" pos:end="1548:26">closeQuietly</name></name><argument_list pos:start="1548:27" pos:end="1548:31">(<argument pos:start="1548:28" pos:end="1548:30"><expr pos:start="1548:28" pos:end="1548:30"><name pos:start="1548:28" pos:end="1548:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1549:7" pos:end="1549:32"><expr pos:start="1549:7" pos:end="1549:31"><call pos:start="1549:7" pos:end="1549:31"><name pos:start="1549:7" pos:end="1549:26"><name pos:start="1549:7" pos:end="1549:13">IOUtils</name><operator pos:start="1549:14" pos:end="1549:14">.</operator><name pos:start="1549:15" pos:end="1549:26">closeQuietly</name></name><argument_list pos:start="1549:27" pos:end="1549:31">(<argument pos:start="1549:28" pos:end="1549:30"><expr pos:start="1549:28" pos:end="1549:30"><name pos:start="1549:28" pos:end="1549:30">fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1553:3" pos:end="1564:5">/**
   * Compresses the given directory and all its sub-directories into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param sourceDir
   *          root directory.
   * @param targetZip
   *          ZIP file that will be created or overwritten.
   * @param mapper
   *          call-back for renaming the entries.
   */</comment>
  <function pos:start="1565:3" pos:end="1567:3"><type pos:start="1565:3" pos:end="1565:20"><specifier pos:start="1565:3" pos:end="1565:8">public</specifier> <specifier pos:start="1565:10" pos:end="1565:15">static</specifier> <name pos:start="1565:17" pos:end="1565:20">void</name></type> <name pos:start="1565:22" pos:end="1565:25">pack</name><parameter_list pos:start="1565:26" pos:end="1565:76">(<parameter pos:start="1565:27" pos:end="1565:40"><decl pos:start="1565:27" pos:end="1565:40"><type pos:start="1565:27" pos:end="1565:40"><name pos:start="1565:27" pos:end="1565:30">File</name></type> <name pos:start="1565:32" pos:end="1565:40">sourceDir</name></decl></parameter>, <parameter pos:start="1565:43" pos:end="1565:56"><decl pos:start="1565:43" pos:end="1565:56"><type pos:start="1565:43" pos:end="1565:56"><name pos:start="1565:43" pos:end="1565:46">File</name></type> <name pos:start="1565:48" pos:end="1565:56">targetZip</name></decl></parameter>, <parameter pos:start="1565:59" pos:end="1565:75"><decl pos:start="1565:59" pos:end="1565:75"><type pos:start="1565:59" pos:end="1565:75"><name pos:start="1565:59" pos:end="1565:68">NameMapper</name></type> <name pos:start="1565:70" pos:end="1565:75">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1565:78" pos:end="1567:3">{<block_content pos:start="1566:5" pos:end="1566:66">
    <expr_stmt pos:start="1566:5" pos:end="1566:66"><expr pos:start="1566:5" pos:end="1566:65"><call pos:start="1566:5" pos:end="1566:65"><name pos:start="1566:5" pos:end="1566:8">pack</name><argument_list pos:start="1566:9" pos:end="1566:65">(<argument pos:start="1566:10" pos:end="1566:18"><expr pos:start="1566:10" pos:end="1566:18"><name pos:start="1566:10" pos:end="1566:18">sourceDir</name></expr></argument>, <argument pos:start="1566:21" pos:end="1566:29"><expr pos:start="1566:21" pos:end="1566:29"><name pos:start="1566:21" pos:end="1566:29">targetZip</name></expr></argument>, <argument pos:start="1566:32" pos:end="1566:37"><expr pos:start="1566:32" pos:end="1566:37"><name pos:start="1566:32" pos:end="1566:37">mapper</name></expr></argument>, <argument pos:start="1566:40" pos:end="1566:64"><expr pos:start="1566:40" pos:end="1566:64"><name pos:start="1566:40" pos:end="1566:64">DEFAULT_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1569:3" pos:end="1582:5">/**
   * Compresses the given directory and all its sub-directories into a ZIP file.
   * &lt;p&gt;
   * The ZIP file must not be a directory and its parent directory must exist.
   *
   * @param sourceDir
   *          root directory.
   * @param targetZip
   *          ZIP file that will be created or overwritten.
   * @param mapper
   *          call-back for renaming the entries.
   * @param compressionLevel
   *          compression level
   */</comment>
  <function pos:start="1583:3" pos:end="1600:3"><type pos:start="1583:3" pos:end="1583:20"><specifier pos:start="1583:3" pos:end="1583:8">public</specifier> <specifier pos:start="1583:10" pos:end="1583:15">static</specifier> <name pos:start="1583:17" pos:end="1583:20">void</name></type> <name pos:start="1583:22" pos:end="1583:25">pack</name><parameter_list pos:start="1583:26" pos:end="1583:98">(<parameter pos:start="1583:27" pos:end="1583:40"><decl pos:start="1583:27" pos:end="1583:40"><type pos:start="1583:27" pos:end="1583:40"><name pos:start="1583:27" pos:end="1583:30">File</name></type> <name pos:start="1583:32" pos:end="1583:40">sourceDir</name></decl></parameter>, <parameter pos:start="1583:43" pos:end="1583:56"><decl pos:start="1583:43" pos:end="1583:56"><type pos:start="1583:43" pos:end="1583:56"><name pos:start="1583:43" pos:end="1583:46">File</name></type> <name pos:start="1583:48" pos:end="1583:56">targetZip</name></decl></parameter>, <parameter pos:start="1583:59" pos:end="1583:75"><decl pos:start="1583:59" pos:end="1583:75"><type pos:start="1583:59" pos:end="1583:75"><name pos:start="1583:59" pos:end="1583:68">NameMapper</name></type> <name pos:start="1583:70" pos:end="1583:75">mapper</name></decl></parameter>, <parameter pos:start="1583:78" pos:end="1583:97"><decl pos:start="1583:78" pos:end="1583:97"><type pos:start="1583:78" pos:end="1583:97"><name pos:start="1583:78" pos:end="1583:80">int</name></type> <name pos:start="1583:82" pos:end="1583:97">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1583:100" pos:end="1600:3">{<block_content pos:start="1584:5" pos:end="1599:5">
    <expr_stmt pos:start="1584:5" pos:end="1584:67"><expr pos:start="1584:5" pos:end="1584:66"><call pos:start="1584:5" pos:end="1584:66"><name pos:start="1584:5" pos:end="1584:13"><name pos:start="1584:5" pos:end="1584:7">log</name><operator pos:start="1584:8" pos:end="1584:8">.</operator><name pos:start="1584:9" pos:end="1584:13">debug</name></name><argument_list pos:start="1584:14" pos:end="1584:66">(<argument pos:start="1584:15" pos:end="1584:43"><expr pos:start="1584:15" pos:end="1584:43"><literal type="string" pos:start="1584:15" pos:end="1584:43">"Compressing '{}' into '{}'."</literal></expr></argument>, <argument pos:start="1584:46" pos:end="1584:54"><expr pos:start="1584:46" pos:end="1584:54"><name pos:start="1584:46" pos:end="1584:54">sourceDir</name></expr></argument>, <argument pos:start="1584:57" pos:end="1584:65"><expr pos:start="1584:57" pos:end="1584:65"><name pos:start="1584:57" pos:end="1584:65">targetZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1585:5" pos:end="1587:5"><if pos:start="1585:5" pos:end="1587:5">if <condition pos:start="1585:8" pos:end="1585:28">(<expr pos:start="1585:9" pos:end="1585:27"><operator pos:start="1585:9" pos:end="1585:9">!</operator><call pos:start="1585:10" pos:end="1585:27"><name pos:start="1585:10" pos:end="1585:25"><name pos:start="1585:10" pos:end="1585:18">sourceDir</name><operator pos:start="1585:19" pos:end="1585:19">.</operator><name pos:start="1585:20" pos:end="1585:25">exists</name></name><argument_list pos:start="1585:26" pos:end="1585:27">()</argument_list></call></expr>)</condition> <block pos:start="1585:30" pos:end="1587:5">{<block_content pos:start="1586:7" pos:end="1586:78">
      <throw pos:start="1586:7" pos:end="1586:78">throw <expr pos:start="1586:13" pos:end="1586:77"><operator pos:start="1586:13" pos:end="1586:15">new</operator> <call pos:start="1586:17" pos:end="1586:77"><name pos:start="1586:17" pos:end="1586:28">ZipException</name><argument_list pos:start="1586:29" pos:end="1586:77">(<argument pos:start="1586:30" pos:end="1586:76"><expr pos:start="1586:30" pos:end="1586:76"><literal type="string" pos:start="1586:30" pos:end="1586:43">"Given file '"</literal> <operator pos:start="1586:45" pos:end="1586:45">+</operator> <name pos:start="1586:47" pos:end="1586:55">sourceDir</name> <operator pos:start="1586:57" pos:end="1586:57">+</operator> <literal type="string" pos:start="1586:59" pos:end="1586:76">"' doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="1588:5" pos:end="1588:31"><decl pos:start="1588:5" pos:end="1588:30"><type pos:start="1588:5" pos:end="1588:19"><name pos:start="1588:5" pos:end="1588:19">ZipOutputStream</name></type> <name pos:start="1588:21" pos:end="1588:23">out</name> <init pos:start="1588:25" pos:end="1588:30">= <expr pos:start="1588:27" pos:end="1588:30"><literal type="null" pos:start="1588:27" pos:end="1588:30">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="1589:5" pos:end="1599:5">try <block pos:start="1589:9" pos:end="1593:5">{<block_content pos:start="1590:7" pos:end="1592:45">
      <expr_stmt pos:start="1590:7" pos:end="1590:91"><expr pos:start="1590:7" pos:end="1590:90"><name pos:start="1590:7" pos:end="1590:9">out</name> <operator pos:start="1590:11" pos:end="1590:11">=</operator> <operator pos:start="1590:13" pos:end="1590:15">new</operator> <call pos:start="1590:17" pos:end="1590:90"><name pos:start="1590:17" pos:end="1590:31">ZipOutputStream</name><argument_list pos:start="1590:32" pos:end="1590:90">(<argument pos:start="1590:33" pos:end="1590:89"><expr pos:start="1590:33" pos:end="1590:89"><operator pos:start="1590:33" pos:end="1590:35">new</operator> <call pos:start="1590:37" pos:end="1590:89"><name pos:start="1590:37" pos:end="1590:56">BufferedOutputStream</name><argument_list pos:start="1590:57" pos:end="1590:89">(<argument pos:start="1590:58" pos:end="1590:88"><expr pos:start="1590:58" pos:end="1590:88"><operator pos:start="1590:58" pos:end="1590:60">new</operator> <call pos:start="1590:62" pos:end="1590:88"><name pos:start="1590:62" pos:end="1590:77">FileOutputStream</name><argument_list pos:start="1590:78" pos:end="1590:88">(<argument pos:start="1590:79" pos:end="1590:87"><expr pos:start="1590:79" pos:end="1590:87"><name pos:start="1590:79" pos:end="1590:87">targetZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1591:7" pos:end="1591:37"><expr pos:start="1591:7" pos:end="1591:36"><call pos:start="1591:7" pos:end="1591:36"><name pos:start="1591:7" pos:end="1591:18"><name pos:start="1591:7" pos:end="1591:9">out</name><operator pos:start="1591:10" pos:end="1591:10">.</operator><name pos:start="1591:11" pos:end="1591:18">setLevel</name></name><argument_list pos:start="1591:19" pos:end="1591:36">(<argument pos:start="1591:20" pos:end="1591:35"><expr pos:start="1591:20" pos:end="1591:35"><name pos:start="1591:20" pos:end="1591:35">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1592:7" pos:end="1592:45"><expr pos:start="1592:7" pos:end="1592:44"><call pos:start="1592:7" pos:end="1592:44"><name pos:start="1592:7" pos:end="1592:10">pack</name><argument_list pos:start="1592:11" pos:end="1592:44">(<argument pos:start="1592:12" pos:end="1592:20"><expr pos:start="1592:12" pos:end="1592:20"><name pos:start="1592:12" pos:end="1592:20">sourceDir</name></expr></argument>, <argument pos:start="1592:23" pos:end="1592:25"><expr pos:start="1592:23" pos:end="1592:25"><name pos:start="1592:23" pos:end="1592:25">out</name></expr></argument>, <argument pos:start="1592:28" pos:end="1592:33"><expr pos:start="1592:28" pos:end="1592:33"><name pos:start="1592:28" pos:end="1592:33">mapper</name></expr></argument>, <argument pos:start="1592:36" pos:end="1592:37"><expr pos:start="1592:36" pos:end="1592:37"><literal type="string" pos:start="1592:36" pos:end="1592:37">""</literal></expr></argument>, <argument pos:start="1592:40" pos:end="1592:43"><expr pos:start="1592:40" pos:end="1592:43"><literal type="boolean" pos:start="1592:40" pos:end="1592:43">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="1594:5" pos:end="1596:5">catch <parameter_list pos:start="1594:11" pos:end="1594:25">(<parameter pos:start="1594:12" pos:end="1594:24"><decl pos:start="1594:12" pos:end="1594:24"><type pos:start="1594:12" pos:end="1594:24"><name pos:start="1594:12" pos:end="1594:22">IOException</name></type> <name pos:start="1594:24" pos:end="1594:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1594:27" pos:end="1596:5">{<block_content pos:start="1595:7" pos:end="1595:40">
      <throw pos:start="1595:7" pos:end="1595:40">throw <expr pos:start="1595:13" pos:end="1595:39"><call pos:start="1595:13" pos:end="1595:39"><name pos:start="1595:13" pos:end="1595:36"><name pos:start="1595:13" pos:end="1595:28">ZipExceptionUtil</name><operator pos:start="1595:29" pos:end="1595:29">.</operator><name pos:start="1595:30" pos:end="1595:36">rethrow</name></name><argument_list pos:start="1595:37" pos:end="1595:39">(<argument pos:start="1595:38" pos:end="1595:38"><expr pos:start="1595:38" pos:end="1595:38"><name pos:start="1595:38" pos:end="1595:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="1597:5" pos:end="1599:5">finally <block pos:start="1597:13" pos:end="1599:5">{<block_content pos:start="1598:7" pos:end="1598:32">
      <expr_stmt pos:start="1598:7" pos:end="1598:32"><expr pos:start="1598:7" pos:end="1598:31"><call pos:start="1598:7" pos:end="1598:31"><name pos:start="1598:7" pos:end="1598:26"><name pos:start="1598:7" pos:end="1598:13">IOUtils</name><operator pos:start="1598:14" pos:end="1598:14">.</operator><name pos:start="1598:15" pos:end="1598:26">closeQuietly</name></name><argument_list pos:start="1598:27" pos:end="1598:31">(<argument pos:start="1598:28" pos:end="1598:30"><expr pos:start="1598:28" pos:end="1598:30"><name pos:start="1598:28" pos:end="1598:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1602:3" pos:end="1613:5">/**
   * Compresses the given directory and all of its sub-directories into the passed in
   * stream. It is the responsibility of the caller to close the passed in
   * stream properly.
   *
   * @param sourceDir
   *          root directory.
   * @param os
   *          output stream (will be buffered in this method).
   *
   * @since 1.10
   */</comment>
  <function pos:start="1614:3" pos:end="1616:3"><type pos:start="1614:3" pos:end="1614:20"><specifier pos:start="1614:3" pos:end="1614:8">public</specifier> <specifier pos:start="1614:10" pos:end="1614:15">static</specifier> <name pos:start="1614:17" pos:end="1614:20">void</name></type> <name pos:start="1614:22" pos:end="1614:25">pack</name><parameter_list pos:start="1614:26" pos:end="1614:58">(<parameter pos:start="1614:27" pos:end="1614:40"><decl pos:start="1614:27" pos:end="1614:40"><type pos:start="1614:27" pos:end="1614:40"><name pos:start="1614:27" pos:end="1614:30">File</name></type> <name pos:start="1614:32" pos:end="1614:40">sourceDir</name></decl></parameter>, <parameter pos:start="1614:43" pos:end="1614:57"><decl pos:start="1614:43" pos:end="1614:57"><type pos:start="1614:43" pos:end="1614:57"><name pos:start="1614:43" pos:end="1614:54">OutputStream</name></type> <name pos:start="1614:56" pos:end="1614:57">os</name></decl></parameter>)</parameter_list> <block pos:start="1614:60" pos:end="1616:3">{<block_content pos:start="1615:5" pos:end="1615:80">
    <expr_stmt pos:start="1615:5" pos:end="1615:80"><expr pos:start="1615:5" pos:end="1615:79"><call pos:start="1615:5" pos:end="1615:79"><name pos:start="1615:5" pos:end="1615:8">pack</name><argument_list pos:start="1615:9" pos:end="1615:79">(<argument pos:start="1615:10" pos:end="1615:18"><expr pos:start="1615:10" pos:end="1615:18"><name pos:start="1615:10" pos:end="1615:18">sourceDir</name></expr></argument>, <argument pos:start="1615:21" pos:end="1615:22"><expr pos:start="1615:21" pos:end="1615:22"><name pos:start="1615:21" pos:end="1615:22">os</name></expr></argument>, <argument pos:start="1615:25" pos:end="1615:51"><expr pos:start="1615:25" pos:end="1615:51"><name pos:start="1615:25" pos:end="1615:51"><name pos:start="1615:25" pos:end="1615:42">IdentityNameMapper</name><operator pos:start="1615:43" pos:end="1615:43">.</operator><name pos:start="1615:44" pos:end="1615:51">INSTANCE</name></name></expr></argument>, <argument pos:start="1615:54" pos:end="1615:78"><expr pos:start="1615:54" pos:end="1615:78"><name pos:start="1615:54" pos:end="1615:78">DEFAULT_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1618:3" pos:end="1631:5">/**
   * Compresses the given directory and all of its sub-directories into the passed in
   * stream. It is the responsibility of the caller to close the passed in
   * stream properly.
   *
   * @param sourceDir
   *          root directory.
   * @param os
   *          output stream (will be buffered in this method).
   * @param compressionLevel
   *          compression level
   *
   * @since 1.10
   */</comment>
  <function pos:start="1632:3" pos:end="1634:3"><type pos:start="1632:3" pos:end="1632:20"><specifier pos:start="1632:3" pos:end="1632:8">public</specifier> <specifier pos:start="1632:10" pos:end="1632:15">static</specifier> <name pos:start="1632:17" pos:end="1632:20">void</name></type> <name pos:start="1632:22" pos:end="1632:25">pack</name><parameter_list pos:start="1632:26" pos:end="1632:80">(<parameter pos:start="1632:27" pos:end="1632:40"><decl pos:start="1632:27" pos:end="1632:40"><type pos:start="1632:27" pos:end="1632:40"><name pos:start="1632:27" pos:end="1632:30">File</name></type> <name pos:start="1632:32" pos:end="1632:40">sourceDir</name></decl></parameter>, <parameter pos:start="1632:43" pos:end="1632:57"><decl pos:start="1632:43" pos:end="1632:57"><type pos:start="1632:43" pos:end="1632:57"><name pos:start="1632:43" pos:end="1632:54">OutputStream</name></type> <name pos:start="1632:56" pos:end="1632:57">os</name></decl></parameter>, <parameter pos:start="1632:60" pos:end="1632:79"><decl pos:start="1632:60" pos:end="1632:79"><type pos:start="1632:60" pos:end="1632:79"><name pos:start="1632:60" pos:end="1632:62">int</name></type> <name pos:start="1632:64" pos:end="1632:79">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1632:82" pos:end="1634:3">{<block_content pos:start="1633:5" pos:end="1633:71">
    <expr_stmt pos:start="1633:5" pos:end="1633:71"><expr pos:start="1633:5" pos:end="1633:70"><call pos:start="1633:5" pos:end="1633:70"><name pos:start="1633:5" pos:end="1633:8">pack</name><argument_list pos:start="1633:9" pos:end="1633:70">(<argument pos:start="1633:10" pos:end="1633:18"><expr pos:start="1633:10" pos:end="1633:18"><name pos:start="1633:10" pos:end="1633:18">sourceDir</name></expr></argument>, <argument pos:start="1633:21" pos:end="1633:22"><expr pos:start="1633:21" pos:end="1633:22"><name pos:start="1633:21" pos:end="1633:22">os</name></expr></argument>, <argument pos:start="1633:25" pos:end="1633:51"><expr pos:start="1633:25" pos:end="1633:51"><name pos:start="1633:25" pos:end="1633:51"><name pos:start="1633:25" pos:end="1633:42">IdentityNameMapper</name><operator pos:start="1633:43" pos:end="1633:43">.</operator><name pos:start="1633:44" pos:end="1633:51">INSTANCE</name></name></expr></argument>, <argument pos:start="1633:54" pos:end="1633:69"><expr pos:start="1633:54" pos:end="1633:69"><name pos:start="1633:54" pos:end="1633:69">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1636:3" pos:end="1649:5">/**
   * Compresses the given directory and all of its sub-directories into the passed in
   * stream. It is the responsibility of the caller to close the passed in
   * stream properly.
   *
   * @param sourceDir
   *          root directory.
   * @param os
   *          output stream (will be buffered in this method).
   * @param mapper
   *          call-back for renaming the entries.
   *
   * @since 1.10
   */</comment>
  <function pos:start="1650:3" pos:end="1652:3"><type pos:start="1650:3" pos:end="1650:20"><specifier pos:start="1650:3" pos:end="1650:8">public</specifier> <specifier pos:start="1650:10" pos:end="1650:15">static</specifier> <name pos:start="1650:17" pos:end="1650:20">void</name></type> <name pos:start="1650:22" pos:end="1650:25">pack</name><parameter_list pos:start="1650:26" pos:end="1650:77">(<parameter pos:start="1650:27" pos:end="1650:40"><decl pos:start="1650:27" pos:end="1650:40"><type pos:start="1650:27" pos:end="1650:40"><name pos:start="1650:27" pos:end="1650:30">File</name></type> <name pos:start="1650:32" pos:end="1650:40">sourceDir</name></decl></parameter>, <parameter pos:start="1650:43" pos:end="1650:57"><decl pos:start="1650:43" pos:end="1650:57"><type pos:start="1650:43" pos:end="1650:57"><name pos:start="1650:43" pos:end="1650:54">OutputStream</name></type> <name pos:start="1650:56" pos:end="1650:57">os</name></decl></parameter>, <parameter pos:start="1650:60" pos:end="1650:76"><decl pos:start="1650:60" pos:end="1650:76"><type pos:start="1650:60" pos:end="1650:76"><name pos:start="1650:60" pos:end="1650:69">NameMapper</name></type> <name pos:start="1650:71" pos:end="1650:76">mapper</name></decl></parameter>)</parameter_list> <block pos:start="1650:79" pos:end="1652:3">{<block_content pos:start="1651:5" pos:end="1651:59">
    <expr_stmt pos:start="1651:5" pos:end="1651:59"><expr pos:start="1651:5" pos:end="1651:58"><call pos:start="1651:5" pos:end="1651:58"><name pos:start="1651:5" pos:end="1651:8">pack</name><argument_list pos:start="1651:9" pos:end="1651:58">(<argument pos:start="1651:10" pos:end="1651:18"><expr pos:start="1651:10" pos:end="1651:18"><name pos:start="1651:10" pos:end="1651:18">sourceDir</name></expr></argument>, <argument pos:start="1651:21" pos:end="1651:22"><expr pos:start="1651:21" pos:end="1651:22"><name pos:start="1651:21" pos:end="1651:22">os</name></expr></argument>, <argument pos:start="1651:25" pos:end="1651:30"><expr pos:start="1651:25" pos:end="1651:30"><name pos:start="1651:25" pos:end="1651:30">mapper</name></expr></argument>, <argument pos:start="1651:33" pos:end="1651:57"><expr pos:start="1651:33" pos:end="1651:57"><name pos:start="1651:33" pos:end="1651:57">DEFAULT_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1654:3" pos:end="1669:5">/**
   * Compresses the given directory and all of its sub-directories into the passed in
   * stream. It is the responsibility of the caller to close the passed in
   * stream properly.
   *
   * @param sourceDir
   *          root directory.
   * @param os
   *          output stream (will be buffered in this method).
   * @param mapper
   *          call-back for renaming the entries.
   * @param compressionLevel
   *          compression level
   *
   * @since 1.10
   */</comment>
  <function pos:start="1670:3" pos:end="1699:3"><type pos:start="1670:3" pos:end="1670:20"><specifier pos:start="1670:3" pos:end="1670:8">public</specifier> <specifier pos:start="1670:10" pos:end="1670:15">static</specifier> <name pos:start="1670:17" pos:end="1670:20">void</name></type> <name pos:start="1670:22" pos:end="1670:25">pack</name><parameter_list pos:start="1670:26" pos:end="1670:99">(<parameter pos:start="1670:27" pos:end="1670:40"><decl pos:start="1670:27" pos:end="1670:40"><type pos:start="1670:27" pos:end="1670:40"><name pos:start="1670:27" pos:end="1670:30">File</name></type> <name pos:start="1670:32" pos:end="1670:40">sourceDir</name></decl></parameter>, <parameter pos:start="1670:43" pos:end="1670:57"><decl pos:start="1670:43" pos:end="1670:57"><type pos:start="1670:43" pos:end="1670:57"><name pos:start="1670:43" pos:end="1670:54">OutputStream</name></type> <name pos:start="1670:56" pos:end="1670:57">os</name></decl></parameter>, <parameter pos:start="1670:60" pos:end="1670:76"><decl pos:start="1670:60" pos:end="1670:76"><type pos:start="1670:60" pos:end="1670:76"><name pos:start="1670:60" pos:end="1670:69">NameMapper</name></type> <name pos:start="1670:71" pos:end="1670:76">mapper</name></decl></parameter>, <parameter pos:start="1670:79" pos:end="1670:98"><decl pos:start="1670:79" pos:end="1670:98"><type pos:start="1670:79" pos:end="1670:98"><name pos:start="1670:79" pos:end="1670:81">int</name></type> <name pos:start="1670:83" pos:end="1670:98">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1670:101" pos:end="1699:3">{<block_content pos:start="1671:5" pos:end="1698:5">
    <expr_stmt pos:start="1671:5" pos:end="1671:60"><expr pos:start="1671:5" pos:end="1671:59"><call pos:start="1671:5" pos:end="1671:59"><name pos:start="1671:5" pos:end="1671:13"><name pos:start="1671:5" pos:end="1671:7">log</name><operator pos:start="1671:8" pos:end="1671:8">.</operator><name pos:start="1671:9" pos:end="1671:13">debug</name></name><argument_list pos:start="1671:14" pos:end="1671:59">(<argument pos:start="1671:15" pos:end="1671:47"><expr pos:start="1671:15" pos:end="1671:47"><literal type="string" pos:start="1671:15" pos:end="1671:47">"Compressing '{}' into a stream."</literal></expr></argument>, <argument pos:start="1671:50" pos:end="1671:58"><expr pos:start="1671:50" pos:end="1671:58"><name pos:start="1671:50" pos:end="1671:58">sourceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1672:5" pos:end="1674:5"><if pos:start="1672:5" pos:end="1674:5">if <condition pos:start="1672:8" pos:end="1672:28">(<expr pos:start="1672:9" pos:end="1672:27"><operator pos:start="1672:9" pos:end="1672:9">!</operator><call pos:start="1672:10" pos:end="1672:27"><name pos:start="1672:10" pos:end="1672:25"><name pos:start="1672:10" pos:end="1672:18">sourceDir</name><operator pos:start="1672:19" pos:end="1672:19">.</operator><name pos:start="1672:20" pos:end="1672:25">exists</name></name><argument_list pos:start="1672:26" pos:end="1672:27">()</argument_list></call></expr>)</condition> <block pos:start="1672:30" pos:end="1674:5">{<block_content pos:start="1673:7" pos:end="1673:78">
      <throw pos:start="1673:7" pos:end="1673:78">throw <expr pos:start="1673:13" pos:end="1673:77"><operator pos:start="1673:13" pos:end="1673:15">new</operator> <call pos:start="1673:17" pos:end="1673:77"><name pos:start="1673:17" pos:end="1673:28">ZipException</name><argument_list pos:start="1673:29" pos:end="1673:77">(<argument pos:start="1673:30" pos:end="1673:76"><expr pos:start="1673:30" pos:end="1673:76"><literal type="string" pos:start="1673:30" pos:end="1673:43">"Given file '"</literal> <operator pos:start="1673:45" pos:end="1673:45">+</operator> <name pos:start="1673:47" pos:end="1673:55">sourceDir</name> <operator pos:start="1673:57" pos:end="1673:57">+</operator> <literal type="string" pos:start="1673:59" pos:end="1673:76">"' doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="1675:5" pos:end="1675:31"><decl pos:start="1675:5" pos:end="1675:30"><type pos:start="1675:5" pos:end="1675:19"><name pos:start="1675:5" pos:end="1675:19">ZipOutputStream</name></type> <name pos:start="1675:21" pos:end="1675:23">out</name> <init pos:start="1675:25" pos:end="1675:30">= <expr pos:start="1675:27" pos:end="1675:30"><literal type="null" pos:start="1675:27" pos:end="1675:30">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1676:5" pos:end="1676:29"><decl pos:start="1676:5" pos:end="1676:28"><type pos:start="1676:5" pos:end="1676:15"><name pos:start="1676:5" pos:end="1676:15">IOException</name></type> <name pos:start="1676:17" pos:end="1676:21">error</name> <init pos:start="1676:23" pos:end="1676:28">= <expr pos:start="1676:25" pos:end="1676:28"><literal type="null" pos:start="1676:25" pos:end="1676:28">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="1677:5" pos:end="1695:5">try <block pos:start="1677:9" pos:end="1681:5">{<block_content pos:start="1678:7" pos:end="1680:45">
      <expr_stmt pos:start="1678:7" pos:end="1678:62"><expr pos:start="1678:7" pos:end="1678:61"><name pos:start="1678:7" pos:end="1678:9">out</name> <operator pos:start="1678:11" pos:end="1678:11">=</operator> <operator pos:start="1678:13" pos:end="1678:15">new</operator> <call pos:start="1678:17" pos:end="1678:61"><name pos:start="1678:17" pos:end="1678:31">ZipOutputStream</name><argument_list pos:start="1678:32" pos:end="1678:61">(<argument pos:start="1678:33" pos:end="1678:60"><expr pos:start="1678:33" pos:end="1678:60"><operator pos:start="1678:33" pos:end="1678:35">new</operator> <call pos:start="1678:37" pos:end="1678:60"><name pos:start="1678:37" pos:end="1678:56">BufferedOutputStream</name><argument_list pos:start="1678:57" pos:end="1678:60">(<argument pos:start="1678:58" pos:end="1678:59"><expr pos:start="1678:58" pos:end="1678:59"><name pos:start="1678:58" pos:end="1678:59">os</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1679:7" pos:end="1679:37"><expr pos:start="1679:7" pos:end="1679:36"><call pos:start="1679:7" pos:end="1679:36"><name pos:start="1679:7" pos:end="1679:18"><name pos:start="1679:7" pos:end="1679:9">out</name><operator pos:start="1679:10" pos:end="1679:10">.</operator><name pos:start="1679:11" pos:end="1679:18">setLevel</name></name><argument_list pos:start="1679:19" pos:end="1679:36">(<argument pos:start="1679:20" pos:end="1679:35"><expr pos:start="1679:20" pos:end="1679:35"><name pos:start="1679:20" pos:end="1679:35">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1680:7" pos:end="1680:45"><expr pos:start="1680:7" pos:end="1680:44"><call pos:start="1680:7" pos:end="1680:44"><name pos:start="1680:7" pos:end="1680:10">pack</name><argument_list pos:start="1680:11" pos:end="1680:44">(<argument pos:start="1680:12" pos:end="1680:20"><expr pos:start="1680:12" pos:end="1680:20"><name pos:start="1680:12" pos:end="1680:20">sourceDir</name></expr></argument>, <argument pos:start="1680:23" pos:end="1680:25"><expr pos:start="1680:23" pos:end="1680:25"><name pos:start="1680:23" pos:end="1680:25">out</name></expr></argument>, <argument pos:start="1680:28" pos:end="1680:33"><expr pos:start="1680:28" pos:end="1680:33"><name pos:start="1680:28" pos:end="1680:33">mapper</name></expr></argument>, <argument pos:start="1680:36" pos:end="1680:37"><expr pos:start="1680:36" pos:end="1680:37"><literal type="string" pos:start="1680:36" pos:end="1680:37">""</literal></expr></argument>, <argument pos:start="1680:40" pos:end="1680:43"><expr pos:start="1680:40" pos:end="1680:43"><literal type="boolean" pos:start="1680:40" pos:end="1680:43">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="1682:5" pos:end="1684:5">catch <parameter_list pos:start="1682:11" pos:end="1682:25">(<parameter pos:start="1682:12" pos:end="1682:24"><decl pos:start="1682:12" pos:end="1682:24"><type pos:start="1682:12" pos:end="1682:24"><name pos:start="1682:12" pos:end="1682:22">IOException</name></type> <name pos:start="1682:24" pos:end="1682:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1682:27" pos:end="1684:5">{<block_content pos:start="1683:7" pos:end="1683:16">
      <expr_stmt pos:start="1683:7" pos:end="1683:16"><expr pos:start="1683:7" pos:end="1683:15"><name pos:start="1683:7" pos:end="1683:11">error</name> <operator pos:start="1683:13" pos:end="1683:13">=</operator> <name pos:start="1683:15" pos:end="1683:15">e</name></expr>;</expr_stmt>
    </block_content>}</block></catch>
    <finally pos:start="1685:5" pos:end="1695:5">finally <block pos:start="1685:13" pos:end="1695:5">{<block_content pos:start="1686:7" pos:end="1694:7">
      <if_stmt pos:start="1686:7" pos:end="1694:7"><if pos:start="1686:7" pos:end="1694:7">if <condition pos:start="1686:10" pos:end="1686:39">(<expr pos:start="1686:11" pos:end="1686:38"><name pos:start="1686:11" pos:end="1686:13">out</name> <operator pos:start="1686:15" pos:end="1686:16">!=</operator> <literal type="null" pos:start="1686:18" pos:end="1686:21">null</literal> <operator pos:start="1686:23" pos:end="1686:24">&amp;&amp;</operator> <name pos:start="1686:26" pos:end="1686:30">error</name> <operator pos:start="1686:32" pos:end="1686:33">==</operator> <literal type="null" pos:start="1686:35" pos:end="1686:38">null</literal></expr>)</condition> <block pos:start="1686:41" pos:end="1694:7">{<block_content pos:start="1687:9" pos:end="1693:9">
        <try pos:start="1687:9" pos:end="1693:9">try <block pos:start="1687:13" pos:end="1690:9">{<block_content pos:start="1688:11" pos:end="1689:22">
          <expr_stmt pos:start="1688:11" pos:end="1688:23"><expr pos:start="1688:11" pos:end="1688:22"><call pos:start="1688:11" pos:end="1688:22"><name pos:start="1688:11" pos:end="1688:20"><name pos:start="1688:11" pos:end="1688:13">out</name><operator pos:start="1688:14" pos:end="1688:14">.</operator><name pos:start="1688:15" pos:end="1688:20">finish</name></name><argument_list pos:start="1688:21" pos:end="1688:22">()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt pos:start="1689:11" pos:end="1689:22"><expr pos:start="1689:11" pos:end="1689:21"><call pos:start="1689:11" pos:end="1689:21"><name pos:start="1689:11" pos:end="1689:19"><name pos:start="1689:11" pos:end="1689:13">out</name><operator pos:start="1689:14" pos:end="1689:14">.</operator><name pos:start="1689:15" pos:end="1689:19">flush</name></name><argument_list pos:start="1689:20" pos:end="1689:21">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch pos:start="1691:9" pos:end="1693:9">catch <parameter_list pos:start="1691:15" pos:end="1691:29">(<parameter pos:start="1691:16" pos:end="1691:28"><decl pos:start="1691:16" pos:end="1691:28"><type pos:start="1691:16" pos:end="1691:28"><name pos:start="1691:16" pos:end="1691:26">IOException</name></type> <name pos:start="1691:28" pos:end="1691:28">e</name></decl></parameter>)</parameter_list> <block pos:start="1691:31" pos:end="1693:9">{<block_content pos:start="1692:11" pos:end="1692:20">
          <expr_stmt pos:start="1692:11" pos:end="1692:20"><expr pos:start="1692:11" pos:end="1692:19"><name pos:start="1692:11" pos:end="1692:15">error</name> <operator pos:start="1692:17" pos:end="1692:17">=</operator> <name pos:start="1692:19" pos:end="1692:19">e</name></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></finally></try>
    <if_stmt pos:start="1696:5" pos:end="1698:5"><if pos:start="1696:5" pos:end="1698:5">if <condition pos:start="1696:8" pos:end="1696:22">(<expr pos:start="1696:9" pos:end="1696:21"><name pos:start="1696:9" pos:end="1696:13">error</name> <operator pos:start="1696:15" pos:end="1696:16">!=</operator> <literal type="null" pos:start="1696:18" pos:end="1696:21">null</literal></expr>)</condition> <block pos:start="1696:24" pos:end="1698:5">{<block_content pos:start="1697:7" pos:end="1697:44">
      <throw pos:start="1697:7" pos:end="1697:44">throw <expr pos:start="1697:13" pos:end="1697:43"><call pos:start="1697:13" pos:end="1697:43"><name pos:start="1697:13" pos:end="1697:36"><name pos:start="1697:13" pos:end="1697:28">ZipExceptionUtil</name><operator pos:start="1697:29" pos:end="1697:29">.</operator><name pos:start="1697:30" pos:end="1697:36">rethrow</name></name><argument_list pos:start="1697:37" pos:end="1697:43">(<argument pos:start="1697:38" pos:end="1697:42"><expr pos:start="1697:38" pos:end="1697:42"><name pos:start="1697:38" pos:end="1697:42">error</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1701:3" pos:end="1714:5">/**
   * Compresses the given directory and all its sub-directories into a ZIP file.
   *
   * @param dir
   *          root directory.
   * @param out
   *          ZIP output stream.
   * @param mapper
   *          call-back for renaming the entries.
   * @param pathPrefix
   *          prefix to be used for the entries.
   * @param mustHaveChildren
   *          if true, but directory to pack doesn't have any files, throw an exception.
   */</comment>
  <function pos:start="1715:3" pos:end="1757:3"><type pos:start="1715:3" pos:end="1715:21"><specifier pos:start="1715:3" pos:end="1715:9">private</specifier> <specifier pos:start="1715:11" pos:end="1715:16">static</specifier> <name pos:start="1715:18" pos:end="1715:21">void</name></type> <name pos:start="1715:23" pos:end="1715:26">pack</name><parameter_list pos:start="1715:27" pos:end="1715:121">(<parameter pos:start="1715:28" pos:end="1715:35"><decl pos:start="1715:28" pos:end="1715:35"><type pos:start="1715:28" pos:end="1715:35"><name pos:start="1715:28" pos:end="1715:31">File</name></type> <name pos:start="1715:33" pos:end="1715:35">dir</name></decl></parameter>, <parameter pos:start="1715:38" pos:end="1715:56"><decl pos:start="1715:38" pos:end="1715:56"><type pos:start="1715:38" pos:end="1715:56"><name pos:start="1715:38" pos:end="1715:52">ZipOutputStream</name></type> <name pos:start="1715:54" pos:end="1715:56">out</name></decl></parameter>, <parameter pos:start="1715:59" pos:end="1715:75"><decl pos:start="1715:59" pos:end="1715:75"><type pos:start="1715:59" pos:end="1715:75"><name pos:start="1715:59" pos:end="1715:68">NameMapper</name></type> <name pos:start="1715:70" pos:end="1715:75">mapper</name></decl></parameter>, <parameter pos:start="1715:78" pos:end="1715:94"><decl pos:start="1715:78" pos:end="1715:94"><type pos:start="1715:78" pos:end="1715:94"><name pos:start="1715:78" pos:end="1715:83">String</name></type> <name pos:start="1715:85" pos:end="1715:94">pathPrefix</name></decl></parameter>, <parameter pos:start="1715:97" pos:end="1715:120"><decl pos:start="1715:97" pos:end="1715:120"><type pos:start="1715:97" pos:end="1715:120"><name pos:start="1715:97" pos:end="1715:103">boolean</name></type> <name pos:start="1715:105" pos:end="1715:120">mustHaveChildren</name></decl></parameter>)</parameter_list> <throws pos:start="1715:123" pos:end="1715:140">throws <argument pos:start="1715:130" pos:end="1715:140"><expr pos:start="1715:130" pos:end="1715:140"><name pos:start="1715:130" pos:end="1715:140">IOException</name></expr></argument></throws> <block pos:start="1715:142" pos:end="1757:3">{<block_content pos:start="1716:5" pos:end="1756:5">
    <decl_stmt pos:start="1716:5" pos:end="1716:36"><decl pos:start="1716:5" pos:end="1716:35"><type pos:start="1716:5" pos:end="1716:12"><name pos:start="1716:5" pos:end="1716:12"><name pos:start="1716:5" pos:end="1716:10">String</name><index pos:start="1716:11" pos:end="1716:12">[]</index></name></type> <name pos:start="1716:14" pos:end="1716:22">filenames</name> <init pos:start="1716:24" pos:end="1716:35">= <expr pos:start="1716:26" pos:end="1716:35"><call pos:start="1716:26" pos:end="1716:35"><name pos:start="1716:26" pos:end="1716:33"><name pos:start="1716:26" pos:end="1716:28">dir</name><operator pos:start="1716:29" pos:end="1716:29">.</operator><name pos:start="1716:30" pos:end="1716:33">list</name></name><argument_list pos:start="1716:34" pos:end="1716:35">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="1717:5" pos:end="1722:5"><if pos:start="1717:5" pos:end="1722:5">if <condition pos:start="1717:8" pos:end="1717:26">(<expr pos:start="1717:9" pos:end="1717:25"><name pos:start="1717:9" pos:end="1717:17">filenames</name> <operator pos:start="1717:19" pos:end="1717:20">==</operator> <literal type="null" pos:start="1717:22" pos:end="1717:25">null</literal></expr>)</condition> <block pos:start="1717:28" pos:end="1722:5">{<block_content pos:start="1718:7" pos:end="1721:75">
      <if_stmt pos:start="1718:7" pos:end="1720:7"><if pos:start="1718:7" pos:end="1720:7">if <condition pos:start="1718:10" pos:end="1718:24">(<expr pos:start="1718:11" pos:end="1718:23"><operator pos:start="1718:11" pos:end="1718:11">!</operator><call pos:start="1718:12" pos:end="1718:23"><name pos:start="1718:12" pos:end="1718:21"><name pos:start="1718:12" pos:end="1718:14">dir</name><operator pos:start="1718:15" pos:end="1718:15">.</operator><name pos:start="1718:16" pos:end="1718:21">exists</name></name><argument_list pos:start="1718:22" pos:end="1718:23">()</argument_list></call></expr>)</condition> <block pos:start="1718:26" pos:end="1720:7">{<block_content pos:start="1719:9" pos:end="1719:74">
        <throw pos:start="1719:9" pos:end="1719:74">throw <expr pos:start="1719:15" pos:end="1719:73"><operator pos:start="1719:15" pos:end="1719:17">new</operator> <call pos:start="1719:19" pos:end="1719:73"><name pos:start="1719:19" pos:end="1719:30">ZipException</name><argument_list pos:start="1719:31" pos:end="1719:73">(<argument pos:start="1719:32" pos:end="1719:72"><expr pos:start="1719:32" pos:end="1719:72"><literal type="string" pos:start="1719:32" pos:end="1719:45">"Given file '"</literal> <operator pos:start="1719:47" pos:end="1719:47">+</operator> <name pos:start="1719:49" pos:end="1719:51">dir</name> <operator pos:start="1719:53" pos:end="1719:53">+</operator> <literal type="string" pos:start="1719:55" pos:end="1719:72">"' doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <throw pos:start="1721:7" pos:end="1721:75">throw <expr pos:start="1721:13" pos:end="1721:74"><operator pos:start="1721:13" pos:end="1721:15">new</operator> <call pos:start="1721:17" pos:end="1721:74"><name pos:start="1721:17" pos:end="1721:27">IOException</name><argument_list pos:start="1721:28" pos:end="1721:74">(<argument pos:start="1721:29" pos:end="1721:73"><expr pos:start="1721:29" pos:end="1721:73"><literal type="string" pos:start="1721:29" pos:end="1721:61">"Given file is not a directory '"</literal> <operator pos:start="1721:63" pos:end="1721:63">+</operator> <name pos:start="1721:65" pos:end="1721:67">dir</name> <operator pos:start="1721:69" pos:end="1721:69">+</operator> <literal type="string" pos:start="1721:71" pos:end="1721:73">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1724:5" pos:end="1726:5"><if pos:start="1724:5" pos:end="1726:5">if <condition pos:start="1724:8" pos:end="1724:50">(<expr pos:start="1724:9" pos:end="1724:49"><name pos:start="1724:9" pos:end="1724:24">mustHaveChildren</name> <operator pos:start="1724:26" pos:end="1724:27">&amp;&amp;</operator> <name pos:start="1724:29" pos:end="1724:44"><name pos:start="1724:29" pos:end="1724:37">filenames</name><operator pos:start="1724:38" pos:end="1724:38">.</operator><name pos:start="1724:39" pos:end="1724:44">length</name></name> <operator pos:start="1724:46" pos:end="1724:47">==</operator> <literal type="number" pos:start="1724:49" pos:end="1724:49">0</literal></expr>)</condition> <block pos:start="1724:52" pos:end="1726:5">{<block_content pos:start="1725:7" pos:end="1725:89">
      <throw pos:start="1725:7" pos:end="1725:89">throw <expr pos:start="1725:13" pos:end="1725:88"><operator pos:start="1725:13" pos:end="1725:15">new</operator> <call pos:start="1725:17" pos:end="1725:88"><name pos:start="1725:17" pos:end="1725:28">ZipException</name><argument_list pos:start="1725:29" pos:end="1725:88">(<argument pos:start="1725:30" pos:end="1725:87"><expr pos:start="1725:30" pos:end="1725:87"><literal type="string" pos:start="1725:30" pos:end="1725:48">"Given directory '"</literal> <operator pos:start="1725:50" pos:end="1725:50">+</operator> <name pos:start="1725:52" pos:end="1725:54">dir</name> <operator pos:start="1725:56" pos:end="1725:56">+</operator> <literal type="string" pos:start="1725:58" pos:end="1725:87">"' doesn't contain any files!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <for pos:start="1728:5" pos:end="1756:5">for <control pos:start="1728:9" pos:end="1728:46">(<init pos:start="1728:10" pos:end="1728:19"><decl pos:start="1728:10" pos:end="1728:18"><type pos:start="1728:10" pos:end="1728:12"><name pos:start="1728:10" pos:end="1728:12">int</name></type> <name pos:start="1728:14" pos:end="1728:14">i</name> <init pos:start="1728:16" pos:end="1728:18">= <expr pos:start="1728:18" pos:end="1728:18"><literal type="number" pos:start="1728:18" pos:end="1728:18">0</literal></expr></init></decl>;</init> <condition pos:start="1728:21" pos:end="1728:41"><expr pos:start="1728:21" pos:end="1728:40"><name pos:start="1728:21" pos:end="1728:21">i</name> <operator pos:start="1728:23" pos:end="1728:23">&lt;</operator> <name pos:start="1728:25" pos:end="1728:40"><name pos:start="1728:25" pos:end="1728:33">filenames</name><operator pos:start="1728:34" pos:end="1728:34">.</operator><name pos:start="1728:35" pos:end="1728:40">length</name></name></expr>;</condition> <incr pos:start="1728:43" pos:end="1728:45"><expr pos:start="1728:43" pos:end="1728:45"><name pos:start="1728:43" pos:end="1728:43">i</name><operator pos:start="1728:44" pos:end="1728:45">++</operator></expr></incr>)</control> <block pos:start="1728:48" pos:end="1756:5">{<block_content pos:start="1729:7" pos:end="1755:7">
      <decl_stmt pos:start="1729:7" pos:end="1729:37"><decl pos:start="1729:7" pos:end="1729:36"><type pos:start="1729:7" pos:end="1729:12"><name pos:start="1729:7" pos:end="1729:12">String</name></type> <name pos:start="1729:14" pos:end="1729:21">filename</name> <init pos:start="1729:23" pos:end="1729:36">= <expr pos:start="1729:25" pos:end="1729:36"><name pos:start="1729:25" pos:end="1729:36"><name pos:start="1729:25" pos:end="1729:33">filenames</name><index pos:start="1729:34" pos:end="1729:36">[<expr pos:start="1729:35" pos:end="1729:35"><name pos:start="1729:35" pos:end="1729:35">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="1730:7" pos:end="1730:42"><decl pos:start="1730:7" pos:end="1730:41"><type pos:start="1730:7" pos:end="1730:10"><name pos:start="1730:7" pos:end="1730:10">File</name></type> <name pos:start="1730:12" pos:end="1730:15">file</name> <init pos:start="1730:17" pos:end="1730:41">= <expr pos:start="1730:19" pos:end="1730:41"><operator pos:start="1730:19" pos:end="1730:21">new</operator> <call pos:start="1730:23" pos:end="1730:41"><name pos:start="1730:23" pos:end="1730:26">File</name><argument_list pos:start="1730:27" pos:end="1730:41">(<argument pos:start="1730:28" pos:end="1730:30"><expr pos:start="1730:28" pos:end="1730:30"><name pos:start="1730:28" pos:end="1730:30">dir</name></expr></argument>, <argument pos:start="1730:33" pos:end="1730:40"><expr pos:start="1730:33" pos:end="1730:40"><name pos:start="1730:33" pos:end="1730:40">filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="1731:7" pos:end="1731:41"><decl pos:start="1731:7" pos:end="1731:40"><type pos:start="1731:7" pos:end="1731:13"><name pos:start="1731:7" pos:end="1731:13">boolean</name></type> <name pos:start="1731:15" pos:end="1731:19">isDir</name> <init pos:start="1731:21" pos:end="1731:40">= <expr pos:start="1731:23" pos:end="1731:40"><call pos:start="1731:23" pos:end="1731:40"><name pos:start="1731:23" pos:end="1731:38"><name pos:start="1731:23" pos:end="1731:26">file</name><operator pos:start="1731:27" pos:end="1731:27">.</operator><name pos:start="1731:28" pos:end="1731:38">isDirectory</name></name><argument_list pos:start="1731:39" pos:end="1731:40">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="1732:7" pos:end="1732:48"><decl pos:start="1732:7" pos:end="1732:47"><type pos:start="1732:7" pos:end="1732:12"><name pos:start="1732:7" pos:end="1732:12">String</name></type> <name pos:start="1732:14" pos:end="1732:17">path</name> <init pos:start="1732:19" pos:end="1732:47">= <expr pos:start="1732:21" pos:end="1732:47"><name pos:start="1732:21" pos:end="1732:30">pathPrefix</name> <operator pos:start="1732:32" pos:end="1732:32">+</operator> <call pos:start="1732:34" pos:end="1732:47"><name pos:start="1732:34" pos:end="1732:45"><name pos:start="1732:34" pos:end="1732:37">file</name><operator pos:start="1732:38" pos:end="1732:38">.</operator><name pos:start="1732:39" pos:end="1732:45">getName</name></name><argument_list pos:start="1732:46" pos:end="1732:47">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="1732:50" pos:end="1732:59">// NOSONAR</comment>
      <if_stmt pos:start="1733:7" pos:end="1735:7"><if pos:start="1733:7" pos:end="1735:7">if <condition pos:start="1733:10" pos:end="1733:16">(<expr pos:start="1733:11" pos:end="1733:15"><name pos:start="1733:11" pos:end="1733:15">isDir</name></expr>)</condition> <block pos:start="1733:18" pos:end="1735:7">{<block_content pos:start="1734:9" pos:end="1734:31">
        <expr_stmt pos:start="1734:9" pos:end="1734:31"><expr pos:start="1734:9" pos:end="1734:30"><name pos:start="1734:9" pos:end="1734:12">path</name> <operator pos:start="1734:14" pos:end="1734:15">+=</operator> <name pos:start="1734:17" pos:end="1734:30">PATH_SEPARATOR</name></expr>;</expr_stmt> <comment type="line" pos:start="1734:33" pos:end="1734:42">// NOSONAR</comment>
      </block_content>}</block></if></if_stmt>

      <comment type="line" pos:start="1737:7" pos:end="1737:27">// Create a ZIP entry</comment>
      <decl_stmt pos:start="1738:7" pos:end="1738:37"><decl pos:start="1738:7" pos:end="1738:36"><type pos:start="1738:7" pos:end="1738:12"><name pos:start="1738:7" pos:end="1738:12">String</name></type> <name pos:start="1738:14" pos:end="1738:17">name</name> <init pos:start="1738:19" pos:end="1738:36">= <expr pos:start="1738:21" pos:end="1738:36"><call pos:start="1738:21" pos:end="1738:36"><name pos:start="1738:21" pos:end="1738:30"><name pos:start="1738:21" pos:end="1738:26">mapper</name><operator pos:start="1738:27" pos:end="1738:27">.</operator><name pos:start="1738:28" pos:end="1738:30">map</name></name><argument_list pos:start="1738:31" pos:end="1738:36">(<argument pos:start="1738:32" pos:end="1738:35"><expr pos:start="1738:32" pos:end="1738:35"><name pos:start="1738:32" pos:end="1738:35">path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="1739:7" pos:end="1750:7"><if pos:start="1739:7" pos:end="1750:7">if <condition pos:start="1739:10" pos:end="1739:23">(<expr pos:start="1739:11" pos:end="1739:22"><name pos:start="1739:11" pos:end="1739:14">name</name> <operator pos:start="1739:16" pos:end="1739:17">!=</operator> <literal type="null" pos:start="1739:19" pos:end="1739:22">null</literal></expr>)</condition> <block pos:start="1739:25" pos:end="1750:7">{<block_content pos:start="1740:9" pos:end="1749:25">
        <decl_stmt pos:start="1740:9" pos:end="1740:62"><decl pos:start="1740:9" pos:end="1740:61"><type pos:start="1740:9" pos:end="1740:16"><name pos:start="1740:9" pos:end="1740:16">ZipEntry</name></type> <name pos:start="1740:18" pos:end="1740:25">zipEntry</name> <init pos:start="1740:27" pos:end="1740:61">= <expr pos:start="1740:29" pos:end="1740:61"><call pos:start="1740:29" pos:end="1740:61"><name pos:start="1740:29" pos:end="1740:49"><name pos:start="1740:29" pos:end="1740:40">ZipEntryUtil</name><operator pos:start="1740:41" pos:end="1740:41">.</operator><name pos:start="1740:42" pos:end="1740:49">fromFile</name></name><argument_list pos:start="1740:50" pos:end="1740:61">(<argument pos:start="1740:51" pos:end="1740:54"><expr pos:start="1740:51" pos:end="1740:54"><name pos:start="1740:51" pos:end="1740:54">name</name></expr></argument>, <argument pos:start="1740:57" pos:end="1740:60"><expr pos:start="1740:57" pos:end="1740:60"><name pos:start="1740:57" pos:end="1740:60">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="1742:9" pos:end="1742:35"><expr pos:start="1742:9" pos:end="1742:34"><call pos:start="1742:9" pos:end="1742:34"><name pos:start="1742:9" pos:end="1742:24"><name pos:start="1742:9" pos:end="1742:11">out</name><operator pos:start="1742:12" pos:end="1742:12">.</operator><name pos:start="1742:13" pos:end="1742:24">putNextEntry</name></name><argument_list pos:start="1742:25" pos:end="1742:34">(<argument pos:start="1742:26" pos:end="1742:33"><expr pos:start="1742:26" pos:end="1742:33"><name pos:start="1742:26" pos:end="1742:33">zipEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="1744:9" pos:end="1744:32">// Copy the file content</comment>
        <if_stmt pos:start="1745:9" pos:end="1747:9"><if pos:start="1745:9" pos:end="1747:9">if <condition pos:start="1745:12" pos:end="1745:19">(<expr pos:start="1745:13" pos:end="1745:18"><operator pos:start="1745:13" pos:end="1745:13">!</operator><name pos:start="1745:14" pos:end="1745:18">isDir</name></expr>)</condition> <block pos:start="1745:21" pos:end="1747:9">{<block_content pos:start="1746:11" pos:end="1746:36">
          <expr_stmt pos:start="1746:11" pos:end="1746:36"><expr pos:start="1746:11" pos:end="1746:35"><call pos:start="1746:11" pos:end="1746:35"><name pos:start="1746:11" pos:end="1746:24"><name pos:start="1746:11" pos:end="1746:19">FileUtils</name><operator pos:start="1746:20" pos:end="1746:20">.</operator><name pos:start="1746:21" pos:end="1746:24">copy</name></name><argument_list pos:start="1746:25" pos:end="1746:35">(<argument pos:start="1746:26" pos:end="1746:29"><expr pos:start="1746:26" pos:end="1746:29"><name pos:start="1746:26" pos:end="1746:29">file</name></expr></argument>, <argument pos:start="1746:32" pos:end="1746:34"><expr pos:start="1746:32" pos:end="1746:34"><name pos:start="1746:32" pos:end="1746:34">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1749:9" pos:end="1749:25"><expr pos:start="1749:9" pos:end="1749:24"><call pos:start="1749:9" pos:end="1749:24"><name pos:start="1749:9" pos:end="1749:22"><name pos:start="1749:9" pos:end="1749:11">out</name><operator pos:start="1749:12" pos:end="1749:12">.</operator><name pos:start="1749:13" pos:end="1749:22">closeEntry</name></name><argument_list pos:start="1749:23" pos:end="1749:24">()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line" pos:start="1752:7" pos:end="1752:31">// Traverse the directory</comment>
      <if_stmt pos:start="1753:7" pos:end="1755:7"><if pos:start="1753:7" pos:end="1755:7">if <condition pos:start="1753:10" pos:end="1753:16">(<expr pos:start="1753:11" pos:end="1753:15"><name pos:start="1753:11" pos:end="1753:15">isDir</name></expr>)</condition> <block pos:start="1753:18" pos:end="1755:7">{<block_content pos:start="1754:9" pos:end="1754:45">
        <expr_stmt pos:start="1754:9" pos:end="1754:45"><expr pos:start="1754:9" pos:end="1754:44"><call pos:start="1754:9" pos:end="1754:44"><name pos:start="1754:9" pos:end="1754:12">pack</name><argument_list pos:start="1754:13" pos:end="1754:44">(<argument pos:start="1754:14" pos:end="1754:17"><expr pos:start="1754:14" pos:end="1754:17"><name pos:start="1754:14" pos:end="1754:17">file</name></expr></argument>, <argument pos:start="1754:20" pos:end="1754:22"><expr pos:start="1754:20" pos:end="1754:22"><name pos:start="1754:20" pos:end="1754:22">out</name></expr></argument>, <argument pos:start="1754:25" pos:end="1754:30"><expr pos:start="1754:25" pos:end="1754:30"><name pos:start="1754:25" pos:end="1754:30">mapper</name></expr></argument>, <argument pos:start="1754:33" pos:end="1754:36"><expr pos:start="1754:33" pos:end="1754:36"><name pos:start="1754:33" pos:end="1754:36">path</name></expr></argument>, <argument pos:start="1754:39" pos:end="1754:43"><expr pos:start="1754:39" pos:end="1754:43"><literal type="boolean" pos:start="1754:39" pos:end="1754:43">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1759:3" pos:end="1769:5">/**
   * Repacks a provided ZIP file into a new ZIP with a given compression level.
   * &lt;p&gt;
   *
   * @param srcZip
   *          source ZIP file.
   * @param dstZip
   *          destination ZIP file.
   * @param compressionLevel
   *          compression level.
   */</comment>
  <function pos:start="1770:3" pos:end="1782:3"><type pos:start="1770:3" pos:end="1770:20"><specifier pos:start="1770:3" pos:end="1770:8">public</specifier> <specifier pos:start="1770:10" pos:end="1770:15">static</specifier> <name pos:start="1770:17" pos:end="1770:20">void</name></type> <name pos:start="1770:22" pos:end="1770:27">repack</name><parameter_list pos:start="1770:28" pos:end="1770:75">(<parameter pos:start="1770:29" pos:end="1770:39"><decl pos:start="1770:29" pos:end="1770:39"><type pos:start="1770:29" pos:end="1770:39"><name pos:start="1770:29" pos:end="1770:32">File</name></type> <name pos:start="1770:34" pos:end="1770:39">srcZip</name></decl></parameter>, <parameter pos:start="1770:42" pos:end="1770:52"><decl pos:start="1770:42" pos:end="1770:52"><type pos:start="1770:42" pos:end="1770:52"><name pos:start="1770:42" pos:end="1770:45">File</name></type> <name pos:start="1770:47" pos:end="1770:52">dstZip</name></decl></parameter>, <parameter pos:start="1770:55" pos:end="1770:74"><decl pos:start="1770:55" pos:end="1770:74"><type pos:start="1770:55" pos:end="1770:74"><name pos:start="1770:55" pos:end="1770:57">int</name></type> <name pos:start="1770:59" pos:end="1770:74">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1770:77" pos:end="1782:3">{<block_content pos:start="1772:5" pos:end="1781:5">

    <expr_stmt pos:start="1772:5" pos:end="1772:59"><expr pos:start="1772:5" pos:end="1772:58"><call pos:start="1772:5" pos:end="1772:58"><name pos:start="1772:5" pos:end="1772:13"><name pos:start="1772:5" pos:end="1772:7">log</name><operator pos:start="1772:8" pos:end="1772:8">.</operator><name pos:start="1772:9" pos:end="1772:13">debug</name></name><argument_list pos:start="1772:14" pos:end="1772:58">(<argument pos:start="1772:15" pos:end="1772:41"><expr pos:start="1772:15" pos:end="1772:41"><literal type="string" pos:start="1772:15" pos:end="1772:41">"Repacking '{}' into '{}'."</literal></expr></argument>, <argument pos:start="1772:44" pos:end="1772:49"><expr pos:start="1772:44" pos:end="1772:49"><name pos:start="1772:44" pos:end="1772:49">srcZip</name></expr></argument>, <argument pos:start="1772:52" pos:end="1772:57"><expr pos:start="1772:52" pos:end="1772:57"><name pos:start="1772:52" pos:end="1772:57">dstZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="1774:5" pos:end="1774:91"><decl pos:start="1774:5" pos:end="1774:90"><type pos:start="1774:5" pos:end="1774:26"><name pos:start="1774:5" pos:end="1774:26">RepackZipEntryCallback</name></type> <name pos:start="1774:28" pos:end="1774:35">callback</name> <init pos:start="1774:37" pos:end="1774:90">= <expr pos:start="1774:39" pos:end="1774:90"><operator pos:start="1774:39" pos:end="1774:41">new</operator> <call pos:start="1774:43" pos:end="1774:90"><name pos:start="1774:43" pos:end="1774:64">RepackZipEntryCallback</name><argument_list pos:start="1774:65" pos:end="1774:90">(<argument pos:start="1774:66" pos:end="1774:71"><expr pos:start="1774:66" pos:end="1774:71"><name pos:start="1774:66" pos:end="1774:71">dstZip</name></expr></argument>, <argument pos:start="1774:74" pos:end="1774:89"><expr pos:start="1774:74" pos:end="1774:89"><name pos:start="1774:74" pos:end="1774:89">compressionLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try pos:start="1776:5" pos:end="1781:5">try <block pos:start="1776:9" pos:end="1778:5">{<block_content pos:start="1777:7" pos:end="1777:32">
      <expr_stmt pos:start="1777:7" pos:end="1777:32"><expr pos:start="1777:7" pos:end="1777:31"><call pos:start="1777:7" pos:end="1777:31"><name pos:start="1777:7" pos:end="1777:13">iterate</name><argument_list pos:start="1777:14" pos:end="1777:31">(<argument pos:start="1777:15" pos:end="1777:20"><expr pos:start="1777:15" pos:end="1777:20"><name pos:start="1777:15" pos:end="1777:20">srcZip</name></expr></argument>, <argument pos:start="1777:23" pos:end="1777:30"><expr pos:start="1777:23" pos:end="1777:30"><name pos:start="1777:23" pos:end="1777:30">callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <finally pos:start="1779:5" pos:end="1781:5">finally <block pos:start="1779:13" pos:end="1781:5">{<block_content pos:start="1780:7" pos:end="1780:29">
      <expr_stmt pos:start="1780:7" pos:end="1780:29"><expr pos:start="1780:7" pos:end="1780:28"><call pos:start="1780:7" pos:end="1780:28"><name pos:start="1780:7" pos:end="1780:26"><name pos:start="1780:7" pos:end="1780:14">callback</name><operator pos:start="1780:15" pos:end="1780:15">.</operator><name pos:start="1780:16" pos:end="1780:26">closeStream</name></name><argument_list pos:start="1780:27" pos:end="1780:28">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1784:3" pos:end="1794:5">/**
   * Repacks a provided ZIP input stream into a ZIP file with a given compression level.
   * &lt;p&gt;
   *
   * @param is
   *          ZIP input stream.
   * @param dstZip
   *          destination ZIP file.
   * @param compressionLevel
   *          compression level.
   */</comment>
  <function pos:start="1795:3" pos:end="1807:3"><type pos:start="1795:3" pos:end="1795:20"><specifier pos:start="1795:3" pos:end="1795:8">public</specifier> <specifier pos:start="1795:10" pos:end="1795:15">static</specifier> <name pos:start="1795:17" pos:end="1795:20">void</name></type> <name pos:start="1795:22" pos:end="1795:27">repack</name><parameter_list pos:start="1795:28" pos:end="1795:78">(<parameter pos:start="1795:29" pos:end="1795:42"><decl pos:start="1795:29" pos:end="1795:42"><type pos:start="1795:29" pos:end="1795:42"><name pos:start="1795:29" pos:end="1795:39">InputStream</name></type> <name pos:start="1795:41" pos:end="1795:42">is</name></decl></parameter>, <parameter pos:start="1795:45" pos:end="1795:55"><decl pos:start="1795:45" pos:end="1795:55"><type pos:start="1795:45" pos:end="1795:55"><name pos:start="1795:45" pos:end="1795:48">File</name></type> <name pos:start="1795:50" pos:end="1795:55">dstZip</name></decl></parameter>, <parameter pos:start="1795:58" pos:end="1795:77"><decl pos:start="1795:58" pos:end="1795:77"><type pos:start="1795:58" pos:end="1795:77"><name pos:start="1795:58" pos:end="1795:60">int</name></type> <name pos:start="1795:62" pos:end="1795:77">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1795:80" pos:end="1807:3">{<block_content pos:start="1797:5" pos:end="1806:5">

    <expr_stmt pos:start="1797:5" pos:end="1797:64"><expr pos:start="1797:5" pos:end="1797:63"><call pos:start="1797:5" pos:end="1797:63"><name pos:start="1797:5" pos:end="1797:13"><name pos:start="1797:5" pos:end="1797:7">log</name><operator pos:start="1797:8" pos:end="1797:8">.</operator><name pos:start="1797:9" pos:end="1797:13">debug</name></name><argument_list pos:start="1797:14" pos:end="1797:63">(<argument pos:start="1797:15" pos:end="1797:54"><expr pos:start="1797:15" pos:end="1797:54"><literal type="string" pos:start="1797:15" pos:end="1797:54">"Repacking from input stream into '{}'."</literal></expr></argument>, <argument pos:start="1797:57" pos:end="1797:62"><expr pos:start="1797:57" pos:end="1797:62"><name pos:start="1797:57" pos:end="1797:62">dstZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="1799:5" pos:end="1799:91"><decl pos:start="1799:5" pos:end="1799:90"><type pos:start="1799:5" pos:end="1799:26"><name pos:start="1799:5" pos:end="1799:26">RepackZipEntryCallback</name></type> <name pos:start="1799:28" pos:end="1799:35">callback</name> <init pos:start="1799:37" pos:end="1799:90">= <expr pos:start="1799:39" pos:end="1799:90"><operator pos:start="1799:39" pos:end="1799:41">new</operator> <call pos:start="1799:43" pos:end="1799:90"><name pos:start="1799:43" pos:end="1799:64">RepackZipEntryCallback</name><argument_list pos:start="1799:65" pos:end="1799:90">(<argument pos:start="1799:66" pos:end="1799:71"><expr pos:start="1799:66" pos:end="1799:71"><name pos:start="1799:66" pos:end="1799:71">dstZip</name></expr></argument>, <argument pos:start="1799:74" pos:end="1799:89"><expr pos:start="1799:74" pos:end="1799:89"><name pos:start="1799:74" pos:end="1799:89">compressionLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try pos:start="1801:5" pos:end="1806:5">try <block pos:start="1801:9" pos:end="1803:5">{<block_content pos:start="1802:7" pos:end="1802:28">
      <expr_stmt pos:start="1802:7" pos:end="1802:28"><expr pos:start="1802:7" pos:end="1802:27"><call pos:start="1802:7" pos:end="1802:27"><name pos:start="1802:7" pos:end="1802:13">iterate</name><argument_list pos:start="1802:14" pos:end="1802:27">(<argument pos:start="1802:15" pos:end="1802:16"><expr pos:start="1802:15" pos:end="1802:16"><name pos:start="1802:15" pos:end="1802:16">is</name></expr></argument>, <argument pos:start="1802:19" pos:end="1802:26"><expr pos:start="1802:19" pos:end="1802:26"><name pos:start="1802:19" pos:end="1802:26">callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <finally pos:start="1804:5" pos:end="1806:5">finally <block pos:start="1804:13" pos:end="1806:5">{<block_content pos:start="1805:7" pos:end="1805:29">
      <expr_stmt pos:start="1805:7" pos:end="1805:29"><expr pos:start="1805:7" pos:end="1805:28"><call pos:start="1805:7" pos:end="1805:28"><name pos:start="1805:7" pos:end="1805:26"><name pos:start="1805:7" pos:end="1805:14">callback</name><operator pos:start="1805:15" pos:end="1805:15">.</operator><name pos:start="1805:16" pos:end="1805:26">closeStream</name></name><argument_list pos:start="1805:27" pos:end="1805:28">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1809:3" pos:end="1817:5">/**
   * Repacks a provided ZIP file and replaces old file with the new one.
   * &lt;p&gt;
   *
   * @param zip
   *          source ZIP file to be repacked and replaced.
   * @param compressionLevel
   *          compression level.
   */</comment>
  <function pos:start="1818:3" pos:end="1835:3"><type pos:start="1818:3" pos:end="1818:20"><specifier pos:start="1818:3" pos:end="1818:8">public</specifier> <specifier pos:start="1818:10" pos:end="1818:15">static</specifier> <name pos:start="1818:17" pos:end="1818:20">void</name></type> <name pos:start="1818:22" pos:end="1818:27">repack</name><parameter_list pos:start="1818:28" pos:end="1818:59">(<parameter pos:start="1818:29" pos:end="1818:36"><decl pos:start="1818:29" pos:end="1818:36"><type pos:start="1818:29" pos:end="1818:36"><name pos:start="1818:29" pos:end="1818:32">File</name></type> <name pos:start="1818:34" pos:end="1818:36">zip</name></decl></parameter>, <parameter pos:start="1818:39" pos:end="1818:58"><decl pos:start="1818:39" pos:end="1818:58"><type pos:start="1818:39" pos:end="1818:58"><name pos:start="1818:39" pos:end="1818:41">int</name></type> <name pos:start="1818:43" pos:end="1818:58">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1818:61" pos:end="1835:3">{<block_content pos:start="1819:5" pos:end="1834:5">
    <try pos:start="1819:5" pos:end="1834:5">try <block pos:start="1819:9" pos:end="1831:5">{<block_content pos:start="1820:7" pos:end="1830:38">
      <decl_stmt pos:start="1820:7" pos:end="1820:50"><decl pos:start="1820:7" pos:end="1820:49"><type pos:start="1820:7" pos:end="1820:10"><name pos:start="1820:7" pos:end="1820:10">File</name></type> <name pos:start="1820:12" pos:end="1820:17">tmpZip</name> <init pos:start="1820:19" pos:end="1820:49">= <expr pos:start="1820:21" pos:end="1820:49"><call pos:start="1820:21" pos:end="1820:49"><name pos:start="1820:21" pos:end="1820:44"><name pos:start="1820:21" pos:end="1820:29">FileUtils</name><operator pos:start="1820:30" pos:end="1820:30">.</operator><name pos:start="1820:31" pos:end="1820:44">getTempFileFor</name></name><argument_list pos:start="1820:45" pos:end="1820:49">(<argument pos:start="1820:46" pos:end="1820:48"><expr pos:start="1820:46" pos:end="1820:48"><name pos:start="1820:46" pos:end="1820:48">zip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt pos:start="1822:7" pos:end="1822:44"><expr pos:start="1822:7" pos:end="1822:43"><call pos:start="1822:7" pos:end="1822:43"><name pos:start="1822:7" pos:end="1822:12">repack</name><argument_list pos:start="1822:13" pos:end="1822:43">(<argument pos:start="1822:14" pos:end="1822:16"><expr pos:start="1822:14" pos:end="1822:16"><name pos:start="1822:14" pos:end="1822:16">zip</name></expr></argument>, <argument pos:start="1822:19" pos:end="1822:24"><expr pos:start="1822:19" pos:end="1822:24"><name pos:start="1822:19" pos:end="1822:24">tmpZip</name></expr></argument>, <argument pos:start="1822:27" pos:end="1822:42"><expr pos:start="1822:27" pos:end="1822:42"><name pos:start="1822:27" pos:end="1822:42">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line" pos:start="1824:7" pos:end="1824:28">// Delete original zip</comment>
      <if_stmt pos:start="1825:7" pos:end="1827:7"><if pos:start="1825:7" pos:end="1827:7">if <condition pos:start="1825:10" pos:end="1825:24">(<expr pos:start="1825:11" pos:end="1825:23"><operator pos:start="1825:11" pos:end="1825:11">!</operator><call pos:start="1825:12" pos:end="1825:23"><name pos:start="1825:12" pos:end="1825:21"><name pos:start="1825:12" pos:end="1825:14">zip</name><operator pos:start="1825:15" pos:end="1825:15">.</operator><name pos:start="1825:16" pos:end="1825:21">delete</name></name><argument_list pos:start="1825:22" pos:end="1825:23">()</argument_list></call></expr>)</condition> <block pos:start="1825:26" pos:end="1827:7">{<block_content pos:start="1826:9" pos:end="1826:67">
        <throw pos:start="1826:9" pos:end="1826:67">throw <expr pos:start="1826:15" pos:end="1826:66"><operator pos:start="1826:15" pos:end="1826:17">new</operator> <call pos:start="1826:19" pos:end="1826:66"><name pos:start="1826:19" pos:end="1826:29">IOException</name><argument_list pos:start="1826:30" pos:end="1826:66">(<argument pos:start="1826:31" pos:end="1826:65"><expr pos:start="1826:31" pos:end="1826:65"><literal type="string" pos:start="1826:31" pos:end="1826:59">"Unable to delete the file: "</literal> <operator pos:start="1826:61" pos:end="1826:61">+</operator> <name pos:start="1826:63" pos:end="1826:65">zip</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <comment type="line" pos:start="1829:7" pos:end="1829:27">// Rename the archive</comment>
      <expr_stmt pos:start="1830:7" pos:end="1830:38"><expr pos:start="1830:7" pos:end="1830:37"><call pos:start="1830:7" pos:end="1830:37"><name pos:start="1830:7" pos:end="1830:24"><name pos:start="1830:7" pos:end="1830:15">FileUtils</name><operator pos:start="1830:16" pos:end="1830:16">.</operator><name pos:start="1830:17" pos:end="1830:24">moveFile</name></name><argument_list pos:start="1830:25" pos:end="1830:37">(<argument pos:start="1830:26" pos:end="1830:31"><expr pos:start="1830:26" pos:end="1830:31"><name pos:start="1830:26" pos:end="1830:31">tmpZip</name></expr></argument>, <argument pos:start="1830:34" pos:end="1830:36"><expr pos:start="1830:34" pos:end="1830:36"><name pos:start="1830:34" pos:end="1830:36">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="1832:5" pos:end="1834:5">catch <parameter_list pos:start="1832:11" pos:end="1832:25">(<parameter pos:start="1832:12" pos:end="1832:24"><decl pos:start="1832:12" pos:end="1832:24"><type pos:start="1832:12" pos:end="1832:24"><name pos:start="1832:12" pos:end="1832:22">IOException</name></type> <name pos:start="1832:24" pos:end="1832:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1832:27" pos:end="1834:5">{<block_content pos:start="1833:7" pos:end="1833:40">
      <throw pos:start="1833:7" pos:end="1833:40">throw <expr pos:start="1833:13" pos:end="1833:39"><call pos:start="1833:13" pos:end="1833:39"><name pos:start="1833:13" pos:end="1833:36"><name pos:start="1833:13" pos:end="1833:28">ZipExceptionUtil</name><operator pos:start="1833:29" pos:end="1833:29">.</operator><name pos:start="1833:30" pos:end="1833:36">rethrow</name></name><argument_list pos:start="1833:37" pos:end="1833:39">(<argument pos:start="1833:38" pos:end="1833:38"><expr pos:start="1833:38" pos:end="1833:38"><name pos:start="1833:38" pos:end="1833:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1837:3" pos:end="1841:5">/**
   * RepackZipEntryCallback used in repacking methods.
   *
   * @author Pavel Grigorenko
   */</comment>
  <class pos:start="1842:3" pos:end="1863:3"><specifier pos:start="1842:3" pos:end="1842:9">private</specifier> <specifier pos:start="1842:11" pos:end="1842:16">static</specifier> <specifier pos:start="1842:18" pos:end="1842:22">final</specifier> class <name pos:start="1842:30" pos:end="1842:51">RepackZipEntryCallback</name> <super_list pos:start="1842:53" pos:end="1842:79"><implements pos:start="1842:53" pos:end="1842:79">implements <super pos:start="1842:64" pos:end="1842:79"><name pos:start="1842:64" pos:end="1842:79">ZipEntryCallback</name></super></implements></super_list> <block pos:start="1842:81" pos:end="1863:3">{

    <decl_stmt pos:start="1844:5" pos:end="1844:32"><decl pos:start="1844:5" pos:end="1844:31"><type pos:start="1844:5" pos:end="1844:27"><specifier pos:start="1844:5" pos:end="1844:11">private</specifier> <name pos:start="1844:13" pos:end="1844:27">ZipOutputStream</name></type> <name pos:start="1844:29" pos:end="1844:31">out</name></decl>;</decl_stmt>

    <constructor pos:start="1846:5" pos:end="1854:5"><specifier pos:start="1846:5" pos:end="1846:11">private</specifier> <name pos:start="1846:13" pos:end="1846:34">RepackZipEntryCallback</name><parameter_list pos:start="1846:35" pos:end="1846:69">(<parameter pos:start="1846:36" pos:end="1846:46"><decl pos:start="1846:36" pos:end="1846:46"><type pos:start="1846:36" pos:end="1846:46"><name pos:start="1846:36" pos:end="1846:39">File</name></type> <name pos:start="1846:41" pos:end="1846:46">dstZip</name></decl></parameter>, <parameter pos:start="1846:49" pos:end="1846:68"><decl pos:start="1846:49" pos:end="1846:68"><type pos:start="1846:49" pos:end="1846:68"><name pos:start="1846:49" pos:end="1846:51">int</name></type> <name pos:start="1846:53" pos:end="1846:68">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1846:71" pos:end="1854:5">{<block_content pos:start="1847:7" pos:end="1853:7">
      <try pos:start="1847:7" pos:end="1853:7">try <block pos:start="1847:11" pos:end="1850:7">{<block_content pos:start="1848:9" pos:end="1849:44">
        <expr_stmt pos:start="1848:9" pos:end="1848:95"><expr pos:start="1848:9" pos:end="1848:94"><name pos:start="1848:9" pos:end="1848:16"><name pos:start="1848:9" pos:end="1848:12">this</name><operator pos:start="1848:13" pos:end="1848:13">.</operator><name pos:start="1848:14" pos:end="1848:16">out</name></name> <operator pos:start="1848:18" pos:end="1848:18">=</operator> <operator pos:start="1848:20" pos:end="1848:22">new</operator> <call pos:start="1848:24" pos:end="1848:94"><name pos:start="1848:24" pos:end="1848:38">ZipOutputStream</name><argument_list pos:start="1848:39" pos:end="1848:94">(<argument pos:start="1848:40" pos:end="1848:93"><expr pos:start="1848:40" pos:end="1848:93"><operator pos:start="1848:40" pos:end="1848:42">new</operator> <call pos:start="1848:44" pos:end="1848:93"><name pos:start="1848:44" pos:end="1848:63">BufferedOutputStream</name><argument_list pos:start="1848:64" pos:end="1848:93">(<argument pos:start="1848:65" pos:end="1848:92"><expr pos:start="1848:65" pos:end="1848:92"><operator pos:start="1848:65" pos:end="1848:67">new</operator> <call pos:start="1848:69" pos:end="1848:92"><name pos:start="1848:69" pos:end="1848:84">FileOutputStream</name><argument_list pos:start="1848:85" pos:end="1848:92">(<argument pos:start="1848:86" pos:end="1848:91"><expr pos:start="1848:86" pos:end="1848:91"><name pos:start="1848:86" pos:end="1848:91">dstZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1849:9" pos:end="1849:44"><expr pos:start="1849:9" pos:end="1849:43"><call pos:start="1849:9" pos:end="1849:43"><name pos:start="1849:9" pos:end="1849:25"><name pos:start="1849:9" pos:end="1849:12">this</name><operator pos:start="1849:13" pos:end="1849:13">.</operator><name pos:start="1849:14" pos:end="1849:16">out</name><operator pos:start="1849:17" pos:end="1849:17">.</operator><name pos:start="1849:18" pos:end="1849:25">setLevel</name></name><argument_list pos:start="1849:26" pos:end="1849:43">(<argument pos:start="1849:27" pos:end="1849:42"><expr pos:start="1849:27" pos:end="1849:42"><name pos:start="1849:27" pos:end="1849:42">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <catch pos:start="1851:7" pos:end="1853:7">catch <parameter_list pos:start="1851:13" pos:end="1851:27">(<parameter pos:start="1851:14" pos:end="1851:26"><decl pos:start="1851:14" pos:end="1851:26"><type pos:start="1851:14" pos:end="1851:26"><name pos:start="1851:14" pos:end="1851:24">IOException</name></type> <name pos:start="1851:26" pos:end="1851:26">e</name></decl></parameter>)</parameter_list> <block pos:start="1851:29" pos:end="1853:7">{<block_content pos:start="1852:9" pos:end="1852:36">
        <expr_stmt pos:start="1852:9" pos:end="1852:36"><expr pos:start="1852:9" pos:end="1852:35"><call pos:start="1852:9" pos:end="1852:35"><name pos:start="1852:9" pos:end="1852:32"><name pos:start="1852:9" pos:end="1852:24">ZipExceptionUtil</name><operator pos:start="1852:25" pos:end="1852:25">.</operator><name pos:start="1852:26" pos:end="1852:32">rethrow</name></name><argument_list pos:start="1852:33" pos:end="1852:35">(<argument pos:start="1852:34" pos:end="1852:34"><expr pos:start="1852:34" pos:end="1852:34"><name pos:start="1852:34" pos:end="1852:34">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></constructor>

    <function pos:start="1856:5" pos:end="1858:5"><type pos:start="1856:5" pos:end="1856:15"><specifier pos:start="1856:5" pos:end="1856:10">public</specifier> <name pos:start="1856:12" pos:end="1856:15">void</name></type> <name pos:start="1856:17" pos:end="1856:23">process</name><parameter_list pos:start="1856:24" pos:end="1856:58">(<parameter pos:start="1856:25" pos:end="1856:38"><decl pos:start="1856:25" pos:end="1856:38"><type pos:start="1856:25" pos:end="1856:38"><name pos:start="1856:25" pos:end="1856:35">InputStream</name></type> <name pos:start="1856:37" pos:end="1856:38">in</name></decl></parameter>, <parameter pos:start="1856:41" pos:end="1856:57"><decl pos:start="1856:41" pos:end="1856:57"><type pos:start="1856:41" pos:end="1856:57"><name pos:start="1856:41" pos:end="1856:48">ZipEntry</name></type> <name pos:start="1856:50" pos:end="1856:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="1856:60" pos:end="1856:77">throws <argument pos:start="1856:67" pos:end="1856:77"><expr pos:start="1856:67" pos:end="1856:77"><name pos:start="1856:67" pos:end="1856:77">IOException</name></expr></argument></throws> <block pos:start="1856:79" pos:end="1858:5">{<block_content pos:start="1857:7" pos:end="1857:48">
      <expr_stmt pos:start="1857:7" pos:end="1857:48"><expr pos:start="1857:7" pos:end="1857:47"><call pos:start="1857:7" pos:end="1857:47"><name pos:start="1857:7" pos:end="1857:28"><name pos:start="1857:7" pos:end="1857:18">ZipEntryUtil</name><operator pos:start="1857:19" pos:end="1857:19">.</operator><name pos:start="1857:20" pos:end="1857:28">copyEntry</name></name><argument_list pos:start="1857:29" pos:end="1857:47">(<argument pos:start="1857:30" pos:end="1857:37"><expr pos:start="1857:30" pos:end="1857:37"><name pos:start="1857:30" pos:end="1857:37">zipEntry</name></expr></argument>, <argument pos:start="1857:40" pos:end="1857:41"><expr pos:start="1857:40" pos:end="1857:41"><name pos:start="1857:40" pos:end="1857:41">in</name></expr></argument>, <argument pos:start="1857:44" pos:end="1857:46"><expr pos:start="1857:44" pos:end="1857:46"><name pos:start="1857:44" pos:end="1857:46">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="1860:5" pos:end="1862:5"><type pos:start="1860:5" pos:end="1860:16"><specifier pos:start="1860:5" pos:end="1860:11">private</specifier> <name pos:start="1860:13" pos:end="1860:16">void</name></type> <name pos:start="1860:18" pos:end="1860:28">closeStream</name><parameter_list pos:start="1860:29" pos:end="1860:30">()</parameter_list> <block pos:start="1860:32" pos:end="1862:5">{<block_content pos:start="1861:7" pos:end="1861:32">
      <expr_stmt pos:start="1861:7" pos:end="1861:32"><expr pos:start="1861:7" pos:end="1861:31"><call pos:start="1861:7" pos:end="1861:31"><name pos:start="1861:7" pos:end="1861:26"><name pos:start="1861:7" pos:end="1861:13">IOUtils</name><operator pos:start="1861:14" pos:end="1861:14">.</operator><name pos:start="1861:15" pos:end="1861:26">closeQuietly</name></name><argument_list pos:start="1861:27" pos:end="1861:31">(<argument pos:start="1861:28" pos:end="1861:30"><expr pos:start="1861:28" pos:end="1861:30"><name pos:start="1861:28" pos:end="1861:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc" pos:start="1865:3" pos:end="1876:5">/**
   * Compresses a given directory in its own location.
   * &lt;p&gt;
   * A ZIP file will be first created with a temporary name. After the
   * compressing the directory will be deleted and the ZIP file will be renamed
   * as the original directory.
   *
   * @param dir
   *          input directory as well as the target ZIP file.
   *
   * @see #pack(File, File)
   */</comment>
  <function pos:start="1877:3" pos:end="1879:3"><type pos:start="1877:3" pos:end="1877:20"><specifier pos:start="1877:3" pos:end="1877:8">public</specifier> <specifier pos:start="1877:10" pos:end="1877:15">static</specifier> <name pos:start="1877:17" pos:end="1877:20">void</name></type> <name pos:start="1877:22" pos:end="1877:30">unexplode</name><parameter_list pos:start="1877:31" pos:end="1877:40">(<parameter pos:start="1877:32" pos:end="1877:39"><decl pos:start="1877:32" pos:end="1877:39"><type pos:start="1877:32" pos:end="1877:35"><name pos:start="1877:32" pos:end="1877:35">File</name></type> <name pos:start="1877:37" pos:end="1877:39">dir</name></decl></parameter>)</parameter_list> <block pos:start="1877:42" pos:end="1879:3">{<block_content pos:start="1878:5" pos:end="1878:46">
    <expr_stmt pos:start="1878:5" pos:end="1878:46"><expr pos:start="1878:5" pos:end="1878:45"><call pos:start="1878:5" pos:end="1878:45"><name pos:start="1878:5" pos:end="1878:13">unexplode</name><argument_list pos:start="1878:14" pos:end="1878:45">(<argument pos:start="1878:15" pos:end="1878:17"><expr pos:start="1878:15" pos:end="1878:17"><name pos:start="1878:15" pos:end="1878:17">dir</name></expr></argument>, <argument pos:start="1878:20" pos:end="1878:44"><expr pos:start="1878:20" pos:end="1878:44"><name pos:start="1878:20" pos:end="1878:44">DEFAULT_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1881:3" pos:end="1894:5">/**
   * Compresses a given directory in its own location.
   * &lt;p&gt;
   * A ZIP file will be first created with a temporary name. After the
   * compressing the directory will be deleted and the ZIP file will be renamed
   * as the original directory.
   *
   * @param dir
   *          input directory as well as the target ZIP file.
   * @param compressionLevel
   *          compression level
   *
   * @see #pack(File, File)
   */</comment>
  <function pos:start="1895:3" pos:end="1912:3"><type pos:start="1895:3" pos:end="1895:20"><specifier pos:start="1895:3" pos:end="1895:8">public</specifier> <specifier pos:start="1895:10" pos:end="1895:15">static</specifier> <name pos:start="1895:17" pos:end="1895:20">void</name></type> <name pos:start="1895:22" pos:end="1895:30">unexplode</name><parameter_list pos:start="1895:31" pos:end="1895:62">(<parameter pos:start="1895:32" pos:end="1895:39"><decl pos:start="1895:32" pos:end="1895:39"><type pos:start="1895:32" pos:end="1895:39"><name pos:start="1895:32" pos:end="1895:35">File</name></type> <name pos:start="1895:37" pos:end="1895:39">dir</name></decl></parameter>, <parameter pos:start="1895:42" pos:end="1895:61"><decl pos:start="1895:42" pos:end="1895:61"><type pos:start="1895:42" pos:end="1895:61"><name pos:start="1895:42" pos:end="1895:44">int</name></type> <name pos:start="1895:46" pos:end="1895:61">compressionLevel</name></decl></parameter>)</parameter_list> <block pos:start="1895:64" pos:end="1912:3">{<block_content pos:start="1896:5" pos:end="1911:5">
    <try pos:start="1896:5" pos:end="1911:5">try <block pos:start="1896:9" pos:end="1908:5">{<block_content pos:start="1898:7" pos:end="1907:35">
      <comment type="line" pos:start="1897:7" pos:end="1897:53">// Find a new unique name is the same directory</comment>
      <decl_stmt pos:start="1898:7" pos:end="1898:47"><decl pos:start="1898:7" pos:end="1898:46"><type pos:start="1898:7" pos:end="1898:10"><name pos:start="1898:7" pos:end="1898:10">File</name></type> <name pos:start="1898:12" pos:end="1898:14">zip</name> <init pos:start="1898:16" pos:end="1898:46">= <expr pos:start="1898:18" pos:end="1898:46"><call pos:start="1898:18" pos:end="1898:46"><name pos:start="1898:18" pos:end="1898:41"><name pos:start="1898:18" pos:end="1898:26">FileUtils</name><operator pos:start="1898:27" pos:end="1898:27">.</operator><name pos:start="1898:28" pos:end="1898:41">getTempFileFor</name></name><argument_list pos:start="1898:42" pos:end="1898:46">(<argument pos:start="1898:43" pos:end="1898:45"><expr pos:start="1898:43" pos:end="1898:45"><name pos:start="1898:43" pos:end="1898:45">dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line" pos:start="1900:7" pos:end="1900:16">// Pack it</comment>
      <expr_stmt pos:start="1901:7" pos:end="1901:39"><expr pos:start="1901:7" pos:end="1901:38"><call pos:start="1901:7" pos:end="1901:38"><name pos:start="1901:7" pos:end="1901:10">pack</name><argument_list pos:start="1901:11" pos:end="1901:38">(<argument pos:start="1901:12" pos:end="1901:14"><expr pos:start="1901:12" pos:end="1901:14"><name pos:start="1901:12" pos:end="1901:14">dir</name></expr></argument>, <argument pos:start="1901:17" pos:end="1901:19"><expr pos:start="1901:17" pos:end="1901:19"><name pos:start="1901:17" pos:end="1901:19">zip</name></expr></argument>, <argument pos:start="1901:22" pos:end="1901:37"><expr pos:start="1901:22" pos:end="1901:37"><name pos:start="1901:22" pos:end="1901:37">compressionLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line" pos:start="1903:7" pos:end="1903:29">// Delete the directory</comment>
      <expr_stmt pos:start="1904:7" pos:end="1904:37"><expr pos:start="1904:7" pos:end="1904:36"><call pos:start="1904:7" pos:end="1904:36"><name pos:start="1904:7" pos:end="1904:31"><name pos:start="1904:7" pos:end="1904:15">FileUtils</name><operator pos:start="1904:16" pos:end="1904:16">.</operator><name pos:start="1904:17" pos:end="1904:31">deleteDirectory</name></name><argument_list pos:start="1904:32" pos:end="1904:36">(<argument pos:start="1904:33" pos:end="1904:35"><expr pos:start="1904:33" pos:end="1904:35"><name pos:start="1904:33" pos:end="1904:35">dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line" pos:start="1906:7" pos:end="1906:27">// Rename the archive</comment>
      <expr_stmt pos:start="1907:7" pos:end="1907:35"><expr pos:start="1907:7" pos:end="1907:34"><call pos:start="1907:7" pos:end="1907:34"><name pos:start="1907:7" pos:end="1907:24"><name pos:start="1907:7" pos:end="1907:15">FileUtils</name><operator pos:start="1907:16" pos:end="1907:16">.</operator><name pos:start="1907:17" pos:end="1907:24">moveFile</name></name><argument_list pos:start="1907:25" pos:end="1907:34">(<argument pos:start="1907:26" pos:end="1907:28"><expr pos:start="1907:26" pos:end="1907:28"><name pos:start="1907:26" pos:end="1907:28">zip</name></expr></argument>, <argument pos:start="1907:31" pos:end="1907:33"><expr pos:start="1907:31" pos:end="1907:33"><name pos:start="1907:31" pos:end="1907:33">dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="1909:5" pos:end="1911:5">catch <parameter_list pos:start="1909:11" pos:end="1909:25">(<parameter pos:start="1909:12" pos:end="1909:24"><decl pos:start="1909:12" pos:end="1909:24"><type pos:start="1909:12" pos:end="1909:24"><name pos:start="1909:12" pos:end="1909:22">IOException</name></type> <name pos:start="1909:24" pos:end="1909:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1909:27" pos:end="1911:5">{<block_content pos:start="1910:7" pos:end="1910:40">
      <throw pos:start="1910:7" pos:end="1910:40">throw <expr pos:start="1910:13" pos:end="1910:39"><call pos:start="1910:13" pos:end="1910:39"><name pos:start="1910:13" pos:end="1910:36"><name pos:start="1910:13" pos:end="1910:28">ZipExceptionUtil</name><operator pos:start="1910:29" pos:end="1910:29">.</operator><name pos:start="1910:30" pos:end="1910:36">rethrow</name></name><argument_list pos:start="1910:37" pos:end="1910:39">(<argument pos:start="1910:38" pos:end="1910:38"><expr pos:start="1910:38" pos:end="1910:38"><name pos:start="1910:38" pos:end="1910:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1914:3" pos:end="1923:5">/**
   * Compresses the given entries into an output stream.
   *
   * @param entries
   *          ZIP entries added.
   * @param os
   *          output stream for the new ZIP (does not have to be buffered)
   *
   * @since 1.9
   */</comment>
  <function pos:start="1924:3" pos:end="1929:3"><type pos:start="1924:3" pos:end="1924:20"><specifier pos:start="1924:3" pos:end="1924:8">public</specifier> <specifier pos:start="1924:10" pos:end="1924:15">static</specifier> <name pos:start="1924:17" pos:end="1924:20">void</name></type> <name pos:start="1924:22" pos:end="1924:25">pack</name><parameter_list pos:start="1924:26" pos:end="1924:68">(<parameter pos:start="1924:27" pos:end="1924:50"><decl pos:start="1924:27" pos:end="1924:50"><type pos:start="1924:27" pos:end="1924:50"><name pos:start="1924:27" pos:end="1924:42"><name pos:start="1924:27" pos:end="1924:40">ZipEntrySource</name><index pos:start="1924:41" pos:end="1924:42">[]</index></name></type> <name pos:start="1924:44" pos:end="1924:50">entries</name></decl></parameter>, <parameter pos:start="1924:53" pos:end="1924:67"><decl pos:start="1924:53" pos:end="1924:67"><type pos:start="1924:53" pos:end="1924:67"><name pos:start="1924:53" pos:end="1924:64">OutputStream</name></type> <name pos:start="1924:66" pos:end="1924:67">os</name></decl></parameter>)</parameter_list> <block pos:start="1924:70" pos:end="1929:3">{<block_content pos:start="1925:5" pos:end="1928:29">
    <if_stmt pos:start="1925:5" pos:end="1927:5"><if pos:start="1925:5" pos:end="1927:5">if <condition pos:start="1925:8" pos:end="1925:29">(<expr pos:start="1925:9" pos:end="1925:28"><call pos:start="1925:9" pos:end="1925:28"><name pos:start="1925:9" pos:end="1925:26"><name pos:start="1925:9" pos:end="1925:11">log</name><operator pos:start="1925:12" pos:end="1925:12">.</operator><name pos:start="1925:13" pos:end="1925:26">isDebugEnabled</name></name><argument_list pos:start="1925:27" pos:end="1925:28">()</argument_list></call></expr>)</condition> <block pos:start="1925:31" pos:end="1927:5">{<block_content pos:start="1926:7" pos:end="1926:68">
      <expr_stmt pos:start="1926:7" pos:end="1926:68"><expr pos:start="1926:7" pos:end="1926:67"><call pos:start="1926:7" pos:end="1926:67"><name pos:start="1926:7" pos:end="1926:15"><name pos:start="1926:7" pos:end="1926:9">log</name><operator pos:start="1926:10" pos:end="1926:10">.</operator><name pos:start="1926:11" pos:end="1926:15">debug</name></name><argument_list pos:start="1926:16" pos:end="1926:67">(<argument pos:start="1926:17" pos:end="1926:42"><expr pos:start="1926:17" pos:end="1926:42"><literal type="string" pos:start="1926:17" pos:end="1926:42">"Creating stream from {}."</literal></expr></argument>, <argument pos:start="1926:45" pos:end="1926:66"><expr pos:start="1926:45" pos:end="1926:66"><call pos:start="1926:45" pos:end="1926:66"><name pos:start="1926:45" pos:end="1926:57"><name pos:start="1926:45" pos:end="1926:50">Arrays</name><operator pos:start="1926:51" pos:end="1926:51">.</operator><name pos:start="1926:52" pos:end="1926:57">asList</name></name><argument_list pos:start="1926:58" pos:end="1926:66">(<argument pos:start="1926:59" pos:end="1926:65"><expr pos:start="1926:59" pos:end="1926:65"><name pos:start="1926:59" pos:end="1926:65">entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1928:5" pos:end="1928:29"><expr pos:start="1928:5" pos:end="1928:28"><call pos:start="1928:5" pos:end="1928:28"><name pos:start="1928:5" pos:end="1928:8">pack</name><argument_list pos:start="1928:9" pos:end="1928:28">(<argument pos:start="1928:10" pos:end="1928:16"><expr pos:start="1928:10" pos:end="1928:16"><name pos:start="1928:10" pos:end="1928:16">entries</name></expr></argument>, <argument pos:start="1928:19" pos:end="1928:20"><expr pos:start="1928:19" pos:end="1928:20"><name pos:start="1928:19" pos:end="1928:20">os</name></expr></argument>, <argument pos:start="1928:23" pos:end="1928:27"><expr pos:start="1928:23" pos:end="1928:27"><literal type="boolean" pos:start="1928:23" pos:end="1928:27">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function pos:start="1931:3" pos:end="1946:3"><type pos:start="1931:3" pos:end="1931:21"><specifier pos:start="1931:3" pos:end="1931:9">private</specifier> <specifier pos:start="1931:11" pos:end="1931:16">static</specifier> <name pos:start="1931:18" pos:end="1931:21">void</name></type> <name pos:start="1931:23" pos:end="1931:26">pack</name><parameter_list pos:start="1931:27" pos:end="1931:90">(<parameter pos:start="1931:28" pos:end="1931:51"><decl pos:start="1931:28" pos:end="1931:51"><type pos:start="1931:28" pos:end="1931:51"><name pos:start="1931:28" pos:end="1931:43"><name pos:start="1931:28" pos:end="1931:41">ZipEntrySource</name><index pos:start="1931:42" pos:end="1931:43">[]</index></name></type> <name pos:start="1931:45" pos:end="1931:51">entries</name></decl></parameter>, <parameter pos:start="1931:54" pos:end="1931:68"><decl pos:start="1931:54" pos:end="1931:68"><type pos:start="1931:54" pos:end="1931:68"><name pos:start="1931:54" pos:end="1931:65">OutputStream</name></type> <name pos:start="1931:67" pos:end="1931:68">os</name></decl></parameter>, <parameter pos:start="1931:71" pos:end="1931:89"><decl pos:start="1931:71" pos:end="1931:89"><type pos:start="1931:71" pos:end="1931:89"><name pos:start="1931:71" pos:end="1931:77">boolean</name></type> <name pos:start="1931:79" pos:end="1931:89">closeStream</name></decl></parameter>)</parameter_list> <block pos:start="1931:92" pos:end="1946:3">{<block_content pos:start="1932:5" pos:end="1945:5">
    <try pos:start="1932:5" pos:end="1945:5">try <block pos:start="1932:9" pos:end="1942:5">{<block_content pos:start="1933:7" pos:end="1941:7">
      <decl_stmt pos:start="1933:7" pos:end="1933:52"><decl pos:start="1933:7" pos:end="1933:51"><type pos:start="1933:7" pos:end="1933:21"><name pos:start="1933:7" pos:end="1933:21">ZipOutputStream</name></type> <name pos:start="1933:23" pos:end="1933:25">out</name> <init pos:start="1933:27" pos:end="1933:51">= <expr pos:start="1933:29" pos:end="1933:51"><operator pos:start="1933:29" pos:end="1933:31">new</operator> <call pos:start="1933:33" pos:end="1933:51"><name pos:start="1933:33" pos:end="1933:47">ZipOutputStream</name><argument_list pos:start="1933:48" pos:end="1933:51">(<argument pos:start="1933:49" pos:end="1933:50"><expr pos:start="1933:49" pos:end="1933:50"><name pos:start="1933:49" pos:end="1933:50">os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for pos:start="1934:7" pos:end="1936:7">for <control pos:start="1934:11" pos:end="1934:46">(<init pos:start="1934:12" pos:end="1934:21"><decl pos:start="1934:12" pos:end="1934:20"><type pos:start="1934:12" pos:end="1934:14"><name pos:start="1934:12" pos:end="1934:14">int</name></type> <name pos:start="1934:16" pos:end="1934:16">i</name> <init pos:start="1934:18" pos:end="1934:20">= <expr pos:start="1934:20" pos:end="1934:20"><literal type="number" pos:start="1934:20" pos:end="1934:20">0</literal></expr></init></decl>;</init> <condition pos:start="1934:23" pos:end="1934:41"><expr pos:start="1934:23" pos:end="1934:40"><name pos:start="1934:23" pos:end="1934:23">i</name> <operator pos:start="1934:25" pos:end="1934:25">&lt;</operator> <name pos:start="1934:27" pos:end="1934:40"><name pos:start="1934:27" pos:end="1934:33">entries</name><operator pos:start="1934:34" pos:end="1934:34">.</operator><name pos:start="1934:35" pos:end="1934:40">length</name></name></expr>;</condition> <incr pos:start="1934:43" pos:end="1934:45"><expr pos:start="1934:43" pos:end="1934:45"><name pos:start="1934:43" pos:end="1934:43">i</name><operator pos:start="1934:44" pos:end="1934:45">++</operator></expr></incr>)</control> <block pos:start="1934:48" pos:end="1936:7">{<block_content pos:start="1935:9" pos:end="1935:34">
        <expr_stmt pos:start="1935:9" pos:end="1935:34"><expr pos:start="1935:9" pos:end="1935:33"><call pos:start="1935:9" pos:end="1935:33"><name pos:start="1935:9" pos:end="1935:16">addEntry</name><argument_list pos:start="1935:17" pos:end="1935:33">(<argument pos:start="1935:18" pos:end="1935:27"><expr pos:start="1935:18" pos:end="1935:27"><name pos:start="1935:18" pos:end="1935:27"><name pos:start="1935:18" pos:end="1935:24">entries</name><index pos:start="1935:25" pos:end="1935:27">[<expr pos:start="1935:26" pos:end="1935:26"><name pos:start="1935:26" pos:end="1935:26">i</name></expr>]</index></name></expr></argument>, <argument pos:start="1935:30" pos:end="1935:32"><expr pos:start="1935:30" pos:end="1935:32"><name pos:start="1935:30" pos:end="1935:32">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt pos:start="1937:7" pos:end="1937:18"><expr pos:start="1937:7" pos:end="1937:17"><call pos:start="1937:7" pos:end="1937:17"><name pos:start="1937:7" pos:end="1937:15"><name pos:start="1937:7" pos:end="1937:9">out</name><operator pos:start="1937:10" pos:end="1937:10">.</operator><name pos:start="1937:11" pos:end="1937:15">flush</name></name><argument_list pos:start="1937:16" pos:end="1937:17">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1938:7" pos:end="1938:19"><expr pos:start="1938:7" pos:end="1938:18"><call pos:start="1938:7" pos:end="1938:18"><name pos:start="1938:7" pos:end="1938:16"><name pos:start="1938:7" pos:end="1938:9">out</name><operator pos:start="1938:10" pos:end="1938:10">.</operator><name pos:start="1938:11" pos:end="1938:16">finish</name></name><argument_list pos:start="1938:17" pos:end="1938:18">()</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="1939:7" pos:end="1941:7"><if pos:start="1939:7" pos:end="1941:7">if <condition pos:start="1939:10" pos:end="1939:22">(<expr pos:start="1939:11" pos:end="1939:21"><name pos:start="1939:11" pos:end="1939:21">closeStream</name></expr>)</condition> <block pos:start="1939:24" pos:end="1941:7">{<block_content pos:start="1940:9" pos:end="1940:20">
        <expr_stmt pos:start="1940:9" pos:end="1940:20"><expr pos:start="1940:9" pos:end="1940:19"><call pos:start="1940:9" pos:end="1940:19"><name pos:start="1940:9" pos:end="1940:17"><name pos:start="1940:9" pos:end="1940:11">out</name><operator pos:start="1940:12" pos:end="1940:12">.</operator><name pos:start="1940:13" pos:end="1940:17">close</name></name><argument_list pos:start="1940:18" pos:end="1940:19">()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <catch pos:start="1943:5" pos:end="1945:5">catch <parameter_list pos:start="1943:11" pos:end="1943:25">(<parameter pos:start="1943:12" pos:end="1943:24"><decl pos:start="1943:12" pos:end="1943:24"><type pos:start="1943:12" pos:end="1943:24"><name pos:start="1943:12" pos:end="1943:22">IOException</name></type> <name pos:start="1943:24" pos:end="1943:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1943:27" pos:end="1945:5">{<block_content pos:start="1944:7" pos:end="1944:40">
      <throw pos:start="1944:7" pos:end="1944:40">throw <expr pos:start="1944:13" pos:end="1944:39"><call pos:start="1944:13" pos:end="1944:39"><name pos:start="1944:13" pos:end="1944:36"><name pos:start="1944:13" pos:end="1944:28">ZipExceptionUtil</name><operator pos:start="1944:29" pos:end="1944:29">.</operator><name pos:start="1944:30" pos:end="1944:36">rethrow</name></name><argument_list pos:start="1944:37" pos:end="1944:39">(<argument pos:start="1944:38" pos:end="1944:38"><expr pos:start="1944:38" pos:end="1944:38"><name pos:start="1944:38" pos:end="1944:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1948:3" pos:end="1955:5">/**
   * Compresses the given entries into a new ZIP file.
   *
   * @param entries
   *          ZIP entries added.
   * @param zip
   *          new ZIP file created.
   */</comment>
  <function pos:start="1956:3" pos:end="1972:3"><type pos:start="1956:3" pos:end="1956:20"><specifier pos:start="1956:3" pos:end="1956:8">public</specifier> <specifier pos:start="1956:10" pos:end="1956:15">static</specifier> <name pos:start="1956:17" pos:end="1956:20">void</name></type> <name pos:start="1956:22" pos:end="1956:25">pack</name><parameter_list pos:start="1956:26" pos:end="1956:61">(<parameter pos:start="1956:27" pos:end="1956:50"><decl pos:start="1956:27" pos:end="1956:50"><type pos:start="1956:27" pos:end="1956:50"><name pos:start="1956:27" pos:end="1956:42"><name pos:start="1956:27" pos:end="1956:40">ZipEntrySource</name><index pos:start="1956:41" pos:end="1956:42">[]</index></name></type> <name pos:start="1956:44" pos:end="1956:50">entries</name></decl></parameter>, <parameter pos:start="1956:53" pos:end="1956:60"><decl pos:start="1956:53" pos:end="1956:60"><type pos:start="1956:53" pos:end="1956:60"><name pos:start="1956:53" pos:end="1956:56">File</name></type> <name pos:start="1956:58" pos:end="1956:60">zip</name></decl></parameter>)</parameter_list> <block pos:start="1956:63" pos:end="1972:3">{<block_content pos:start="1957:5" pos:end="1971:5">
    <if_stmt pos:start="1957:5" pos:end="1959:5"><if pos:start="1957:5" pos:end="1959:5">if <condition pos:start="1957:8" pos:end="1957:29">(<expr pos:start="1957:9" pos:end="1957:28"><call pos:start="1957:9" pos:end="1957:28"><name pos:start="1957:9" pos:end="1957:26"><name pos:start="1957:9" pos:end="1957:11">log</name><operator pos:start="1957:12" pos:end="1957:12">.</operator><name pos:start="1957:13" pos:end="1957:26">isDebugEnabled</name></name><argument_list pos:start="1957:27" pos:end="1957:28">()</argument_list></call></expr>)</condition> <block pos:start="1957:31" pos:end="1959:5">{<block_content pos:start="1958:7" pos:end="1958:71">
      <expr_stmt pos:start="1958:7" pos:end="1958:71"><expr pos:start="1958:7" pos:end="1958:70"><call pos:start="1958:7" pos:end="1958:70"><name pos:start="1958:7" pos:end="1958:15"><name pos:start="1958:7" pos:end="1958:9">log</name><operator pos:start="1958:10" pos:end="1958:10">.</operator><name pos:start="1958:11" pos:end="1958:15">debug</name></name><argument_list pos:start="1958:16" pos:end="1958:70">(<argument pos:start="1958:17" pos:end="1958:40"><expr pos:start="1958:17" pos:end="1958:40"><literal type="string" pos:start="1958:17" pos:end="1958:40">"Creating '{}' from {}."</literal></expr></argument>, <argument pos:start="1958:43" pos:end="1958:45"><expr pos:start="1958:43" pos:end="1958:45"><name pos:start="1958:43" pos:end="1958:45">zip</name></expr></argument>, <argument pos:start="1958:48" pos:end="1958:69"><expr pos:start="1958:48" pos:end="1958:69"><call pos:start="1958:48" pos:end="1958:69"><name pos:start="1958:48" pos:end="1958:60"><name pos:start="1958:48" pos:end="1958:53">Arrays</name><operator pos:start="1958:54" pos:end="1958:54">.</operator><name pos:start="1958:55" pos:end="1958:60">asList</name></name><argument_list pos:start="1958:61" pos:end="1958:69">(<argument pos:start="1958:62" pos:end="1958:68"><expr pos:start="1958:62" pos:end="1958:68"><name pos:start="1958:62" pos:end="1958:68">entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="1961:5" pos:end="1961:28"><decl pos:start="1961:5" pos:end="1961:27"><type pos:start="1961:5" pos:end="1961:16"><name pos:start="1961:5" pos:end="1961:16">OutputStream</name></type> <name pos:start="1961:18" pos:end="1961:20">out</name> <init pos:start="1961:22" pos:end="1961:27">= <expr pos:start="1961:24" pos:end="1961:27"><literal type="null" pos:start="1961:24" pos:end="1961:27">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="1962:5" pos:end="1971:5">try <block pos:start="1962:9" pos:end="1965:5">{<block_content pos:start="1963:7" pos:end="1964:31">
      <expr_stmt pos:start="1963:7" pos:end="1963:64"><expr pos:start="1963:7" pos:end="1963:63"><name pos:start="1963:7" pos:end="1963:9">out</name> <operator pos:start="1963:11" pos:end="1963:11">=</operator> <operator pos:start="1963:13" pos:end="1963:15">new</operator> <call pos:start="1963:17" pos:end="1963:63"><name pos:start="1963:17" pos:end="1963:36">BufferedOutputStream</name><argument_list pos:start="1963:37" pos:end="1963:63">(<argument pos:start="1963:38" pos:end="1963:62"><expr pos:start="1963:38" pos:end="1963:62"><operator pos:start="1963:38" pos:end="1963:40">new</operator> <call pos:start="1963:42" pos:end="1963:62"><name pos:start="1963:42" pos:end="1963:57">FileOutputStream</name><argument_list pos:start="1963:58" pos:end="1963:62">(<argument pos:start="1963:59" pos:end="1963:61"><expr pos:start="1963:59" pos:end="1963:61"><name pos:start="1963:59" pos:end="1963:61">zip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1964:7" pos:end="1964:31"><expr pos:start="1964:7" pos:end="1964:30"><call pos:start="1964:7" pos:end="1964:30"><name pos:start="1964:7" pos:end="1964:10">pack</name><argument_list pos:start="1964:11" pos:end="1964:30">(<argument pos:start="1964:12" pos:end="1964:18"><expr pos:start="1964:12" pos:end="1964:18"><name pos:start="1964:12" pos:end="1964:18">entries</name></expr></argument>, <argument pos:start="1964:21" pos:end="1964:23"><expr pos:start="1964:21" pos:end="1964:23"><name pos:start="1964:21" pos:end="1964:23">out</name></expr></argument>, <argument pos:start="1964:26" pos:end="1964:29"><expr pos:start="1964:26" pos:end="1964:29"><literal type="boolean" pos:start="1964:26" pos:end="1964:29">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="1966:5" pos:end="1968:5">catch <parameter_list pos:start="1966:11" pos:end="1966:25">(<parameter pos:start="1966:12" pos:end="1966:24"><decl pos:start="1966:12" pos:end="1966:24"><type pos:start="1966:12" pos:end="1966:24"><name pos:start="1966:12" pos:end="1966:22">IOException</name></type> <name pos:start="1966:24" pos:end="1966:24">e</name></decl></parameter>)</parameter_list> <block pos:start="1966:27" pos:end="1968:5">{<block_content pos:start="1967:7" pos:end="1967:40">
      <throw pos:start="1967:7" pos:end="1967:40">throw <expr pos:start="1967:13" pos:end="1967:39"><call pos:start="1967:13" pos:end="1967:39"><name pos:start="1967:13" pos:end="1967:36"><name pos:start="1967:13" pos:end="1967:28">ZipExceptionUtil</name><operator pos:start="1967:29" pos:end="1967:29">.</operator><name pos:start="1967:30" pos:end="1967:36">rethrow</name></name><argument_list pos:start="1967:37" pos:end="1967:39">(<argument pos:start="1967:38" pos:end="1967:38"><expr pos:start="1967:38" pos:end="1967:38"><name pos:start="1967:38" pos:end="1967:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="1969:5" pos:end="1971:5">finally <block pos:start="1969:13" pos:end="1971:5">{<block_content pos:start="1970:7" pos:end="1970:32">
      <expr_stmt pos:start="1970:7" pos:end="1970:32"><expr pos:start="1970:7" pos:end="1970:31"><call pos:start="1970:7" pos:end="1970:31"><name pos:start="1970:7" pos:end="1970:26"><name pos:start="1970:7" pos:end="1970:13">IOUtils</name><operator pos:start="1970:14" pos:end="1970:14">.</operator><name pos:start="1970:15" pos:end="1970:26">closeQuietly</name></name><argument_list pos:start="1970:27" pos:end="1970:31">(<argument pos:start="1970:28" pos:end="1970:30"><expr pos:start="1970:28" pos:end="1970:30"><name pos:start="1970:28" pos:end="1970:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1974:3" pos:end="1985:5">/**
   * Copies an existing ZIP file and appends it with one new entry.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param file
   *          new entry to be added.
   * @param destZip
   *          new ZIP file created.
   */</comment>
  <function pos:start="1986:3" pos:end="1988:3"><type pos:start="1986:3" pos:end="1986:20"><specifier pos:start="1986:3" pos:end="1986:8">public</specifier> <specifier pos:start="1986:10" pos:end="1986:15">static</specifier> <name pos:start="1986:17" pos:end="1986:20">void</name></type> <name pos:start="1986:22" pos:end="1986:29">addEntry</name><parameter_list pos:start="1986:30" pos:end="1986:77">(<parameter pos:start="1986:31" pos:end="1986:38"><decl pos:start="1986:31" pos:end="1986:38"><type pos:start="1986:31" pos:end="1986:38"><name pos:start="1986:31" pos:end="1986:34">File</name></type> <name pos:start="1986:36" pos:end="1986:38">zip</name></decl></parameter>, <parameter pos:start="1986:41" pos:end="1986:51"><decl pos:start="1986:41" pos:end="1986:51"><type pos:start="1986:41" pos:end="1986:51"><name pos:start="1986:41" pos:end="1986:46">String</name></type> <name pos:start="1986:48" pos:end="1986:51">path</name></decl></parameter>, <parameter pos:start="1986:54" pos:end="1986:62"><decl pos:start="1986:54" pos:end="1986:62"><type pos:start="1986:54" pos:end="1986:62"><name pos:start="1986:54" pos:end="1986:57">File</name></type> <name pos:start="1986:59" pos:end="1986:62">file</name></decl></parameter>, <parameter pos:start="1986:65" pos:end="1986:76"><decl pos:start="1986:65" pos:end="1986:76"><type pos:start="1986:65" pos:end="1986:76"><name pos:start="1986:65" pos:end="1986:68">File</name></type> <name pos:start="1986:70" pos:end="1986:76">destZip</name></decl></parameter>)</parameter_list> <block pos:start="1986:79" pos:end="1988:3">{<block_content pos:start="1987:5" pos:end="1987:55">
    <expr_stmt pos:start="1987:5" pos:end="1987:55"><expr pos:start="1987:5" pos:end="1987:54"><call pos:start="1987:5" pos:end="1987:54"><name pos:start="1987:5" pos:end="1987:12">addEntry</name><argument_list pos:start="1987:13" pos:end="1987:54">(<argument pos:start="1987:14" pos:end="1987:16"><expr pos:start="1987:14" pos:end="1987:16"><name pos:start="1987:14" pos:end="1987:16">zip</name></expr></argument>, <argument pos:start="1987:19" pos:end="1987:44"><expr pos:start="1987:19" pos:end="1987:44"><operator pos:start="1987:19" pos:end="1987:21">new</operator> <call pos:start="1987:23" pos:end="1987:44"><name pos:start="1987:23" pos:end="1987:32">FileSource</name><argument_list pos:start="1987:33" pos:end="1987:44">(<argument pos:start="1987:34" pos:end="1987:37"><expr pos:start="1987:34" pos:end="1987:37"><name pos:start="1987:34" pos:end="1987:37">path</name></expr></argument>, <argument pos:start="1987:40" pos:end="1987:43"><expr pos:start="1987:40" pos:end="1987:43"><name pos:start="1987:40" pos:end="1987:43">file</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1987:47" pos:end="1987:53"><expr pos:start="1987:47" pos:end="1987:53"><name pos:start="1987:47" pos:end="1987:53">destZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="1990:3" pos:end="1999:5">/**
   * Changes a zip file, adds one new entry in-place.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param file
   *          new entry to be added.
   */</comment>
  <function pos:start="2000:3" pos:end="2007:3"><type pos:start="2000:3" pos:end="2000:20"><specifier pos:start="2000:3" pos:end="2000:8">public</specifier> <specifier pos:start="2000:10" pos:end="2000:15">static</specifier> <name pos:start="2000:17" pos:end="2000:20">void</name></type> <name pos:start="2000:22" pos:end="2000:29">addEntry</name><parameter_list pos:start="2000:30" pos:end="2000:81">(<parameter pos:start="2000:31" pos:end="2000:44"><decl pos:start="2000:31" pos:end="2000:44"><type pos:start="2000:31" pos:end="2000:44"><specifier pos:start="2000:31" pos:end="2000:35">final</specifier> <name pos:start="2000:37" pos:end="2000:40">File</name></type> <name pos:start="2000:42" pos:end="2000:44">zip</name></decl></parameter>, <parameter pos:start="2000:47" pos:end="2000:63"><decl pos:start="2000:47" pos:end="2000:63"><type pos:start="2000:47" pos:end="2000:63"><specifier pos:start="2000:47" pos:end="2000:51">final</specifier> <name pos:start="2000:53" pos:end="2000:58">String</name></type> <name pos:start="2000:60" pos:end="2000:63">path</name></decl></parameter>, <parameter pos:start="2000:66" pos:end="2000:80"><decl pos:start="2000:66" pos:end="2000:80"><type pos:start="2000:66" pos:end="2000:80"><specifier pos:start="2000:66" pos:end="2000:70">final</specifier> <name pos:start="2000:72" pos:end="2000:75">File</name></type> <name pos:start="2000:77" pos:end="2000:80">file</name></decl></parameter>)</parameter_list> <block pos:start="2000:83" pos:end="2007:3">{<block_content pos:start="2001:5" pos:end="2006:7">
    <expr_stmt pos:start="2001:5" pos:end="2006:7"><expr pos:start="2001:5" pos:end="2006:6"><call pos:start="2001:5" pos:end="2006:6"><name pos:start="2001:5" pos:end="2001:18">operateInPlace</name><argument_list pos:start="2001:19" pos:end="2006:6">(<argument pos:start="2001:20" pos:end="2001:22"><expr pos:start="2001:20" pos:end="2001:22"><name pos:start="2001:20" pos:end="2001:22">zip</name></expr></argument>, <argument pos:start="2001:25" pos:end="2006:5"><expr pos:start="2001:25" pos:end="2006:5"><operator pos:start="2001:25" pos:end="2001:27">new</operator> <class pos:start="2001:29" pos:end="2006:5"><super pos:start="2001:29" pos:end="2001:41"><name pos:start="2001:29" pos:end="2001:41">InPlaceAction</name></super><argument_list pos:start="2001:42" pos:end="2001:43">()</argument_list> <block pos:start="2001:45" pos:end="2006:5">{
      <function pos:start="2002:7" pos:end="2005:7"><type pos:start="2002:7" pos:end="2002:20"><specifier pos:start="2002:7" pos:end="2002:12">public</specifier> <name pos:start="2002:14" pos:end="2002:20">boolean</name></type> <name pos:start="2002:22" pos:end="2002:24">act</name><parameter_list pos:start="2002:25" pos:end="2002:38">(<parameter pos:start="2002:26" pos:end="2002:37"><decl pos:start="2002:26" pos:end="2002:37"><type pos:start="2002:26" pos:end="2002:29"><name pos:start="2002:26" pos:end="2002:29">File</name></type> <name pos:start="2002:31" pos:end="2002:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2002:40" pos:end="2005:7">{<block_content pos:start="2003:9" pos:end="2004:20">
        <expr_stmt pos:start="2003:9" pos:end="2003:43"><expr pos:start="2003:9" pos:end="2003:42"><call pos:start="2003:9" pos:end="2003:42"><name pos:start="2003:9" pos:end="2003:16">addEntry</name><argument_list pos:start="2003:17" pos:end="2003:42">(<argument pos:start="2003:18" pos:end="2003:20"><expr pos:start="2003:18" pos:end="2003:20"><name pos:start="2003:18" pos:end="2003:20">zip</name></expr></argument>, <argument pos:start="2003:23" pos:end="2003:26"><expr pos:start="2003:23" pos:end="2003:26"><name pos:start="2003:23" pos:end="2003:26">path</name></expr></argument>, <argument pos:start="2003:29" pos:end="2003:32"><expr pos:start="2003:29" pos:end="2003:32"><name pos:start="2003:29" pos:end="2003:32">file</name></expr></argument>, <argument pos:start="2003:35" pos:end="2003:41"><expr pos:start="2003:35" pos:end="2003:41"><name pos:start="2003:35" pos:end="2003:41">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2004:9" pos:end="2004:20">return <expr pos:start="2004:16" pos:end="2004:19"><literal type="boolean" pos:start="2004:16" pos:end="2004:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2009:3" pos:end="2020:5">/**
   * Copies an existing ZIP file and appends it with one new entry.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   * @param destZip
   *          new ZIP file created.
   */</comment>
  <function pos:start="2021:3" pos:end="2023:3"><type pos:start="2021:3" pos:end="2021:20"><specifier pos:start="2021:3" pos:end="2021:8">public</specifier> <specifier pos:start="2021:10" pos:end="2021:15">static</specifier> <name pos:start="2021:17" pos:end="2021:20">void</name></type> <name pos:start="2021:22" pos:end="2021:29">addEntry</name><parameter_list pos:start="2021:30" pos:end="2021:80">(<parameter pos:start="2021:31" pos:end="2021:38"><decl pos:start="2021:31" pos:end="2021:38"><type pos:start="2021:31" pos:end="2021:38"><name pos:start="2021:31" pos:end="2021:34">File</name></type> <name pos:start="2021:36" pos:end="2021:38">zip</name></decl></parameter>, <parameter pos:start="2021:41" pos:end="2021:51"><decl pos:start="2021:41" pos:end="2021:51"><type pos:start="2021:41" pos:end="2021:51"><name pos:start="2021:41" pos:end="2021:46">String</name></type> <name pos:start="2021:48" pos:end="2021:51">path</name></decl></parameter>, <parameter pos:start="2021:54" pos:end="2021:65"><decl pos:start="2021:54" pos:end="2021:65"><type pos:start="2021:54" pos:end="2021:65"><name pos:start="2021:54" pos:end="2021:59"><name pos:start="2021:54" pos:end="2021:57">byte</name><index pos:start="2021:58" pos:end="2021:59">[]</index></name></type> <name pos:start="2021:61" pos:end="2021:65">bytes</name></decl></parameter>, <parameter pos:start="2021:68" pos:end="2021:79"><decl pos:start="2021:68" pos:end="2021:79"><type pos:start="2021:68" pos:end="2021:79"><name pos:start="2021:68" pos:end="2021:71">File</name></type> <name pos:start="2021:73" pos:end="2021:79">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2021:82" pos:end="2023:3">{<block_content pos:start="2022:5" pos:end="2022:56">
    <expr_stmt pos:start="2022:5" pos:end="2022:56"><expr pos:start="2022:5" pos:end="2022:55"><call pos:start="2022:5" pos:end="2022:55"><name pos:start="2022:5" pos:end="2022:12">addEntry</name><argument_list pos:start="2022:13" pos:end="2022:55">(<argument pos:start="2022:14" pos:end="2022:16"><expr pos:start="2022:14" pos:end="2022:16"><name pos:start="2022:14" pos:end="2022:16">zip</name></expr></argument>, <argument pos:start="2022:19" pos:end="2022:45"><expr pos:start="2022:19" pos:end="2022:45"><operator pos:start="2022:19" pos:end="2022:21">new</operator> <call pos:start="2022:23" pos:end="2022:45"><name pos:start="2022:23" pos:end="2022:32">ByteSource</name><argument_list pos:start="2022:33" pos:end="2022:45">(<argument pos:start="2022:34" pos:end="2022:37"><expr pos:start="2022:34" pos:end="2022:37"><name pos:start="2022:34" pos:end="2022:37">path</name></expr></argument>, <argument pos:start="2022:40" pos:end="2022:44"><expr pos:start="2022:40" pos:end="2022:44"><name pos:start="2022:40" pos:end="2022:44">bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2022:48" pos:end="2022:54"><expr pos:start="2022:48" pos:end="2022:54"><name pos:start="2022:48" pos:end="2022:54">destZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2025:3" pos:end="2038:5">/**
   * Copies an existing ZIP file and appends it with one new entry.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   * @param destZip
   *          new ZIP file created.
   * @param compressionMethod
   *          the new compression method (&lt;code&gt;ZipEntry.STORED&lt;/code&gt; or &lt;code&gt;ZipEntry.DEFLATED&lt;/code&gt;).
   */</comment>
  <function pos:start="2039:3" pos:end="2041:3"><type pos:start="2039:3" pos:end="2039:20"><specifier pos:start="2039:3" pos:end="2039:8">public</specifier> <specifier pos:start="2039:10" pos:end="2039:15">static</specifier> <name pos:start="2039:17" pos:end="2039:20">void</name></type> <name pos:start="2039:22" pos:end="2039:29">addEntry</name><parameter_list pos:start="2039:30" pos:end="2039:109">(<parameter pos:start="2039:31" pos:end="2039:38"><decl pos:start="2039:31" pos:end="2039:38"><type pos:start="2039:31" pos:end="2039:38"><name pos:start="2039:31" pos:end="2039:34">File</name></type> <name pos:start="2039:36" pos:end="2039:38">zip</name></decl></parameter>, <parameter pos:start="2039:41" pos:end="2039:51"><decl pos:start="2039:41" pos:end="2039:51"><type pos:start="2039:41" pos:end="2039:51"><name pos:start="2039:41" pos:end="2039:46">String</name></type> <name pos:start="2039:48" pos:end="2039:51">path</name></decl></parameter>, <parameter pos:start="2039:54" pos:end="2039:65"><decl pos:start="2039:54" pos:end="2039:65"><type pos:start="2039:54" pos:end="2039:65"><name pos:start="2039:54" pos:end="2039:59"><name pos:start="2039:54" pos:end="2039:57">byte</name><index pos:start="2039:58" pos:end="2039:59">[]</index></name></type> <name pos:start="2039:61" pos:end="2039:65">bytes</name></decl></parameter>, <parameter pos:start="2039:68" pos:end="2039:79"><decl pos:start="2039:68" pos:end="2039:79"><type pos:start="2039:68" pos:end="2039:79"><name pos:start="2039:68" pos:end="2039:71">File</name></type> <name pos:start="2039:73" pos:end="2039:79">destZip</name></decl></parameter>, <parameter pos:start="2039:82" pos:end="2039:108"><decl pos:start="2039:82" pos:end="2039:108"><type pos:start="2039:82" pos:end="2039:108"><specifier pos:start="2039:82" pos:end="2039:86">final</specifier> <name pos:start="2039:88" pos:end="2039:90">int</name></type> <name pos:start="2039:92" pos:end="2039:108">compressionMethod</name></decl></parameter>)</parameter_list> <block pos:start="2039:111" pos:end="2041:3">{<block_content pos:start="2040:5" pos:end="2040:75">
    <expr_stmt pos:start="2040:5" pos:end="2040:75"><expr pos:start="2040:5" pos:end="2040:74"><call pos:start="2040:5" pos:end="2040:74"><name pos:start="2040:5" pos:end="2040:12">addEntry</name><argument_list pos:start="2040:13" pos:end="2040:74">(<argument pos:start="2040:14" pos:end="2040:16"><expr pos:start="2040:14" pos:end="2040:16"><name pos:start="2040:14" pos:end="2040:16">zip</name></expr></argument>, <argument pos:start="2040:19" pos:end="2040:64"><expr pos:start="2040:19" pos:end="2040:64"><operator pos:start="2040:19" pos:end="2040:21">new</operator> <call pos:start="2040:23" pos:end="2040:64"><name pos:start="2040:23" pos:end="2040:32">ByteSource</name><argument_list pos:start="2040:33" pos:end="2040:64">(<argument pos:start="2040:34" pos:end="2040:37"><expr pos:start="2040:34" pos:end="2040:37"><name pos:start="2040:34" pos:end="2040:37">path</name></expr></argument>, <argument pos:start="2040:40" pos:end="2040:44"><expr pos:start="2040:40" pos:end="2040:44"><name pos:start="2040:40" pos:end="2040:44">bytes</name></expr></argument>, <argument pos:start="2040:47" pos:end="2040:63"><expr pos:start="2040:47" pos:end="2040:63"><name pos:start="2040:47" pos:end="2040:63">compressionMethod</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2040:67" pos:end="2040:73"><expr pos:start="2040:67" pos:end="2040:73"><name pos:start="2040:67" pos:end="2040:73">destZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2043:3" pos:end="2052:5">/**
   * Changes a zip file, adds one new entry in-place.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   */</comment>
  <function pos:start="2053:3" pos:end="2060:3"><type pos:start="2053:3" pos:end="2053:20"><specifier pos:start="2053:3" pos:end="2053:8">public</specifier> <specifier pos:start="2053:10" pos:end="2053:15">static</specifier> <name pos:start="2053:17" pos:end="2053:20">void</name></type> <name pos:start="2053:22" pos:end="2053:29">addEntry</name><parameter_list pos:start="2053:30" pos:end="2053:84">(<parameter pos:start="2053:31" pos:end="2053:44"><decl pos:start="2053:31" pos:end="2053:44"><type pos:start="2053:31" pos:end="2053:44"><specifier pos:start="2053:31" pos:end="2053:35">final</specifier> <name pos:start="2053:37" pos:end="2053:40">File</name></type> <name pos:start="2053:42" pos:end="2053:44">zip</name></decl></parameter>, <parameter pos:start="2053:47" pos:end="2053:63"><decl pos:start="2053:47" pos:end="2053:63"><type pos:start="2053:47" pos:end="2053:63"><specifier pos:start="2053:47" pos:end="2053:51">final</specifier> <name pos:start="2053:53" pos:end="2053:58">String</name></type> <name pos:start="2053:60" pos:end="2053:63">path</name></decl></parameter>, <parameter pos:start="2053:66" pos:end="2053:83"><decl pos:start="2053:66" pos:end="2053:83"><type pos:start="2053:66" pos:end="2053:83"><specifier pos:start="2053:66" pos:end="2053:70">final</specifier> <name pos:start="2053:72" pos:end="2053:77"><name pos:start="2053:72" pos:end="2053:75">byte</name><index pos:start="2053:76" pos:end="2053:77">[]</index></name></type> <name pos:start="2053:79" pos:end="2053:83">bytes</name></decl></parameter>)</parameter_list> <block pos:start="2053:86" pos:end="2060:3">{<block_content pos:start="2054:5" pos:end="2059:7">
    <expr_stmt pos:start="2054:5" pos:end="2059:7"><expr pos:start="2054:5" pos:end="2059:6"><call pos:start="2054:5" pos:end="2059:6"><name pos:start="2054:5" pos:end="2054:18">operateInPlace</name><argument_list pos:start="2054:19" pos:end="2059:6">(<argument pos:start="2054:20" pos:end="2054:22"><expr pos:start="2054:20" pos:end="2054:22"><name pos:start="2054:20" pos:end="2054:22">zip</name></expr></argument>, <argument pos:start="2054:25" pos:end="2059:5"><expr pos:start="2054:25" pos:end="2059:5"><operator pos:start="2054:25" pos:end="2054:27">new</operator> <class pos:start="2054:29" pos:end="2059:5"><super pos:start="2054:29" pos:end="2054:41"><name pos:start="2054:29" pos:end="2054:41">InPlaceAction</name></super><argument_list pos:start="2054:42" pos:end="2054:43">()</argument_list> <block pos:start="2054:45" pos:end="2059:5">{
      <function pos:start="2055:7" pos:end="2058:7"><type pos:start="2055:7" pos:end="2055:20"><specifier pos:start="2055:7" pos:end="2055:12">public</specifier> <name pos:start="2055:14" pos:end="2055:20">boolean</name></type> <name pos:start="2055:22" pos:end="2055:24">act</name><parameter_list pos:start="2055:25" pos:end="2055:38">(<parameter pos:start="2055:26" pos:end="2055:37"><decl pos:start="2055:26" pos:end="2055:37"><type pos:start="2055:26" pos:end="2055:29"><name pos:start="2055:26" pos:end="2055:29">File</name></type> <name pos:start="2055:31" pos:end="2055:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2055:40" pos:end="2058:7">{<block_content pos:start="2056:9" pos:end="2057:20">
        <expr_stmt pos:start="2056:9" pos:end="2056:44"><expr pos:start="2056:9" pos:end="2056:43"><call pos:start="2056:9" pos:end="2056:43"><name pos:start="2056:9" pos:end="2056:16">addEntry</name><argument_list pos:start="2056:17" pos:end="2056:43">(<argument pos:start="2056:18" pos:end="2056:20"><expr pos:start="2056:18" pos:end="2056:20"><name pos:start="2056:18" pos:end="2056:20">zip</name></expr></argument>, <argument pos:start="2056:23" pos:end="2056:26"><expr pos:start="2056:23" pos:end="2056:26"><name pos:start="2056:23" pos:end="2056:26">path</name></expr></argument>, <argument pos:start="2056:29" pos:end="2056:33"><expr pos:start="2056:29" pos:end="2056:33"><name pos:start="2056:29" pos:end="2056:33">bytes</name></expr></argument>, <argument pos:start="2056:36" pos:end="2056:42"><expr pos:start="2056:36" pos:end="2056:42"><name pos:start="2056:36" pos:end="2056:42">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2057:9" pos:end="2057:20">return <expr pos:start="2057:16" pos:end="2057:19"><literal type="boolean" pos:start="2057:16" pos:end="2057:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2062:3" pos:end="2073:5">/**
   * Changes a zip file, adds one new entry in-place.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   * @param compressionMethod
   *          the new compression method (&lt;code&gt;ZipEntry.STORED&lt;/code&gt; or &lt;code&gt;ZipEntry.DEFLATED&lt;/code&gt;).
   */</comment>
  <function pos:start="2074:3" pos:end="2081:3"><type pos:start="2074:3" pos:end="2074:20"><specifier pos:start="2074:3" pos:end="2074:8">public</specifier> <specifier pos:start="2074:10" pos:end="2074:15">static</specifier> <name pos:start="2074:17" pos:end="2074:20">void</name></type> <name pos:start="2074:22" pos:end="2074:29">addEntry</name><parameter_list pos:start="2074:30" pos:end="2074:113">(<parameter pos:start="2074:31" pos:end="2074:44"><decl pos:start="2074:31" pos:end="2074:44"><type pos:start="2074:31" pos:end="2074:44"><specifier pos:start="2074:31" pos:end="2074:35">final</specifier> <name pos:start="2074:37" pos:end="2074:40">File</name></type> <name pos:start="2074:42" pos:end="2074:44">zip</name></decl></parameter>, <parameter pos:start="2074:47" pos:end="2074:63"><decl pos:start="2074:47" pos:end="2074:63"><type pos:start="2074:47" pos:end="2074:63"><specifier pos:start="2074:47" pos:end="2074:51">final</specifier> <name pos:start="2074:53" pos:end="2074:58">String</name></type> <name pos:start="2074:60" pos:end="2074:63">path</name></decl></parameter>, <parameter pos:start="2074:66" pos:end="2074:83"><decl pos:start="2074:66" pos:end="2074:83"><type pos:start="2074:66" pos:end="2074:83"><specifier pos:start="2074:66" pos:end="2074:70">final</specifier> <name pos:start="2074:72" pos:end="2074:77"><name pos:start="2074:72" pos:end="2074:75">byte</name><index pos:start="2074:76" pos:end="2074:77">[]</index></name></type> <name pos:start="2074:79" pos:end="2074:83">bytes</name></decl></parameter>, <parameter pos:start="2074:86" pos:end="2074:112"><decl pos:start="2074:86" pos:end="2074:112"><type pos:start="2074:86" pos:end="2074:112"><specifier pos:start="2074:86" pos:end="2074:90">final</specifier> <name pos:start="2074:92" pos:end="2074:94">int</name></type> <name pos:start="2074:96" pos:end="2074:112">compressionMethod</name></decl></parameter>)</parameter_list> <block pos:start="2074:115" pos:end="2081:3">{<block_content pos:start="2075:5" pos:end="2080:7">
    <expr_stmt pos:start="2075:5" pos:end="2080:7"><expr pos:start="2075:5" pos:end="2080:6"><call pos:start="2075:5" pos:end="2080:6"><name pos:start="2075:5" pos:end="2075:18">operateInPlace</name><argument_list pos:start="2075:19" pos:end="2080:6">(<argument pos:start="2075:20" pos:end="2075:22"><expr pos:start="2075:20" pos:end="2075:22"><name pos:start="2075:20" pos:end="2075:22">zip</name></expr></argument>, <argument pos:start="2075:25" pos:end="2080:5"><expr pos:start="2075:25" pos:end="2080:5"><operator pos:start="2075:25" pos:end="2075:27">new</operator> <class pos:start="2075:29" pos:end="2080:5"><super pos:start="2075:29" pos:end="2075:41"><name pos:start="2075:29" pos:end="2075:41">InPlaceAction</name></super><argument_list pos:start="2075:42" pos:end="2075:43">()</argument_list> <block pos:start="2075:45" pos:end="2080:5">{
      <function pos:start="2076:7" pos:end="2079:7"><type pos:start="2076:7" pos:end="2076:20"><specifier pos:start="2076:7" pos:end="2076:12">public</specifier> <name pos:start="2076:14" pos:end="2076:20">boolean</name></type> <name pos:start="2076:22" pos:end="2076:24">act</name><parameter_list pos:start="2076:25" pos:end="2076:38">(<parameter pos:start="2076:26" pos:end="2076:37"><decl pos:start="2076:26" pos:end="2076:37"><type pos:start="2076:26" pos:end="2076:29"><name pos:start="2076:26" pos:end="2076:29">File</name></type> <name pos:start="2076:31" pos:end="2076:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2076:40" pos:end="2079:7">{<block_content pos:start="2077:9" pos:end="2078:20">
        <expr_stmt pos:start="2077:9" pos:end="2077:63"><expr pos:start="2077:9" pos:end="2077:62"><call pos:start="2077:9" pos:end="2077:62"><name pos:start="2077:9" pos:end="2077:16">addEntry</name><argument_list pos:start="2077:17" pos:end="2077:62">(<argument pos:start="2077:18" pos:end="2077:20"><expr pos:start="2077:18" pos:end="2077:20"><name pos:start="2077:18" pos:end="2077:20">zip</name></expr></argument>, <argument pos:start="2077:23" pos:end="2077:26"><expr pos:start="2077:23" pos:end="2077:26"><name pos:start="2077:23" pos:end="2077:26">path</name></expr></argument>, <argument pos:start="2077:29" pos:end="2077:33"><expr pos:start="2077:29" pos:end="2077:33"><name pos:start="2077:29" pos:end="2077:33">bytes</name></expr></argument>, <argument pos:start="2077:36" pos:end="2077:42"><expr pos:start="2077:36" pos:end="2077:42"><name pos:start="2077:36" pos:end="2077:42">tmpFile</name></expr></argument>, <argument pos:start="2077:45" pos:end="2077:61"><expr pos:start="2077:45" pos:end="2077:61"><name pos:start="2077:45" pos:end="2077:61">compressionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2078:9" pos:end="2078:20">return <expr pos:start="2078:16" pos:end="2078:19"><literal type="boolean" pos:start="2078:16" pos:end="2078:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2083:3" pos:end="2092:5">/**
   * Copies an existing ZIP file and appends it with one new entry.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entry
   *          new ZIP entry appended.
   * @param destZip
   *          new ZIP file created.
   */</comment>
  <function pos:start="2093:3" pos:end="2095:3"><type pos:start="2093:3" pos:end="2093:20"><specifier pos:start="2093:3" pos:end="2093:8">public</specifier> <specifier pos:start="2093:10" pos:end="2093:15">static</specifier> <name pos:start="2093:17" pos:end="2093:20">void</name></type> <name pos:start="2093:22" pos:end="2093:29">addEntry</name><parameter_list pos:start="2093:30" pos:end="2093:75">(<parameter pos:start="2093:31" pos:end="2093:38"><decl pos:start="2093:31" pos:end="2093:38"><type pos:start="2093:31" pos:end="2093:38"><name pos:start="2093:31" pos:end="2093:34">File</name></type> <name pos:start="2093:36" pos:end="2093:38">zip</name></decl></parameter>, <parameter pos:start="2093:41" pos:end="2093:60"><decl pos:start="2093:41" pos:end="2093:60"><type pos:start="2093:41" pos:end="2093:60"><name pos:start="2093:41" pos:end="2093:54">ZipEntrySource</name></type> <name pos:start="2093:56" pos:end="2093:60">entry</name></decl></parameter>, <parameter pos:start="2093:63" pos:end="2093:74"><decl pos:start="2093:63" pos:end="2093:74"><type pos:start="2093:63" pos:end="2093:74"><name pos:start="2093:63" pos:end="2093:66">File</name></type> <name pos:start="2093:68" pos:end="2093:74">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2093:77" pos:end="2095:3">{<block_content pos:start="2094:5" pos:end="2094:61">
    <expr_stmt pos:start="2094:5" pos:end="2094:61"><expr pos:start="2094:5" pos:end="2094:60"><call pos:start="2094:5" pos:end="2094:60"><name pos:start="2094:5" pos:end="2094:14">addEntries</name><argument_list pos:start="2094:15" pos:end="2094:60">(<argument pos:start="2094:16" pos:end="2094:18"><expr pos:start="2094:16" pos:end="2094:18"><name pos:start="2094:16" pos:end="2094:18">zip</name></expr></argument>, <argument pos:start="2094:21" pos:end="2094:50"><expr pos:start="2094:21" pos:end="2094:50"><operator pos:start="2094:21" pos:end="2094:23">new</operator> <name pos:start="2094:25" pos:end="2094:40"><name pos:start="2094:25" pos:end="2094:38">ZipEntrySource</name><index pos:start="2094:39" pos:end="2094:40">[]</index></name> <block pos:start="2094:42" pos:end="2094:50">{ <expr pos:start="2094:44" pos:end="2094:48"><name pos:start="2094:44" pos:end="2094:48">entry</name></expr> }</block></expr></argument>, <argument pos:start="2094:53" pos:end="2094:59"><expr pos:start="2094:53" pos:end="2094:59"><name pos:start="2094:53" pos:end="2094:59">destZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2097:3" pos:end="2104:5">/**
   * Changes a zip file, adds one new entry in-place.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entry
   *          new ZIP entry appended.
   */</comment>
  <function pos:start="2105:3" pos:end="2112:3"><type pos:start="2105:3" pos:end="2105:20"><specifier pos:start="2105:3" pos:end="2105:8">public</specifier> <specifier pos:start="2105:10" pos:end="2105:15">static</specifier> <name pos:start="2105:17" pos:end="2105:20">void</name></type> <name pos:start="2105:22" pos:end="2105:29">addEntry</name><parameter_list pos:start="2105:30" pos:end="2105:73">(<parameter pos:start="2105:31" pos:end="2105:44"><decl pos:start="2105:31" pos:end="2105:44"><type pos:start="2105:31" pos:end="2105:44"><specifier pos:start="2105:31" pos:end="2105:35">final</specifier> <name pos:start="2105:37" pos:end="2105:40">File</name></type> <name pos:start="2105:42" pos:end="2105:44">zip</name></decl></parameter>, <parameter pos:start="2105:47" pos:end="2105:72"><decl pos:start="2105:47" pos:end="2105:72"><type pos:start="2105:47" pos:end="2105:72"><specifier pos:start="2105:47" pos:end="2105:51">final</specifier> <name pos:start="2105:53" pos:end="2105:66">ZipEntrySource</name></type> <name pos:start="2105:68" pos:end="2105:72">entry</name></decl></parameter>)</parameter_list> <block pos:start="2105:75" pos:end="2112:3">{<block_content pos:start="2106:5" pos:end="2111:7">
    <expr_stmt pos:start="2106:5" pos:end="2111:7"><expr pos:start="2106:5" pos:end="2111:6"><call pos:start="2106:5" pos:end="2111:6"><name pos:start="2106:5" pos:end="2106:18">operateInPlace</name><argument_list pos:start="2106:19" pos:end="2111:6">(<argument pos:start="2106:20" pos:end="2106:22"><expr pos:start="2106:20" pos:end="2106:22"><name pos:start="2106:20" pos:end="2106:22">zip</name></expr></argument>, <argument pos:start="2106:25" pos:end="2111:5"><expr pos:start="2106:25" pos:end="2111:5"><operator pos:start="2106:25" pos:end="2106:27">new</operator> <class pos:start="2106:29" pos:end="2111:5"><super pos:start="2106:29" pos:end="2106:41"><name pos:start="2106:29" pos:end="2106:41">InPlaceAction</name></super><argument_list pos:start="2106:42" pos:end="2106:43">()</argument_list> <block pos:start="2106:45" pos:end="2111:5">{
      <function pos:start="2107:7" pos:end="2110:7"><type pos:start="2107:7" pos:end="2107:20"><specifier pos:start="2107:7" pos:end="2107:12">public</specifier> <name pos:start="2107:14" pos:end="2107:20">boolean</name></type> <name pos:start="2107:22" pos:end="2107:24">act</name><parameter_list pos:start="2107:25" pos:end="2107:38">(<parameter pos:start="2107:26" pos:end="2107:37"><decl pos:start="2107:26" pos:end="2107:37"><type pos:start="2107:26" pos:end="2107:29"><name pos:start="2107:26" pos:end="2107:29">File</name></type> <name pos:start="2107:31" pos:end="2107:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2107:40" pos:end="2110:7">{<block_content pos:start="2108:9" pos:end="2109:20">
        <expr_stmt pos:start="2108:9" pos:end="2108:38"><expr pos:start="2108:9" pos:end="2108:37"><call pos:start="2108:9" pos:end="2108:37"><name pos:start="2108:9" pos:end="2108:16">addEntry</name><argument_list pos:start="2108:17" pos:end="2108:37">(<argument pos:start="2108:18" pos:end="2108:20"><expr pos:start="2108:18" pos:end="2108:20"><name pos:start="2108:18" pos:end="2108:20">zip</name></expr></argument>, <argument pos:start="2108:23" pos:end="2108:27"><expr pos:start="2108:23" pos:end="2108:27"><name pos:start="2108:23" pos:end="2108:27">entry</name></expr></argument>, <argument pos:start="2108:30" pos:end="2108:36"><expr pos:start="2108:30" pos:end="2108:36"><name pos:start="2108:30" pos:end="2108:36">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2109:9" pos:end="2109:20">return <expr pos:start="2109:16" pos:end="2109:19"><literal type="boolean" pos:start="2109:16" pos:end="2109:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2114:3" pos:end="2123:5">/**
   * Copies an existing ZIP file and appends it with new entries.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          new ZIP entries appended.
   * @param destZip
   *          new ZIP file created.
   */</comment>
  <function pos:start="2124:3" pos:end="2140:3"><type pos:start="2124:3" pos:end="2124:20"><specifier pos:start="2124:3" pos:end="2124:8">public</specifier> <specifier pos:start="2124:10" pos:end="2124:15">static</specifier> <name pos:start="2124:17" pos:end="2124:20">void</name></type> <name pos:start="2124:22" pos:end="2124:31">addEntries</name><parameter_list pos:start="2124:32" pos:end="2124:81">(<parameter pos:start="2124:33" pos:end="2124:40"><decl pos:start="2124:33" pos:end="2124:40"><type pos:start="2124:33" pos:end="2124:40"><name pos:start="2124:33" pos:end="2124:36">File</name></type> <name pos:start="2124:38" pos:end="2124:40">zip</name></decl></parameter>, <parameter pos:start="2124:43" pos:end="2124:66"><decl pos:start="2124:43" pos:end="2124:66"><type pos:start="2124:43" pos:end="2124:66"><name pos:start="2124:43" pos:end="2124:58"><name pos:start="2124:43" pos:end="2124:56">ZipEntrySource</name><index pos:start="2124:57" pos:end="2124:58">[]</index></name></type> <name pos:start="2124:60" pos:end="2124:66">entries</name></decl></parameter>, <parameter pos:start="2124:69" pos:end="2124:80"><decl pos:start="2124:69" pos:end="2124:80"><type pos:start="2124:69" pos:end="2124:80"><name pos:start="2124:69" pos:end="2124:72">File</name></type> <name pos:start="2124:74" pos:end="2124:80">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2124:83" pos:end="2140:3">{<block_content pos:start="2125:5" pos:end="2139:5">
    <if_stmt pos:start="2125:5" pos:end="2127:5"><if pos:start="2125:5" pos:end="2127:5">if <condition pos:start="2125:8" pos:end="2125:29">(<expr pos:start="2125:9" pos:end="2125:28"><call pos:start="2125:9" pos:end="2125:28"><name pos:start="2125:9" pos:end="2125:26"><name pos:start="2125:9" pos:end="2125:11">log</name><operator pos:start="2125:12" pos:end="2125:12">.</operator><name pos:start="2125:13" pos:end="2125:26">isDebugEnabled</name></name><argument_list pos:start="2125:27" pos:end="2125:28">()</argument_list></call></expr>)</condition> <block pos:start="2125:31" pos:end="2127:5">{<block_content pos:start="2126:7" pos:end="2126:105">
      <expr_stmt pos:start="2126:7" pos:end="2126:105"><expr pos:start="2126:7" pos:end="2126:104"><call pos:start="2126:7" pos:end="2126:104"><name pos:start="2126:7" pos:end="2126:15"><name pos:start="2126:7" pos:end="2126:9">log</name><operator pos:start="2126:10" pos:end="2126:10">.</operator><name pos:start="2126:11" pos:end="2126:15">debug</name></name><argument_list pos:start="2126:16" pos:end="2126:104">(<argument pos:start="2126:17" pos:end="2126:103"><expr pos:start="2126:17" pos:end="2126:103"><literal type="string" pos:start="2126:17" pos:end="2126:27">"Copying '"</literal> <operator pos:start="2126:29" pos:end="2126:29">+</operator> <name pos:start="2126:31" pos:end="2126:33">zip</name> <operator pos:start="2126:35" pos:end="2126:35">+</operator> <literal type="string" pos:start="2126:37" pos:end="2126:44">"' to '"</literal> <operator pos:start="2126:46" pos:end="2126:46">+</operator> <name pos:start="2126:48" pos:end="2126:54">destZip</name> <operator pos:start="2126:56" pos:end="2126:56">+</operator> <literal type="string" pos:start="2126:58" pos:end="2126:72">"' and adding "</literal> <operator pos:start="2126:74" pos:end="2126:74">+</operator> <call pos:start="2126:76" pos:end="2126:97"><name pos:start="2126:76" pos:end="2126:88"><name pos:start="2126:76" pos:end="2126:81">Arrays</name><operator pos:start="2126:82" pos:end="2126:82">.</operator><name pos:start="2126:83" pos:end="2126:88">asList</name></name><argument_list pos:start="2126:89" pos:end="2126:97">(<argument pos:start="2126:90" pos:end="2126:96"><expr pos:start="2126:90" pos:end="2126:96"><name pos:start="2126:90" pos:end="2126:96">entries</name></expr></argument>)</argument_list></call> <operator pos:start="2126:99" pos:end="2126:99">+</operator> <literal type="string" pos:start="2126:101" pos:end="2126:103">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2129:5" pos:end="2129:32"><decl pos:start="2129:5" pos:end="2129:31"><type pos:start="2129:5" pos:end="2129:16"><name pos:start="2129:5" pos:end="2129:16">OutputStream</name></type> <name pos:start="2129:18" pos:end="2129:24">destOut</name> <init pos:start="2129:26" pos:end="2129:31">= <expr pos:start="2129:28" pos:end="2129:31"><literal type="null" pos:start="2129:28" pos:end="2129:31">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="2130:5" pos:end="2139:5">try <block pos:start="2130:9" pos:end="2133:5">{<block_content pos:start="2131:7" pos:end="2132:40">
      <expr_stmt pos:start="2131:7" pos:end="2131:72"><expr pos:start="2131:7" pos:end="2131:71"><name pos:start="2131:7" pos:end="2131:13">destOut</name> <operator pos:start="2131:15" pos:end="2131:15">=</operator> <operator pos:start="2131:17" pos:end="2131:19">new</operator> <call pos:start="2131:21" pos:end="2131:71"><name pos:start="2131:21" pos:end="2131:40">BufferedOutputStream</name><argument_list pos:start="2131:41" pos:end="2131:71">(<argument pos:start="2131:42" pos:end="2131:70"><expr pos:start="2131:42" pos:end="2131:70"><operator pos:start="2131:42" pos:end="2131:44">new</operator> <call pos:start="2131:46" pos:end="2131:70"><name pos:start="2131:46" pos:end="2131:61">FileOutputStream</name><argument_list pos:start="2131:62" pos:end="2131:70">(<argument pos:start="2131:63" pos:end="2131:69"><expr pos:start="2131:63" pos:end="2131:69"><name pos:start="2131:63" pos:end="2131:69">destZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="2132:7" pos:end="2132:40"><expr pos:start="2132:7" pos:end="2132:39"><call pos:start="2132:7" pos:end="2132:39"><name pos:start="2132:7" pos:end="2132:16">addEntries</name><argument_list pos:start="2132:17" pos:end="2132:39">(<argument pos:start="2132:18" pos:end="2132:20"><expr pos:start="2132:18" pos:end="2132:20"><name pos:start="2132:18" pos:end="2132:20">zip</name></expr></argument>, <argument pos:start="2132:23" pos:end="2132:29"><expr pos:start="2132:23" pos:end="2132:29"><name pos:start="2132:23" pos:end="2132:29">entries</name></expr></argument>, <argument pos:start="2132:32" pos:end="2132:38"><expr pos:start="2132:32" pos:end="2132:38"><name pos:start="2132:32" pos:end="2132:38">destOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="2134:5" pos:end="2136:5">catch <parameter_list pos:start="2134:11" pos:end="2134:25">(<parameter pos:start="2134:12" pos:end="2134:24"><decl pos:start="2134:12" pos:end="2134:24"><type pos:start="2134:12" pos:end="2134:24"><name pos:start="2134:12" pos:end="2134:22">IOException</name></type> <name pos:start="2134:24" pos:end="2134:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2134:27" pos:end="2136:5">{<block_content pos:start="2135:7" pos:end="2135:34">
      <expr_stmt pos:start="2135:7" pos:end="2135:34"><expr pos:start="2135:7" pos:end="2135:33"><call pos:start="2135:7" pos:end="2135:33"><name pos:start="2135:7" pos:end="2135:30"><name pos:start="2135:7" pos:end="2135:22">ZipExceptionUtil</name><operator pos:start="2135:23" pos:end="2135:23">.</operator><name pos:start="2135:24" pos:end="2135:30">rethrow</name></name><argument_list pos:start="2135:31" pos:end="2135:33">(<argument pos:start="2135:32" pos:end="2135:32"><expr pos:start="2135:32" pos:end="2135:32"><name pos:start="2135:32" pos:end="2135:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch>
    <finally pos:start="2137:5" pos:end="2139:5">finally <block pos:start="2137:13" pos:end="2139:5">{<block_content pos:start="2138:7" pos:end="2138:36">
      <expr_stmt pos:start="2138:7" pos:end="2138:36"><expr pos:start="2138:7" pos:end="2138:35"><call pos:start="2138:7" pos:end="2138:35"><name pos:start="2138:7" pos:end="2138:26"><name pos:start="2138:7" pos:end="2138:13">IOUtils</name><operator pos:start="2138:14" pos:end="2138:14">.</operator><name pos:start="2138:15" pos:end="2138:26">closeQuietly</name></name><argument_list pos:start="2138:27" pos:end="2138:35">(<argument pos:start="2138:28" pos:end="2138:34"><expr pos:start="2138:28" pos:end="2138:34"><name pos:start="2138:28" pos:end="2138:34">destOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2142:3" pos:end="2151:5">/**
   * Copies an existing ZIP file and appends it with new entries.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          new ZIP entries appended.
   * @param destOut
   *          new ZIP destination output stream
   */</comment>
  <function pos:start="2152:3" pos:end="2169:3"><type pos:start="2152:3" pos:end="2152:20"><specifier pos:start="2152:3" pos:end="2152:8">public</specifier> <specifier pos:start="2152:10" pos:end="2152:15">static</specifier> <name pos:start="2152:17" pos:end="2152:20">void</name></type> <name pos:start="2152:22" pos:end="2152:31">addEntries</name><parameter_list pos:start="2152:32" pos:end="2152:89">(<parameter pos:start="2152:33" pos:end="2152:40"><decl pos:start="2152:33" pos:end="2152:40"><type pos:start="2152:33" pos:end="2152:40"><name pos:start="2152:33" pos:end="2152:36">File</name></type> <name pos:start="2152:38" pos:end="2152:40">zip</name></decl></parameter>, <parameter pos:start="2152:43" pos:end="2152:66"><decl pos:start="2152:43" pos:end="2152:66"><type pos:start="2152:43" pos:end="2152:66"><name pos:start="2152:43" pos:end="2152:58"><name pos:start="2152:43" pos:end="2152:56">ZipEntrySource</name><index pos:start="2152:57" pos:end="2152:58">[]</index></name></type> <name pos:start="2152:60" pos:end="2152:66">entries</name></decl></parameter>, <parameter pos:start="2152:69" pos:end="2152:88"><decl pos:start="2152:69" pos:end="2152:88"><type pos:start="2152:69" pos:end="2152:88"><name pos:start="2152:69" pos:end="2152:80">OutputStream</name></type> <name pos:start="2152:82" pos:end="2152:88">destOut</name></decl></parameter>)</parameter_list> <block pos:start="2152:91" pos:end="2169:3">{<block_content pos:start="2153:5" pos:end="2168:5">
    <if_stmt pos:start="2153:5" pos:end="2155:5"><if pos:start="2153:5" pos:end="2155:5">if <condition pos:start="2153:8" pos:end="2153:29">(<expr pos:start="2153:9" pos:end="2153:28"><call pos:start="2153:9" pos:end="2153:28"><name pos:start="2153:9" pos:end="2153:26"><name pos:start="2153:9" pos:end="2153:11">log</name><operator pos:start="2153:12" pos:end="2153:12">.</operator><name pos:start="2153:13" pos:end="2153:26">isDebugEnabled</name></name><argument_list pos:start="2153:27" pos:end="2153:28">()</argument_list></call></expr>)</condition> <block pos:start="2153:31" pos:end="2155:5">{<block_content pos:start="2154:7" pos:end="2154:96">
      <expr_stmt pos:start="2154:7" pos:end="2154:96"><expr pos:start="2154:7" pos:end="2154:95"><call pos:start="2154:7" pos:end="2154:95"><name pos:start="2154:7" pos:end="2154:15"><name pos:start="2154:7" pos:end="2154:9">log</name><operator pos:start="2154:10" pos:end="2154:10">.</operator><name pos:start="2154:11" pos:end="2154:15">debug</name></name><argument_list pos:start="2154:16" pos:end="2154:95">(<argument pos:start="2154:17" pos:end="2154:94"><expr pos:start="2154:17" pos:end="2154:94"><literal type="string" pos:start="2154:17" pos:end="2154:27">"Copying '"</literal> <operator pos:start="2154:29" pos:end="2154:29">+</operator> <name pos:start="2154:31" pos:end="2154:33">zip</name> <operator pos:start="2154:35" pos:end="2154:35">+</operator> <literal type="string" pos:start="2154:37" pos:end="2154:63">"' to a stream and adding "</literal> <operator pos:start="2154:65" pos:end="2154:65">+</operator> <call pos:start="2154:67" pos:end="2154:88"><name pos:start="2154:67" pos:end="2154:79"><name pos:start="2154:67" pos:end="2154:72">Arrays</name><operator pos:start="2154:73" pos:end="2154:73">.</operator><name pos:start="2154:74" pos:end="2154:79">asList</name></name><argument_list pos:start="2154:80" pos:end="2154:88">(<argument pos:start="2154:81" pos:end="2154:87"><expr pos:start="2154:81" pos:end="2154:87"><name pos:start="2154:81" pos:end="2154:87">entries</name></expr></argument>)</argument_list></call> <operator pos:start="2154:90" pos:end="2154:90">+</operator> <literal type="string" pos:start="2154:92" pos:end="2154:94">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2157:5" pos:end="2157:31"><decl pos:start="2157:5" pos:end="2157:30"><type pos:start="2157:5" pos:end="2157:19"><name pos:start="2157:5" pos:end="2157:19">ZipOutputStream</name></type> <name pos:start="2157:21" pos:end="2157:23">out</name> <init pos:start="2157:25" pos:end="2157:30">= <expr pos:start="2157:27" pos:end="2157:30"><literal type="null" pos:start="2157:27" pos:end="2157:30">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="2158:5" pos:end="2168:5">try <block pos:start="2158:9" pos:end="2165:5">{<block_content pos:start="2159:7" pos:end="2164:19">
      <expr_stmt pos:start="2159:7" pos:end="2159:41"><expr pos:start="2159:7" pos:end="2159:40"><name pos:start="2159:7" pos:end="2159:9">out</name> <operator pos:start="2159:11" pos:end="2159:11">=</operator> <operator pos:start="2159:13" pos:end="2159:15">new</operator> <call pos:start="2159:17" pos:end="2159:40"><name pos:start="2159:17" pos:end="2159:31">ZipOutputStream</name><argument_list pos:start="2159:32" pos:end="2159:40">(<argument pos:start="2159:33" pos:end="2159:39"><expr pos:start="2159:33" pos:end="2159:39"><name pos:start="2159:33" pos:end="2159:39">destOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="2160:7" pos:end="2160:28"><expr pos:start="2160:7" pos:end="2160:27"><call pos:start="2160:7" pos:end="2160:27"><name pos:start="2160:7" pos:end="2160:17">copyEntries</name><argument_list pos:start="2160:18" pos:end="2160:27">(<argument pos:start="2160:19" pos:end="2160:21"><expr pos:start="2160:19" pos:end="2160:21"><name pos:start="2160:19" pos:end="2160:21">zip</name></expr></argument>, <argument pos:start="2160:24" pos:end="2160:26"><expr pos:start="2160:24" pos:end="2160:26"><name pos:start="2160:24" pos:end="2160:26">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for pos:start="2161:7" pos:end="2163:7">for <control pos:start="2161:11" pos:end="2161:46">(<init pos:start="2161:12" pos:end="2161:21"><decl pos:start="2161:12" pos:end="2161:20"><type pos:start="2161:12" pos:end="2161:14"><name pos:start="2161:12" pos:end="2161:14">int</name></type> <name pos:start="2161:16" pos:end="2161:16">i</name> <init pos:start="2161:18" pos:end="2161:20">= <expr pos:start="2161:20" pos:end="2161:20"><literal type="number" pos:start="2161:20" pos:end="2161:20">0</literal></expr></init></decl>;</init> <condition pos:start="2161:23" pos:end="2161:41"><expr pos:start="2161:23" pos:end="2161:40"><name pos:start="2161:23" pos:end="2161:23">i</name> <operator pos:start="2161:25" pos:end="2161:25">&lt;</operator> <name pos:start="2161:27" pos:end="2161:40"><name pos:start="2161:27" pos:end="2161:33">entries</name><operator pos:start="2161:34" pos:end="2161:34">.</operator><name pos:start="2161:35" pos:end="2161:40">length</name></name></expr>;</condition> <incr pos:start="2161:43" pos:end="2161:45"><expr pos:start="2161:43" pos:end="2161:45"><name pos:start="2161:43" pos:end="2161:43">i</name><operator pos:start="2161:44" pos:end="2161:45">++</operator></expr></incr>)</control> <block pos:start="2161:48" pos:end="2163:7">{<block_content pos:start="2162:9" pos:end="2162:34">
        <expr_stmt pos:start="2162:9" pos:end="2162:34"><expr pos:start="2162:9" pos:end="2162:33"><call pos:start="2162:9" pos:end="2162:33"><name pos:start="2162:9" pos:end="2162:16">addEntry</name><argument_list pos:start="2162:17" pos:end="2162:33">(<argument pos:start="2162:18" pos:end="2162:27"><expr pos:start="2162:18" pos:end="2162:27"><name pos:start="2162:18" pos:end="2162:27"><name pos:start="2162:18" pos:end="2162:24">entries</name><index pos:start="2162:25" pos:end="2162:27">[<expr pos:start="2162:26" pos:end="2162:26"><name pos:start="2162:26" pos:end="2162:26">i</name></expr>]</index></name></expr></argument>, <argument pos:start="2162:30" pos:end="2162:32"><expr pos:start="2162:30" pos:end="2162:32"><name pos:start="2162:30" pos:end="2162:32">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt pos:start="2164:7" pos:end="2164:19"><expr pos:start="2164:7" pos:end="2164:18"><call pos:start="2164:7" pos:end="2164:18"><name pos:start="2164:7" pos:end="2164:16"><name pos:start="2164:7" pos:end="2164:9">out</name><operator pos:start="2164:10" pos:end="2164:10">.</operator><name pos:start="2164:11" pos:end="2164:16">finish</name></name><argument_list pos:start="2164:17" pos:end="2164:18">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="2166:5" pos:end="2168:5">catch <parameter_list pos:start="2166:11" pos:end="2166:25">(<parameter pos:start="2166:12" pos:end="2166:24"><decl pos:start="2166:12" pos:end="2166:24"><type pos:start="2166:12" pos:end="2166:24"><name pos:start="2166:12" pos:end="2166:22">IOException</name></type> <name pos:start="2166:24" pos:end="2166:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2166:27" pos:end="2168:5">{<block_content pos:start="2167:7" pos:end="2167:34">
      <expr_stmt pos:start="2167:7" pos:end="2167:34"><expr pos:start="2167:7" pos:end="2167:33"><call pos:start="2167:7" pos:end="2167:33"><name pos:start="2167:7" pos:end="2167:30"><name pos:start="2167:7" pos:end="2167:22">ZipExceptionUtil</name><operator pos:start="2167:23" pos:end="2167:23">.</operator><name pos:start="2167:24" pos:end="2167:30">rethrow</name></name><argument_list pos:start="2167:31" pos:end="2167:33">(<argument pos:start="2167:32" pos:end="2167:32"><expr pos:start="2167:32" pos:end="2167:32"><name pos:start="2167:32" pos:end="2167:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2171:3" pos:end="2182:5">/**
   * Copies an existing ZIP file and appends it with new entries.
   *
   * @param is
   *          an existing ZIP input stream.
   * @param entries
   *          new ZIP entries appended.
   * @param destOut
   *          new ZIP destination output stream
   *
   * @since 1.9
   */</comment>
  <function pos:start="2183:3" pos:end="2200:3"><type pos:start="2183:3" pos:end="2183:20"><specifier pos:start="2183:3" pos:end="2183:8">public</specifier> <specifier pos:start="2183:10" pos:end="2183:15">static</specifier> <name pos:start="2183:17" pos:end="2183:20">void</name></type> <name pos:start="2183:22" pos:end="2183:31">addEntries</name><parameter_list pos:start="2183:32" pos:end="2183:95">(<parameter pos:start="2183:33" pos:end="2183:46"><decl pos:start="2183:33" pos:end="2183:46"><type pos:start="2183:33" pos:end="2183:46"><name pos:start="2183:33" pos:end="2183:43">InputStream</name></type> <name pos:start="2183:45" pos:end="2183:46">is</name></decl></parameter>, <parameter pos:start="2183:49" pos:end="2183:72"><decl pos:start="2183:49" pos:end="2183:72"><type pos:start="2183:49" pos:end="2183:72"><name pos:start="2183:49" pos:end="2183:64"><name pos:start="2183:49" pos:end="2183:62">ZipEntrySource</name><index pos:start="2183:63" pos:end="2183:64">[]</index></name></type> <name pos:start="2183:66" pos:end="2183:72">entries</name></decl></parameter>, <parameter pos:start="2183:75" pos:end="2183:94"><decl pos:start="2183:75" pos:end="2183:94"><type pos:start="2183:75" pos:end="2183:94"><name pos:start="2183:75" pos:end="2183:86">OutputStream</name></type> <name pos:start="2183:88" pos:end="2183:94">destOut</name></decl></parameter>)</parameter_list> <block pos:start="2183:97" pos:end="2200:3">{<block_content pos:start="2184:5" pos:end="2199:5">
    <if_stmt pos:start="2184:5" pos:end="2186:5"><if pos:start="2184:5" pos:end="2186:5">if <condition pos:start="2184:8" pos:end="2184:29">(<expr pos:start="2184:9" pos:end="2184:28"><call pos:start="2184:9" pos:end="2184:28"><name pos:start="2184:9" pos:end="2184:26"><name pos:start="2184:9" pos:end="2184:11">log</name><operator pos:start="2184:12" pos:end="2184:12">.</operator><name pos:start="2184:13" pos:end="2184:26">isDebugEnabled</name></name><argument_list pos:start="2184:27" pos:end="2184:28">()</argument_list></call></expr>)</condition> <block pos:start="2184:31" pos:end="2186:5">{<block_content pos:start="2185:7" pos:end="2185:103">
      <expr_stmt pos:start="2185:7" pos:end="2185:103"><expr pos:start="2185:7" pos:end="2185:102"><call pos:start="2185:7" pos:end="2185:102"><name pos:start="2185:7" pos:end="2185:15"><name pos:start="2185:7" pos:end="2185:9">log</name><operator pos:start="2185:10" pos:end="2185:10">.</operator><name pos:start="2185:11" pos:end="2185:15">debug</name></name><argument_list pos:start="2185:16" pos:end="2185:102">(<argument pos:start="2185:17" pos:end="2185:101"><expr pos:start="2185:17" pos:end="2185:101"><literal type="string" pos:start="2185:17" pos:end="2185:70">"Copying input stream to an output stream and adding "</literal> <operator pos:start="2185:72" pos:end="2185:72">+</operator> <call pos:start="2185:74" pos:end="2185:95"><name pos:start="2185:74" pos:end="2185:86"><name pos:start="2185:74" pos:end="2185:79">Arrays</name><operator pos:start="2185:80" pos:end="2185:80">.</operator><name pos:start="2185:81" pos:end="2185:86">asList</name></name><argument_list pos:start="2185:87" pos:end="2185:95">(<argument pos:start="2185:88" pos:end="2185:94"><expr pos:start="2185:88" pos:end="2185:94"><name pos:start="2185:88" pos:end="2185:94">entries</name></expr></argument>)</argument_list></call> <operator pos:start="2185:97" pos:end="2185:97">+</operator> <literal type="string" pos:start="2185:99" pos:end="2185:101">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2188:5" pos:end="2188:31"><decl pos:start="2188:5" pos:end="2188:30"><type pos:start="2188:5" pos:end="2188:19"><name pos:start="2188:5" pos:end="2188:19">ZipOutputStream</name></type> <name pos:start="2188:21" pos:end="2188:23">out</name> <init pos:start="2188:25" pos:end="2188:30">= <expr pos:start="2188:27" pos:end="2188:30"><literal type="null" pos:start="2188:27" pos:end="2188:30">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="2189:5" pos:end="2199:5">try <block pos:start="2189:9" pos:end="2196:5">{<block_content pos:start="2190:7" pos:end="2195:19">
      <expr_stmt pos:start="2190:7" pos:end="2190:41"><expr pos:start="2190:7" pos:end="2190:40"><name pos:start="2190:7" pos:end="2190:9">out</name> <operator pos:start="2190:11" pos:end="2190:11">=</operator> <operator pos:start="2190:13" pos:end="2190:15">new</operator> <call pos:start="2190:17" pos:end="2190:40"><name pos:start="2190:17" pos:end="2190:31">ZipOutputStream</name><argument_list pos:start="2190:32" pos:end="2190:40">(<argument pos:start="2190:33" pos:end="2190:39"><expr pos:start="2190:33" pos:end="2190:39"><name pos:start="2190:33" pos:end="2190:39">destOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="2191:7" pos:end="2191:27"><expr pos:start="2191:7" pos:end="2191:26"><call pos:start="2191:7" pos:end="2191:26"><name pos:start="2191:7" pos:end="2191:17">copyEntries</name><argument_list pos:start="2191:18" pos:end="2191:26">(<argument pos:start="2191:19" pos:end="2191:20"><expr pos:start="2191:19" pos:end="2191:20"><name pos:start="2191:19" pos:end="2191:20">is</name></expr></argument>, <argument pos:start="2191:23" pos:end="2191:25"><expr pos:start="2191:23" pos:end="2191:25"><name pos:start="2191:23" pos:end="2191:25">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for pos:start="2192:7" pos:end="2194:7">for <control pos:start="2192:11" pos:end="2192:46">(<init pos:start="2192:12" pos:end="2192:21"><decl pos:start="2192:12" pos:end="2192:20"><type pos:start="2192:12" pos:end="2192:14"><name pos:start="2192:12" pos:end="2192:14">int</name></type> <name pos:start="2192:16" pos:end="2192:16">i</name> <init pos:start="2192:18" pos:end="2192:20">= <expr pos:start="2192:20" pos:end="2192:20"><literal type="number" pos:start="2192:20" pos:end="2192:20">0</literal></expr></init></decl>;</init> <condition pos:start="2192:23" pos:end="2192:41"><expr pos:start="2192:23" pos:end="2192:40"><name pos:start="2192:23" pos:end="2192:23">i</name> <operator pos:start="2192:25" pos:end="2192:25">&lt;</operator> <name pos:start="2192:27" pos:end="2192:40"><name pos:start="2192:27" pos:end="2192:33">entries</name><operator pos:start="2192:34" pos:end="2192:34">.</operator><name pos:start="2192:35" pos:end="2192:40">length</name></name></expr>;</condition> <incr pos:start="2192:43" pos:end="2192:45"><expr pos:start="2192:43" pos:end="2192:45"><name pos:start="2192:43" pos:end="2192:43">i</name><operator pos:start="2192:44" pos:end="2192:45">++</operator></expr></incr>)</control> <block pos:start="2192:48" pos:end="2194:7">{<block_content pos:start="2193:9" pos:end="2193:34">
        <expr_stmt pos:start="2193:9" pos:end="2193:34"><expr pos:start="2193:9" pos:end="2193:33"><call pos:start="2193:9" pos:end="2193:33"><name pos:start="2193:9" pos:end="2193:16">addEntry</name><argument_list pos:start="2193:17" pos:end="2193:33">(<argument pos:start="2193:18" pos:end="2193:27"><expr pos:start="2193:18" pos:end="2193:27"><name pos:start="2193:18" pos:end="2193:27"><name pos:start="2193:18" pos:end="2193:24">entries</name><index pos:start="2193:25" pos:end="2193:27">[<expr pos:start="2193:26" pos:end="2193:26"><name pos:start="2193:26" pos:end="2193:26">i</name></expr>]</index></name></expr></argument>, <argument pos:start="2193:30" pos:end="2193:32"><expr pos:start="2193:30" pos:end="2193:32"><name pos:start="2193:30" pos:end="2193:32">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt pos:start="2195:7" pos:end="2195:19"><expr pos:start="2195:7" pos:end="2195:18"><call pos:start="2195:7" pos:end="2195:18"><name pos:start="2195:7" pos:end="2195:16"><name pos:start="2195:7" pos:end="2195:9">out</name><operator pos:start="2195:10" pos:end="2195:10">.</operator><name pos:start="2195:11" pos:end="2195:16">finish</name></name><argument_list pos:start="2195:17" pos:end="2195:18">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="2197:5" pos:end="2199:5">catch <parameter_list pos:start="2197:11" pos:end="2197:25">(<parameter pos:start="2197:12" pos:end="2197:24"><decl pos:start="2197:12" pos:end="2197:24"><type pos:start="2197:12" pos:end="2197:24"><name pos:start="2197:12" pos:end="2197:22">IOException</name></type> <name pos:start="2197:24" pos:end="2197:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2197:27" pos:end="2199:5">{<block_content pos:start="2198:7" pos:end="2198:34">
      <expr_stmt pos:start="2198:7" pos:end="2198:34"><expr pos:start="2198:7" pos:end="2198:33"><call pos:start="2198:7" pos:end="2198:33"><name pos:start="2198:7" pos:end="2198:30"><name pos:start="2198:7" pos:end="2198:22">ZipExceptionUtil</name><operator pos:start="2198:23" pos:end="2198:23">.</operator><name pos:start="2198:24" pos:end="2198:30">rethrow</name></name><argument_list pos:start="2198:31" pos:end="2198:33">(<argument pos:start="2198:32" pos:end="2198:32"><expr pos:start="2198:32" pos:end="2198:32"><name pos:start="2198:32" pos:end="2198:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2202:3" pos:end="2209:5">/**
   * Changes a zip file it with with new entries. in-place.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          new ZIP entries appended.
   */</comment>
  <function pos:start="2210:3" pos:end="2217:3"><type pos:start="2210:3" pos:end="2210:20"><specifier pos:start="2210:3" pos:end="2210:8">public</specifier> <specifier pos:start="2210:10" pos:end="2210:15">static</specifier> <name pos:start="2210:17" pos:end="2210:20">void</name></type> <name pos:start="2210:22" pos:end="2210:31">addEntries</name><parameter_list pos:start="2210:32" pos:end="2210:79">(<parameter pos:start="2210:33" pos:end="2210:46"><decl pos:start="2210:33" pos:end="2210:46"><type pos:start="2210:33" pos:end="2210:46"><specifier pos:start="2210:33" pos:end="2210:37">final</specifier> <name pos:start="2210:39" pos:end="2210:42">File</name></type> <name pos:start="2210:44" pos:end="2210:46">zip</name></decl></parameter>, <parameter pos:start="2210:49" pos:end="2210:78"><decl pos:start="2210:49" pos:end="2210:78"><type pos:start="2210:49" pos:end="2210:78"><specifier pos:start="2210:49" pos:end="2210:53">final</specifier> <name pos:start="2210:55" pos:end="2210:70"><name pos:start="2210:55" pos:end="2210:68">ZipEntrySource</name><index pos:start="2210:69" pos:end="2210:70">[]</index></name></type> <name pos:start="2210:72" pos:end="2210:78">entries</name></decl></parameter>)</parameter_list> <block pos:start="2210:81" pos:end="2217:3">{<block_content pos:start="2211:5" pos:end="2216:7">
    <expr_stmt pos:start="2211:5" pos:end="2216:7"><expr pos:start="2211:5" pos:end="2216:6"><call pos:start="2211:5" pos:end="2216:6"><name pos:start="2211:5" pos:end="2211:18">operateInPlace</name><argument_list pos:start="2211:19" pos:end="2216:6">(<argument pos:start="2211:20" pos:end="2211:22"><expr pos:start="2211:20" pos:end="2211:22"><name pos:start="2211:20" pos:end="2211:22">zip</name></expr></argument>, <argument pos:start="2211:25" pos:end="2216:5"><expr pos:start="2211:25" pos:end="2216:5"><operator pos:start="2211:25" pos:end="2211:27">new</operator> <class pos:start="2211:29" pos:end="2216:5"><super pos:start="2211:29" pos:end="2211:41"><name pos:start="2211:29" pos:end="2211:41">InPlaceAction</name></super><argument_list pos:start="2211:42" pos:end="2211:43">()</argument_list> <block pos:start="2211:45" pos:end="2216:5">{
      <function pos:start="2212:7" pos:end="2215:7"><type pos:start="2212:7" pos:end="2212:20"><specifier pos:start="2212:7" pos:end="2212:12">public</specifier> <name pos:start="2212:14" pos:end="2212:20">boolean</name></type> <name pos:start="2212:22" pos:end="2212:24">act</name><parameter_list pos:start="2212:25" pos:end="2212:38">(<parameter pos:start="2212:26" pos:end="2212:37"><decl pos:start="2212:26" pos:end="2212:37"><type pos:start="2212:26" pos:end="2212:29"><name pos:start="2212:26" pos:end="2212:29">File</name></type> <name pos:start="2212:31" pos:end="2212:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2212:40" pos:end="2215:7">{<block_content pos:start="2213:9" pos:end="2214:20">
        <expr_stmt pos:start="2213:9" pos:end="2213:42"><expr pos:start="2213:9" pos:end="2213:41"><call pos:start="2213:9" pos:end="2213:41"><name pos:start="2213:9" pos:end="2213:18">addEntries</name><argument_list pos:start="2213:19" pos:end="2213:41">(<argument pos:start="2213:20" pos:end="2213:22"><expr pos:start="2213:20" pos:end="2213:22"><name pos:start="2213:20" pos:end="2213:22">zip</name></expr></argument>, <argument pos:start="2213:25" pos:end="2213:31"><expr pos:start="2213:25" pos:end="2213:31"><name pos:start="2213:25" pos:end="2213:31">entries</name></expr></argument>, <argument pos:start="2213:34" pos:end="2213:40"><expr pos:start="2213:34" pos:end="2213:40"><name pos:start="2213:34" pos:end="2213:40">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2214:9" pos:end="2214:20">return <expr pos:start="2214:16" pos:end="2214:19"><literal type="boolean" pos:start="2214:16" pos:end="2214:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2219:3" pos:end="2229:5">/**
   * Copies an existing ZIP file and removes entry with a given path.
   *
   * @param zip
   *          an existing ZIP file (only read)
   * @param path
   *          path of the entry to remove
   * @param destZip
   *          new ZIP file created.
   * @since 1.7
   */</comment>
  <function pos:start="2230:3" pos:end="2232:3"><type pos:start="2230:3" pos:end="2230:20"><specifier pos:start="2230:3" pos:end="2230:8">public</specifier> <specifier pos:start="2230:10" pos:end="2230:15">static</specifier> <name pos:start="2230:17" pos:end="2230:20">void</name></type> <name pos:start="2230:22" pos:end="2230:32">removeEntry</name><parameter_list pos:start="2230:33" pos:end="2230:69">(<parameter pos:start="2230:34" pos:end="2230:41"><decl pos:start="2230:34" pos:end="2230:41"><type pos:start="2230:34" pos:end="2230:41"><name pos:start="2230:34" pos:end="2230:37">File</name></type> <name pos:start="2230:39" pos:end="2230:41">zip</name></decl></parameter>, <parameter pos:start="2230:44" pos:end="2230:54"><decl pos:start="2230:44" pos:end="2230:54"><type pos:start="2230:44" pos:end="2230:54"><name pos:start="2230:44" pos:end="2230:49">String</name></type> <name pos:start="2230:51" pos:end="2230:54">path</name></decl></parameter>, <parameter pos:start="2230:57" pos:end="2230:68"><decl pos:start="2230:57" pos:end="2230:68"><type pos:start="2230:57" pos:end="2230:68"><name pos:start="2230:57" pos:end="2230:60">File</name></type> <name pos:start="2230:62" pos:end="2230:68">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2230:71" pos:end="2232:3">{<block_content pos:start="2231:5" pos:end="2231:55">
    <expr_stmt pos:start="2231:5" pos:end="2231:55"><expr pos:start="2231:5" pos:end="2231:54"><call pos:start="2231:5" pos:end="2231:54"><name pos:start="2231:5" pos:end="2231:17">removeEntries</name><argument_list pos:start="2231:18" pos:end="2231:54">(<argument pos:start="2231:19" pos:end="2231:21"><expr pos:start="2231:19" pos:end="2231:21"><name pos:start="2231:19" pos:end="2231:21">zip</name></expr></argument>, <argument pos:start="2231:24" pos:end="2231:44"><expr pos:start="2231:24" pos:end="2231:44"><operator pos:start="2231:24" pos:end="2231:26">new</operator> <name pos:start="2231:28" pos:end="2231:35"><name pos:start="2231:28" pos:end="2231:33">String</name><index pos:start="2231:34" pos:end="2231:35">[]</index></name> <block pos:start="2231:37" pos:end="2231:44">{ <expr pos:start="2231:39" pos:end="2231:42"><name pos:start="2231:39" pos:end="2231:42">path</name></expr> }</block></expr></argument>, <argument pos:start="2231:47" pos:end="2231:53"><expr pos:start="2231:47" pos:end="2231:53"><name pos:start="2231:47" pos:end="2231:53">destZip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2234:3" pos:end="2242:5">/**
   * Changes an existing ZIP file: removes entry with a given path.
   *
   * @param zip
   *          an existing ZIP file
   * @param path
   *          path of the entry to remove
   * @since 1.7
   */</comment>
  <function pos:start="2243:3" pos:end="2250:3"><type pos:start="2243:3" pos:end="2243:20"><specifier pos:start="2243:3" pos:end="2243:8">public</specifier> <specifier pos:start="2243:10" pos:end="2243:15">static</specifier> <name pos:start="2243:17" pos:end="2243:20">void</name></type> <name pos:start="2243:22" pos:end="2243:32">removeEntry</name><parameter_list pos:start="2243:33" pos:end="2243:67">(<parameter pos:start="2243:34" pos:end="2243:47"><decl pos:start="2243:34" pos:end="2243:47"><type pos:start="2243:34" pos:end="2243:47"><specifier pos:start="2243:34" pos:end="2243:38">final</specifier> <name pos:start="2243:40" pos:end="2243:43">File</name></type> <name pos:start="2243:45" pos:end="2243:47">zip</name></decl></parameter>, <parameter pos:start="2243:50" pos:end="2243:66"><decl pos:start="2243:50" pos:end="2243:66"><type pos:start="2243:50" pos:end="2243:66"><specifier pos:start="2243:50" pos:end="2243:54">final</specifier> <name pos:start="2243:56" pos:end="2243:61">String</name></type> <name pos:start="2243:63" pos:end="2243:66">path</name></decl></parameter>)</parameter_list> <block pos:start="2243:69" pos:end="2250:3">{<block_content pos:start="2244:5" pos:end="2249:7">
    <expr_stmt pos:start="2244:5" pos:end="2249:7"><expr pos:start="2244:5" pos:end="2249:6"><call pos:start="2244:5" pos:end="2249:6"><name pos:start="2244:5" pos:end="2244:18">operateInPlace</name><argument_list pos:start="2244:19" pos:end="2249:6">(<argument pos:start="2244:20" pos:end="2244:22"><expr pos:start="2244:20" pos:end="2244:22"><name pos:start="2244:20" pos:end="2244:22">zip</name></expr></argument>, <argument pos:start="2244:25" pos:end="2249:5"><expr pos:start="2244:25" pos:end="2249:5"><operator pos:start="2244:25" pos:end="2244:27">new</operator> <class pos:start="2244:29" pos:end="2249:5"><super pos:start="2244:29" pos:end="2244:41"><name pos:start="2244:29" pos:end="2244:41">InPlaceAction</name></super><argument_list pos:start="2244:42" pos:end="2244:43">()</argument_list> <block pos:start="2244:45" pos:end="2249:5">{
      <function pos:start="2245:7" pos:end="2248:7"><type pos:start="2245:7" pos:end="2245:20"><specifier pos:start="2245:7" pos:end="2245:12">public</specifier> <name pos:start="2245:14" pos:end="2245:20">boolean</name></type> <name pos:start="2245:22" pos:end="2245:24">act</name><parameter_list pos:start="2245:25" pos:end="2245:38">(<parameter pos:start="2245:26" pos:end="2245:37"><decl pos:start="2245:26" pos:end="2245:37"><type pos:start="2245:26" pos:end="2245:29"><name pos:start="2245:26" pos:end="2245:29">File</name></type> <name pos:start="2245:31" pos:end="2245:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2245:40" pos:end="2248:7">{<block_content pos:start="2246:9" pos:end="2247:20">
        <expr_stmt pos:start="2246:9" pos:end="2246:40"><expr pos:start="2246:9" pos:end="2246:39"><call pos:start="2246:9" pos:end="2246:39"><name pos:start="2246:9" pos:end="2246:19">removeEntry</name><argument_list pos:start="2246:20" pos:end="2246:39">(<argument pos:start="2246:21" pos:end="2246:23"><expr pos:start="2246:21" pos:end="2246:23"><name pos:start="2246:21" pos:end="2246:23">zip</name></expr></argument>, <argument pos:start="2246:26" pos:end="2246:29"><expr pos:start="2246:26" pos:end="2246:29"><name pos:start="2246:26" pos:end="2246:29">path</name></expr></argument>, <argument pos:start="2246:32" pos:end="2246:38"><expr pos:start="2246:32" pos:end="2246:38"><name pos:start="2246:32" pos:end="2246:38">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2247:9" pos:end="2247:20">return <expr pos:start="2247:16" pos:end="2247:19"><literal type="boolean" pos:start="2247:16" pos:end="2247:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2252:3" pos:end="2262:5">/**
   * Copies an existing ZIP file and removes entries with given paths.
   *
   * @param zip
   *          an existing ZIP file (only read)
   * @param paths
   *          paths of the entries to remove
   * @param destZip
   *          new ZIP file created.
   * @since 1.7
   */</comment>
  <function pos:start="2263:3" pos:end="2279:3"><type pos:start="2263:3" pos:end="2263:20"><specifier pos:start="2263:3" pos:end="2263:8">public</specifier> <specifier pos:start="2263:10" pos:end="2263:15">static</specifier> <name pos:start="2263:17" pos:end="2263:20">void</name></type> <name pos:start="2263:22" pos:end="2263:34">removeEntries</name><parameter_list pos:start="2263:35" pos:end="2263:74">(<parameter pos:start="2263:36" pos:end="2263:43"><decl pos:start="2263:36" pos:end="2263:43"><type pos:start="2263:36" pos:end="2263:43"><name pos:start="2263:36" pos:end="2263:39">File</name></type> <name pos:start="2263:41" pos:end="2263:43">zip</name></decl></parameter>, <parameter pos:start="2263:46" pos:end="2263:59"><decl pos:start="2263:46" pos:end="2263:59"><type pos:start="2263:46" pos:end="2263:59"><name pos:start="2263:46" pos:end="2263:53"><name pos:start="2263:46" pos:end="2263:51">String</name><index pos:start="2263:52" pos:end="2263:53">[]</index></name></type> <name pos:start="2263:55" pos:end="2263:59">paths</name></decl></parameter>, <parameter pos:start="2263:62" pos:end="2263:73"><decl pos:start="2263:62" pos:end="2263:73"><type pos:start="2263:62" pos:end="2263:73"><name pos:start="2263:62" pos:end="2263:65">File</name></type> <name pos:start="2263:67" pos:end="2263:73">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2263:76" pos:end="2279:3">{<block_content pos:start="2264:5" pos:end="2278:5">
    <if_stmt pos:start="2264:5" pos:end="2266:5"><if pos:start="2264:5" pos:end="2266:5">if <condition pos:start="2264:8" pos:end="2264:29">(<expr pos:start="2264:9" pos:end="2264:28"><call pos:start="2264:9" pos:end="2264:28"><name pos:start="2264:9" pos:end="2264:26"><name pos:start="2264:9" pos:end="2264:11">log</name><operator pos:start="2264:12" pos:end="2264:12">.</operator><name pos:start="2264:13" pos:end="2264:26">isDebugEnabled</name></name><argument_list pos:start="2264:27" pos:end="2264:28">()</argument_list></call></expr>)</condition> <block pos:start="2264:31" pos:end="2266:5">{<block_content pos:start="2265:7" pos:end="2265:111">
      <expr_stmt pos:start="2265:7" pos:end="2265:111"><expr pos:start="2265:7" pos:end="2265:110"><call pos:start="2265:7" pos:end="2265:110"><name pos:start="2265:7" pos:end="2265:15"><name pos:start="2265:7" pos:end="2265:9">log</name><operator pos:start="2265:10" pos:end="2265:10">.</operator><name pos:start="2265:11" pos:end="2265:15">debug</name></name><argument_list pos:start="2265:16" pos:end="2265:110">(<argument pos:start="2265:17" pos:end="2265:109"><expr pos:start="2265:17" pos:end="2265:109"><literal type="string" pos:start="2265:17" pos:end="2265:27">"Copying '"</literal> <operator pos:start="2265:29" pos:end="2265:29">+</operator> <name pos:start="2265:31" pos:end="2265:33">zip</name> <operator pos:start="2265:35" pos:end="2265:35">+</operator> <literal type="string" pos:start="2265:37" pos:end="2265:44">"' to '"</literal> <operator pos:start="2265:46" pos:end="2265:46">+</operator> <name pos:start="2265:48" pos:end="2265:54">destZip</name> <operator pos:start="2265:56" pos:end="2265:56">+</operator> <literal type="string" pos:start="2265:58" pos:end="2265:80">"' and removing paths "</literal> <operator pos:start="2265:82" pos:end="2265:82">+</operator> <call pos:start="2265:84" pos:end="2265:103"><name pos:start="2265:84" pos:end="2265:96"><name pos:start="2265:84" pos:end="2265:89">Arrays</name><operator pos:start="2265:90" pos:end="2265:90">.</operator><name pos:start="2265:91" pos:end="2265:96">asList</name></name><argument_list pos:start="2265:97" pos:end="2265:103">(<argument pos:start="2265:98" pos:end="2265:102"><expr pos:start="2265:98" pos:end="2265:102"><name pos:start="2265:98" pos:end="2265:102">paths</name></expr></argument>)</argument_list></call> <operator pos:start="2265:105" pos:end="2265:105">+</operator> <literal type="string" pos:start="2265:107" pos:end="2265:109">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2268:5" pos:end="2268:31"><decl pos:start="2268:5" pos:end="2268:30"><type pos:start="2268:5" pos:end="2268:19"><name pos:start="2268:5" pos:end="2268:19">ZipOutputStream</name></type> <name pos:start="2268:21" pos:end="2268:23">out</name> <init pos:start="2268:25" pos:end="2268:30">= <expr pos:start="2268:27" pos:end="2268:30"><literal type="null" pos:start="2268:27" pos:end="2268:30">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="2269:5" pos:end="2278:5">try <block pos:start="2269:9" pos:end="2272:5">{<block_content pos:start="2270:7" pos:end="2271:71">
      <expr_stmt pos:start="2270:7" pos:end="2270:89"><expr pos:start="2270:7" pos:end="2270:88"><name pos:start="2270:7" pos:end="2270:9">out</name> <operator pos:start="2270:11" pos:end="2270:11">=</operator> <operator pos:start="2270:13" pos:end="2270:15">new</operator> <call pos:start="2270:17" pos:end="2270:88"><name pos:start="2270:17" pos:end="2270:31">ZipOutputStream</name><argument_list pos:start="2270:32" pos:end="2270:88">(<argument pos:start="2270:33" pos:end="2270:87"><expr pos:start="2270:33" pos:end="2270:87"><operator pos:start="2270:33" pos:end="2270:35">new</operator> <call pos:start="2270:37" pos:end="2270:87"><name pos:start="2270:37" pos:end="2270:56">BufferedOutputStream</name><argument_list pos:start="2270:57" pos:end="2270:87">(<argument pos:start="2270:58" pos:end="2270:86"><expr pos:start="2270:58" pos:end="2270:86"><operator pos:start="2270:58" pos:end="2270:60">new</operator> <call pos:start="2270:62" pos:end="2270:86"><name pos:start="2270:62" pos:end="2270:77">FileOutputStream</name><argument_list pos:start="2270:78" pos:end="2270:86">(<argument pos:start="2270:79" pos:end="2270:85"><expr pos:start="2270:79" pos:end="2270:85"><name pos:start="2270:79" pos:end="2270:85">destZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="2271:7" pos:end="2271:71"><expr pos:start="2271:7" pos:end="2271:70"><call pos:start="2271:7" pos:end="2271:70"><name pos:start="2271:7" pos:end="2271:17">copyEntries</name><argument_list pos:start="2271:18" pos:end="2271:70">(<argument pos:start="2271:19" pos:end="2271:21"><expr pos:start="2271:19" pos:end="2271:21"><name pos:start="2271:19" pos:end="2271:21">zip</name></expr></argument>, <argument pos:start="2271:24" pos:end="2271:26"><expr pos:start="2271:24" pos:end="2271:26"><name pos:start="2271:24" pos:end="2271:26">out</name></expr></argument>, <argument pos:start="2271:29" pos:end="2271:69"><expr pos:start="2271:29" pos:end="2271:69"><operator pos:start="2271:29" pos:end="2271:31">new</operator> <call pos:start="2271:33" pos:end="2271:69"><name pos:start="2271:33" pos:end="2271:47"><name pos:start="2271:33" pos:end="2271:39">HashSet</name><argument_list type="generic" pos:start="2271:40" pos:end="2271:47">&lt;<argument pos:start="2271:41" pos:end="2271:46"><name pos:start="2271:41" pos:end="2271:46">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2271:48" pos:end="2271:69">(<argument pos:start="2271:49" pos:end="2271:68"><expr pos:start="2271:49" pos:end="2271:68"><call pos:start="2271:49" pos:end="2271:68"><name pos:start="2271:49" pos:end="2271:61"><name pos:start="2271:49" pos:end="2271:54">Arrays</name><operator pos:start="2271:55" pos:end="2271:55">.</operator><name pos:start="2271:56" pos:end="2271:61">asList</name></name><argument_list pos:start="2271:62" pos:end="2271:68">(<argument pos:start="2271:63" pos:end="2271:67"><expr pos:start="2271:63" pos:end="2271:67"><name pos:start="2271:63" pos:end="2271:67">paths</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch pos:start="2273:5" pos:end="2275:5">catch <parameter_list pos:start="2273:11" pos:end="2273:25">(<parameter pos:start="2273:12" pos:end="2273:24"><decl pos:start="2273:12" pos:end="2273:24"><type pos:start="2273:12" pos:end="2273:24"><name pos:start="2273:12" pos:end="2273:22">IOException</name></type> <name pos:start="2273:24" pos:end="2273:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2273:27" pos:end="2275:5">{<block_content pos:start="2274:7" pos:end="2274:40">
      <throw pos:start="2274:7" pos:end="2274:40">throw <expr pos:start="2274:13" pos:end="2274:39"><call pos:start="2274:13" pos:end="2274:39"><name pos:start="2274:13" pos:end="2274:36"><name pos:start="2274:13" pos:end="2274:28">ZipExceptionUtil</name><operator pos:start="2274:29" pos:end="2274:29">.</operator><name pos:start="2274:30" pos:end="2274:36">rethrow</name></name><argument_list pos:start="2274:37" pos:end="2274:39">(<argument pos:start="2274:38" pos:end="2274:38"><expr pos:start="2274:38" pos:end="2274:38"><name pos:start="2274:38" pos:end="2274:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="2276:5" pos:end="2278:5">finally <block pos:start="2276:13" pos:end="2278:5">{<block_content pos:start="2277:7" pos:end="2277:32">
      <expr_stmt pos:start="2277:7" pos:end="2277:32"><expr pos:start="2277:7" pos:end="2277:31"><call pos:start="2277:7" pos:end="2277:31"><name pos:start="2277:7" pos:end="2277:26"><name pos:start="2277:7" pos:end="2277:13">IOUtils</name><operator pos:start="2277:14" pos:end="2277:14">.</operator><name pos:start="2277:15" pos:end="2277:26">closeQuietly</name></name><argument_list pos:start="2277:27" pos:end="2277:31">(<argument pos:start="2277:28" pos:end="2277:30"><expr pos:start="2277:28" pos:end="2277:30"><name pos:start="2277:28" pos:end="2277:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2281:3" pos:end="2289:5">/**
   * Changes an existing ZIP file: removes entries with given paths.
   *
   * @param zip
   *          an existing ZIP file
   * @param paths
   *          paths of the entries to remove
   * @since 1.7
   */</comment>
  <function pos:start="2290:3" pos:end="2297:3"><type pos:start="2290:3" pos:end="2290:20"><specifier pos:start="2290:3" pos:end="2290:8">public</specifier> <specifier pos:start="2290:10" pos:end="2290:15">static</specifier> <name pos:start="2290:17" pos:end="2290:20">void</name></type> <name pos:start="2290:22" pos:end="2290:34">removeEntries</name><parameter_list pos:start="2290:35" pos:end="2290:72">(<parameter pos:start="2290:36" pos:end="2290:49"><decl pos:start="2290:36" pos:end="2290:49"><type pos:start="2290:36" pos:end="2290:49"><specifier pos:start="2290:36" pos:end="2290:40">final</specifier> <name pos:start="2290:42" pos:end="2290:45">File</name></type> <name pos:start="2290:47" pos:end="2290:49">zip</name></decl></parameter>, <parameter pos:start="2290:52" pos:end="2290:71"><decl pos:start="2290:52" pos:end="2290:71"><type pos:start="2290:52" pos:end="2290:71"><specifier pos:start="2290:52" pos:end="2290:56">final</specifier> <name pos:start="2290:58" pos:end="2290:65"><name pos:start="2290:58" pos:end="2290:63">String</name><index pos:start="2290:64" pos:end="2290:65">[]</index></name></type> <name pos:start="2290:67" pos:end="2290:71">paths</name></decl></parameter>)</parameter_list> <block pos:start="2290:74" pos:end="2297:3">{<block_content pos:start="2291:5" pos:end="2296:7">
    <expr_stmt pos:start="2291:5" pos:end="2296:7"><expr pos:start="2291:5" pos:end="2296:6"><call pos:start="2291:5" pos:end="2296:6"><name pos:start="2291:5" pos:end="2291:18">operateInPlace</name><argument_list pos:start="2291:19" pos:end="2296:6">(<argument pos:start="2291:20" pos:end="2291:22"><expr pos:start="2291:20" pos:end="2291:22"><name pos:start="2291:20" pos:end="2291:22">zip</name></expr></argument>, <argument pos:start="2291:25" pos:end="2296:5"><expr pos:start="2291:25" pos:end="2296:5"><operator pos:start="2291:25" pos:end="2291:27">new</operator> <class pos:start="2291:29" pos:end="2296:5"><super pos:start="2291:29" pos:end="2291:41"><name pos:start="2291:29" pos:end="2291:41">InPlaceAction</name></super><argument_list pos:start="2291:42" pos:end="2291:43">()</argument_list> <block pos:start="2291:45" pos:end="2296:5">{
      <function pos:start="2292:7" pos:end="2295:7"><type pos:start="2292:7" pos:end="2292:20"><specifier pos:start="2292:7" pos:end="2292:12">public</specifier> <name pos:start="2292:14" pos:end="2292:20">boolean</name></type> <name pos:start="2292:22" pos:end="2292:24">act</name><parameter_list pos:start="2292:25" pos:end="2292:38">(<parameter pos:start="2292:26" pos:end="2292:37"><decl pos:start="2292:26" pos:end="2292:37"><type pos:start="2292:26" pos:end="2292:29"><name pos:start="2292:26" pos:end="2292:29">File</name></type> <name pos:start="2292:31" pos:end="2292:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2292:40" pos:end="2295:7">{<block_content pos:start="2293:9" pos:end="2294:20">
        <expr_stmt pos:start="2293:9" pos:end="2293:43"><expr pos:start="2293:9" pos:end="2293:42"><call pos:start="2293:9" pos:end="2293:42"><name pos:start="2293:9" pos:end="2293:21">removeEntries</name><argument_list pos:start="2293:22" pos:end="2293:42">(<argument pos:start="2293:23" pos:end="2293:25"><expr pos:start="2293:23" pos:end="2293:25"><name pos:start="2293:23" pos:end="2293:25">zip</name></expr></argument>, <argument pos:start="2293:28" pos:end="2293:32"><expr pos:start="2293:28" pos:end="2293:32"><name pos:start="2293:28" pos:end="2293:32">paths</name></expr></argument>, <argument pos:start="2293:35" pos:end="2293:41"><expr pos:start="2293:35" pos:end="2293:41"><name pos:start="2293:35" pos:end="2293:41">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2294:9" pos:end="2294:20">return <expr pos:start="2294:16" pos:end="2294:19"><literal type="boolean" pos:start="2294:16" pos:end="2294:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2299:3" pos:end="2306:5">/**
   * Copies all entries from one ZIP file to another.
   *
   * @param zip
   *          source ZIP file.
   * @param out
   *          target ZIP stream.
   */</comment>
  <function pos:start="2307:3" pos:end="2321:3"><type pos:start="2307:3" pos:end="2307:21"><specifier pos:start="2307:3" pos:end="2307:9">private</specifier> <specifier pos:start="2307:11" pos:end="2307:16">static</specifier> <name pos:start="2307:18" pos:end="2307:21">void</name></type> <name pos:start="2307:23" pos:end="2307:33">copyEntries</name><parameter_list pos:start="2307:34" pos:end="2307:70">(<parameter pos:start="2307:35" pos:end="2307:42"><decl pos:start="2307:35" pos:end="2307:42"><type pos:start="2307:35" pos:end="2307:42"><name pos:start="2307:35" pos:end="2307:38">File</name></type> <name pos:start="2307:40" pos:end="2307:42">zip</name></decl></parameter>, <parameter pos:start="2307:45" pos:end="2307:69"><decl pos:start="2307:45" pos:end="2307:69"><type pos:start="2307:45" pos:end="2307:69"><specifier pos:start="2307:45" pos:end="2307:49">final</specifier> <name pos:start="2307:51" pos:end="2307:65">ZipOutputStream</name></type> <name pos:start="2307:67" pos:end="2307:69">out</name></decl></parameter>)</parameter_list> <block pos:start="2307:72" pos:end="2321:3">{<block_content pos:start="2309:5" pos:end="2320:7">
    <comment type="line" pos:start="2308:5" pos:end="2308:97">// this one doesn't call copyEntries with ignoredEntries, because that has poorer performance</comment>
    <decl_stmt pos:start="2309:5" pos:end="2309:52"><decl pos:start="2309:5" pos:end="2309:51"><type pos:start="2309:5" pos:end="2309:21"><specifier pos:start="2309:5" pos:end="2309:9">final</specifier> <name pos:start="2309:11" pos:end="2309:21"><name pos:start="2309:11" pos:end="2309:13">Set</name><argument_list type="generic" pos:start="2309:14" pos:end="2309:21">&lt;<argument pos:start="2309:15" pos:end="2309:20"><name pos:start="2309:15" pos:end="2309:20">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2309:23" pos:end="2309:27">names</name> <init pos:start="2309:29" pos:end="2309:51">= <expr pos:start="2309:31" pos:end="2309:51"><operator pos:start="2309:31" pos:end="2309:33">new</operator> <call pos:start="2309:35" pos:end="2309:51"><name pos:start="2309:35" pos:end="2309:49"><name pos:start="2309:35" pos:end="2309:41">HashSet</name><argument_list type="generic" pos:start="2309:42" pos:end="2309:49">&lt;<argument pos:start="2309:43" pos:end="2309:48"><name pos:start="2309:43" pos:end="2309:48">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2309:50" pos:end="2309:51">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2310:5" pos:end="2320:7"><expr pos:start="2310:5" pos:end="2320:6"><call pos:start="2310:5" pos:end="2320:6"><name pos:start="2310:5" pos:end="2310:11">iterate</name><argument_list pos:start="2310:12" pos:end="2320:6">(<argument pos:start="2310:13" pos:end="2310:15"><expr pos:start="2310:13" pos:end="2310:15"><name pos:start="2310:13" pos:end="2310:15">zip</name></expr></argument>, <argument pos:start="2310:18" pos:end="2320:5"><expr pos:start="2310:18" pos:end="2320:5"><operator pos:start="2310:18" pos:end="2310:20">new</operator> <class pos:start="2310:22" pos:end="2320:5"><super pos:start="2310:22" pos:end="2310:37"><name pos:start="2310:22" pos:end="2310:37">ZipEntryCallback</name></super><argument_list pos:start="2310:38" pos:end="2310:39">()</argument_list> <block pos:start="2310:41" pos:end="2320:5">{
      <function pos:start="2311:7" pos:end="2319:7"><type pos:start="2311:7" pos:end="2311:17"><specifier pos:start="2311:7" pos:end="2311:12">public</specifier> <name pos:start="2311:14" pos:end="2311:17">void</name></type> <name pos:start="2311:19" pos:end="2311:25">process</name><parameter_list pos:start="2311:26" pos:end="2311:60">(<parameter pos:start="2311:27" pos:end="2311:40"><decl pos:start="2311:27" pos:end="2311:40"><type pos:start="2311:27" pos:end="2311:40"><name pos:start="2311:27" pos:end="2311:37">InputStream</name></type> <name pos:start="2311:39" pos:end="2311:40">in</name></decl></parameter>, <parameter pos:start="2311:43" pos:end="2311:59"><decl pos:start="2311:43" pos:end="2311:59"><type pos:start="2311:43" pos:end="2311:59"><name pos:start="2311:43" pos:end="2311:50">ZipEntry</name></type> <name pos:start="2311:52" pos:end="2311:59">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="2311:62" pos:end="2311:79">throws <argument pos:start="2311:69" pos:end="2311:79"><expr pos:start="2311:69" pos:end="2311:79"><name pos:start="2311:69" pos:end="2311:79">IOException</name></expr></argument></throws> <block pos:start="2311:81" pos:end="2319:7">{<block_content pos:start="2312:9" pos:end="2318:9">
        <decl_stmt pos:start="2312:9" pos:end="2312:46"><decl pos:start="2312:9" pos:end="2312:45"><type pos:start="2312:9" pos:end="2312:14"><name pos:start="2312:9" pos:end="2312:14">String</name></type> <name pos:start="2312:16" pos:end="2312:24">entryName</name> <init pos:start="2312:26" pos:end="2312:45">= <expr pos:start="2312:28" pos:end="2312:45"><call pos:start="2312:28" pos:end="2312:45"><name pos:start="2312:28" pos:end="2312:43"><name pos:start="2312:28" pos:end="2312:35">zipEntry</name><operator pos:start="2312:36" pos:end="2312:36">.</operator><name pos:start="2312:37" pos:end="2312:43">getName</name></name><argument_list pos:start="2312:44" pos:end="2312:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2313:9" pos:end="2318:9"><if pos:start="2313:9" pos:end="2315:9">if <condition pos:start="2313:12" pos:end="2313:33">(<expr pos:start="2313:13" pos:end="2313:32"><call pos:start="2313:13" pos:end="2313:32"><name pos:start="2313:13" pos:end="2313:21"><name pos:start="2313:13" pos:end="2313:17">names</name><operator pos:start="2313:18" pos:end="2313:18">.</operator><name pos:start="2313:19" pos:end="2313:21">add</name></name><argument_list pos:start="2313:22" pos:end="2313:32">(<argument pos:start="2313:23" pos:end="2313:31"><expr pos:start="2313:23" pos:end="2313:31"><name pos:start="2313:23" pos:end="2313:31">entryName</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2313:35" pos:end="2315:9">{<block_content pos:start="2314:11" pos:end="2314:52">
          <expr_stmt pos:start="2314:11" pos:end="2314:52"><expr pos:start="2314:11" pos:end="2314:51"><call pos:start="2314:11" pos:end="2314:51"><name pos:start="2314:11" pos:end="2314:32"><name pos:start="2314:11" pos:end="2314:22">ZipEntryUtil</name><operator pos:start="2314:23" pos:end="2314:23">.</operator><name pos:start="2314:24" pos:end="2314:32">copyEntry</name></name><argument_list pos:start="2314:33" pos:end="2314:51">(<argument pos:start="2314:34" pos:end="2314:41"><expr pos:start="2314:34" pos:end="2314:41"><name pos:start="2314:34" pos:end="2314:41">zipEntry</name></expr></argument>, <argument pos:start="2314:44" pos:end="2314:45"><expr pos:start="2314:44" pos:end="2314:45"><name pos:start="2314:44" pos:end="2314:45">in</name></expr></argument>, <argument pos:start="2314:48" pos:end="2314:50"><expr pos:start="2314:48" pos:end="2314:50"><name pos:start="2314:48" pos:end="2314:50">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="2316:9" pos:end="2318:9">else if <condition pos:start="2316:17" pos:end="2316:38">(<expr pos:start="2316:18" pos:end="2316:37"><call pos:start="2316:18" pos:end="2316:37"><name pos:start="2316:18" pos:end="2316:35"><name pos:start="2316:18" pos:end="2316:20">log</name><operator pos:start="2316:21" pos:end="2316:21">.</operator><name pos:start="2316:22" pos:end="2316:35">isDebugEnabled</name></name><argument_list pos:start="2316:36" pos:end="2316:37">()</argument_list></call></expr>)</condition> <block pos:start="2316:40" pos:end="2318:9">{<block_content pos:start="2317:11" pos:end="2317:54">
          <expr_stmt pos:start="2317:11" pos:end="2317:54"><expr pos:start="2317:11" pos:end="2317:53"><call pos:start="2317:11" pos:end="2317:53"><name pos:start="2317:11" pos:end="2317:19"><name pos:start="2317:11" pos:end="2317:13">log</name><operator pos:start="2317:14" pos:end="2317:14">.</operator><name pos:start="2317:15" pos:end="2317:19">debug</name></name><argument_list pos:start="2317:20" pos:end="2317:53">(<argument pos:start="2317:21" pos:end="2317:41"><expr pos:start="2317:21" pos:end="2317:41"><literal type="string" pos:start="2317:21" pos:end="2317:41">"Duplicate entry: {}"</literal></expr></argument>, <argument pos:start="2317:44" pos:end="2317:52"><expr pos:start="2317:44" pos:end="2317:52"><name pos:start="2317:44" pos:end="2317:52">entryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2323:3" pos:end="2330:5">/**
   * Copies all entries from one ZIP stream to another.
   *
   * @param is
   *          source stream (contains ZIP file).
   * @param out
   *          target ZIP stream.
   */</comment>
  <function pos:start="2331:3" pos:end="2345:3"><type pos:start="2331:3" pos:end="2331:21"><specifier pos:start="2331:3" pos:end="2331:9">private</specifier> <specifier pos:start="2331:11" pos:end="2331:16">static</specifier> <name pos:start="2331:18" pos:end="2331:21">void</name></type> <name pos:start="2331:23" pos:end="2331:33">copyEntries</name><parameter_list pos:start="2331:34" pos:end="2331:76">(<parameter pos:start="2331:35" pos:end="2331:48"><decl pos:start="2331:35" pos:end="2331:48"><type pos:start="2331:35" pos:end="2331:48"><name pos:start="2331:35" pos:end="2331:45">InputStream</name></type> <name pos:start="2331:47" pos:end="2331:48">is</name></decl></parameter>, <parameter pos:start="2331:51" pos:end="2331:75"><decl pos:start="2331:51" pos:end="2331:75"><type pos:start="2331:51" pos:end="2331:75"><specifier pos:start="2331:51" pos:end="2331:55">final</specifier> <name pos:start="2331:57" pos:end="2331:71">ZipOutputStream</name></type> <name pos:start="2331:73" pos:end="2331:75">out</name></decl></parameter>)</parameter_list> <block pos:start="2331:78" pos:end="2345:3">{<block_content pos:start="2333:5" pos:end="2344:7">
    <comment type="line" pos:start="2332:5" pos:end="2332:97">// this one doesn't call copyEntries with ignoredEntries, because that has poorer performance</comment>
    <decl_stmt pos:start="2333:5" pos:end="2333:52"><decl pos:start="2333:5" pos:end="2333:51"><type pos:start="2333:5" pos:end="2333:21"><specifier pos:start="2333:5" pos:end="2333:9">final</specifier> <name pos:start="2333:11" pos:end="2333:21"><name pos:start="2333:11" pos:end="2333:13">Set</name><argument_list type="generic" pos:start="2333:14" pos:end="2333:21">&lt;<argument pos:start="2333:15" pos:end="2333:20"><name pos:start="2333:15" pos:end="2333:20">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2333:23" pos:end="2333:27">names</name> <init pos:start="2333:29" pos:end="2333:51">= <expr pos:start="2333:31" pos:end="2333:51"><operator pos:start="2333:31" pos:end="2333:33">new</operator> <call pos:start="2333:35" pos:end="2333:51"><name pos:start="2333:35" pos:end="2333:49"><name pos:start="2333:35" pos:end="2333:41">HashSet</name><argument_list type="generic" pos:start="2333:42" pos:end="2333:49">&lt;<argument pos:start="2333:43" pos:end="2333:48"><name pos:start="2333:43" pos:end="2333:48">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2333:50" pos:end="2333:51">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2334:5" pos:end="2344:7"><expr pos:start="2334:5" pos:end="2344:6"><call pos:start="2334:5" pos:end="2344:6"><name pos:start="2334:5" pos:end="2334:11">iterate</name><argument_list pos:start="2334:12" pos:end="2344:6">(<argument pos:start="2334:13" pos:end="2334:14"><expr pos:start="2334:13" pos:end="2334:14"><name pos:start="2334:13" pos:end="2334:14">is</name></expr></argument>, <argument pos:start="2334:17" pos:end="2344:5"><expr pos:start="2334:17" pos:end="2344:5"><operator pos:start="2334:17" pos:end="2334:19">new</operator> <class pos:start="2334:21" pos:end="2344:5"><super pos:start="2334:21" pos:end="2334:36"><name pos:start="2334:21" pos:end="2334:36">ZipEntryCallback</name></super><argument_list pos:start="2334:37" pos:end="2334:38">()</argument_list> <block pos:start="2334:40" pos:end="2344:5">{
      <function pos:start="2335:7" pos:end="2343:7"><type pos:start="2335:7" pos:end="2335:17"><specifier pos:start="2335:7" pos:end="2335:12">public</specifier> <name pos:start="2335:14" pos:end="2335:17">void</name></type> <name pos:start="2335:19" pos:end="2335:25">process</name><parameter_list pos:start="2335:26" pos:end="2335:60">(<parameter pos:start="2335:27" pos:end="2335:40"><decl pos:start="2335:27" pos:end="2335:40"><type pos:start="2335:27" pos:end="2335:40"><name pos:start="2335:27" pos:end="2335:37">InputStream</name></type> <name pos:start="2335:39" pos:end="2335:40">in</name></decl></parameter>, <parameter pos:start="2335:43" pos:end="2335:59"><decl pos:start="2335:43" pos:end="2335:59"><type pos:start="2335:43" pos:end="2335:59"><name pos:start="2335:43" pos:end="2335:50">ZipEntry</name></type> <name pos:start="2335:52" pos:end="2335:59">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="2335:62" pos:end="2335:79">throws <argument pos:start="2335:69" pos:end="2335:79"><expr pos:start="2335:69" pos:end="2335:79"><name pos:start="2335:69" pos:end="2335:79">IOException</name></expr></argument></throws> <block pos:start="2335:81" pos:end="2343:7">{<block_content pos:start="2336:9" pos:end="2342:9">
        <decl_stmt pos:start="2336:9" pos:end="2336:46"><decl pos:start="2336:9" pos:end="2336:45"><type pos:start="2336:9" pos:end="2336:14"><name pos:start="2336:9" pos:end="2336:14">String</name></type> <name pos:start="2336:16" pos:end="2336:24">entryName</name> <init pos:start="2336:26" pos:end="2336:45">= <expr pos:start="2336:28" pos:end="2336:45"><call pos:start="2336:28" pos:end="2336:45"><name pos:start="2336:28" pos:end="2336:43"><name pos:start="2336:28" pos:end="2336:35">zipEntry</name><operator pos:start="2336:36" pos:end="2336:36">.</operator><name pos:start="2336:37" pos:end="2336:43">getName</name></name><argument_list pos:start="2336:44" pos:end="2336:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2337:9" pos:end="2342:9"><if pos:start="2337:9" pos:end="2339:9">if <condition pos:start="2337:12" pos:end="2337:33">(<expr pos:start="2337:13" pos:end="2337:32"><call pos:start="2337:13" pos:end="2337:32"><name pos:start="2337:13" pos:end="2337:21"><name pos:start="2337:13" pos:end="2337:17">names</name><operator pos:start="2337:18" pos:end="2337:18">.</operator><name pos:start="2337:19" pos:end="2337:21">add</name></name><argument_list pos:start="2337:22" pos:end="2337:32">(<argument pos:start="2337:23" pos:end="2337:31"><expr pos:start="2337:23" pos:end="2337:31"><name pos:start="2337:23" pos:end="2337:31">entryName</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2337:35" pos:end="2339:9">{<block_content pos:start="2338:11" pos:end="2338:52">
          <expr_stmt pos:start="2338:11" pos:end="2338:52"><expr pos:start="2338:11" pos:end="2338:51"><call pos:start="2338:11" pos:end="2338:51"><name pos:start="2338:11" pos:end="2338:32"><name pos:start="2338:11" pos:end="2338:22">ZipEntryUtil</name><operator pos:start="2338:23" pos:end="2338:23">.</operator><name pos:start="2338:24" pos:end="2338:32">copyEntry</name></name><argument_list pos:start="2338:33" pos:end="2338:51">(<argument pos:start="2338:34" pos:end="2338:41"><expr pos:start="2338:34" pos:end="2338:41"><name pos:start="2338:34" pos:end="2338:41">zipEntry</name></expr></argument>, <argument pos:start="2338:44" pos:end="2338:45"><expr pos:start="2338:44" pos:end="2338:45"><name pos:start="2338:44" pos:end="2338:45">in</name></expr></argument>, <argument pos:start="2338:48" pos:end="2338:50"><expr pos:start="2338:48" pos:end="2338:50"><name pos:start="2338:48" pos:end="2338:50">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="2340:9" pos:end="2342:9">else if <condition pos:start="2340:17" pos:end="2340:38">(<expr pos:start="2340:18" pos:end="2340:37"><call pos:start="2340:18" pos:end="2340:37"><name pos:start="2340:18" pos:end="2340:35"><name pos:start="2340:18" pos:end="2340:20">log</name><operator pos:start="2340:21" pos:end="2340:21">.</operator><name pos:start="2340:22" pos:end="2340:35">isDebugEnabled</name></name><argument_list pos:start="2340:36" pos:end="2340:37">()</argument_list></call></expr>)</condition> <block pos:start="2340:40" pos:end="2342:9">{<block_content pos:start="2341:11" pos:end="2341:54">
          <expr_stmt pos:start="2341:11" pos:end="2341:54"><expr pos:start="2341:11" pos:end="2341:53"><call pos:start="2341:11" pos:end="2341:53"><name pos:start="2341:11" pos:end="2341:19"><name pos:start="2341:11" pos:end="2341:13">log</name><operator pos:start="2341:14" pos:end="2341:14">.</operator><name pos:start="2341:15" pos:end="2341:19">debug</name></name><argument_list pos:start="2341:20" pos:end="2341:53">(<argument pos:start="2341:21" pos:end="2341:41"><expr pos:start="2341:21" pos:end="2341:41"><literal type="string" pos:start="2341:21" pos:end="2341:41">"Duplicate entry: {}"</literal></expr></argument>, <argument pos:start="2341:44" pos:end="2341:52"><expr pos:start="2341:44" pos:end="2341:52"><name pos:start="2341:44" pos:end="2341:52">entryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2347:3" pos:end="2356:5">/**
   * Copies all entries from one ZIP file to another, ignoring entries with path in ignoredEntries
   *
   * @param zip
   *          source ZIP file.
   * @param out
   *          target ZIP stream.
   * @param ignoredEntries
   *          paths of entries not to copy
   */</comment>
  <function pos:start="2357:3" pos:end="2381:3"><type pos:start="2357:3" pos:end="2357:21"><specifier pos:start="2357:3" pos:end="2357:9">private</specifier> <specifier pos:start="2357:11" pos:end="2357:16">static</specifier> <name pos:start="2357:18" pos:end="2357:21">void</name></type> <name pos:start="2357:23" pos:end="2357:33">copyEntries</name><parameter_list pos:start="2357:34" pos:end="2357:104">(<parameter pos:start="2357:35" pos:end="2357:42"><decl pos:start="2357:35" pos:end="2357:42"><type pos:start="2357:35" pos:end="2357:42"><name pos:start="2357:35" pos:end="2357:38">File</name></type> <name pos:start="2357:40" pos:end="2357:42">zip</name></decl></parameter>, <parameter pos:start="2357:45" pos:end="2357:69"><decl pos:start="2357:45" pos:end="2357:69"><type pos:start="2357:45" pos:end="2357:69"><specifier pos:start="2357:45" pos:end="2357:49">final</specifier> <name pos:start="2357:51" pos:end="2357:65">ZipOutputStream</name></type> <name pos:start="2357:67" pos:end="2357:69">out</name></decl></parameter>, <parameter pos:start="2357:72" pos:end="2357:103"><decl pos:start="2357:72" pos:end="2357:103"><type pos:start="2357:72" pos:end="2357:103"><specifier pos:start="2357:72" pos:end="2357:76">final</specifier> <name pos:start="2357:78" pos:end="2357:88"><name pos:start="2357:78" pos:end="2357:80">Set</name><argument_list type="generic" pos:start="2357:81" pos:end="2357:88">&lt;<argument pos:start="2357:82" pos:end="2357:87"><name pos:start="2357:82" pos:end="2357:87">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2357:90" pos:end="2357:103">ignoredEntries</name></decl></parameter>)</parameter_list> <block pos:start="2357:106" pos:end="2381:3">{<block_content pos:start="2358:5" pos:end="2380:7">
    <decl_stmt pos:start="2358:5" pos:end="2358:52"><decl pos:start="2358:5" pos:end="2358:51"><type pos:start="2358:5" pos:end="2358:21"><specifier pos:start="2358:5" pos:end="2358:9">final</specifier> <name pos:start="2358:11" pos:end="2358:21"><name pos:start="2358:11" pos:end="2358:13">Set</name><argument_list type="generic" pos:start="2358:14" pos:end="2358:21">&lt;<argument pos:start="2358:15" pos:end="2358:20"><name pos:start="2358:15" pos:end="2358:20">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2358:23" pos:end="2358:27">names</name> <init pos:start="2358:29" pos:end="2358:51">= <expr pos:start="2358:31" pos:end="2358:51"><operator pos:start="2358:31" pos:end="2358:33">new</operator> <call pos:start="2358:35" pos:end="2358:51"><name pos:start="2358:35" pos:end="2358:49"><name pos:start="2358:35" pos:end="2358:41">HashSet</name><argument_list type="generic" pos:start="2358:42" pos:end="2358:49">&lt;<argument pos:start="2358:43" pos:end="2358:48"><name pos:start="2358:43" pos:end="2358:48">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2358:50" pos:end="2358:51">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2359:5" pos:end="2359:71"><decl pos:start="2359:5" pos:end="2359:70"><type pos:start="2359:5" pos:end="2359:21"><specifier pos:start="2359:5" pos:end="2359:9">final</specifier> <name pos:start="2359:11" pos:end="2359:21"><name pos:start="2359:11" pos:end="2359:13">Set</name><argument_list type="generic" pos:start="2359:14" pos:end="2359:21">&lt;<argument pos:start="2359:15" pos:end="2359:20"><name pos:start="2359:15" pos:end="2359:20">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2359:23" pos:end="2359:30">dirNames</name> <init pos:start="2359:32" pos:end="2359:70">= <expr pos:start="2359:34" pos:end="2359:70"><call pos:start="2359:34" pos:end="2359:70"><name pos:start="2359:34" pos:end="2359:49">filterDirEntries</name><argument_list pos:start="2359:50" pos:end="2359:70">(<argument pos:start="2359:51" pos:end="2359:53"><expr pos:start="2359:51" pos:end="2359:53"><name pos:start="2359:51" pos:end="2359:53">zip</name></expr></argument>, <argument pos:start="2359:56" pos:end="2359:69"><expr pos:start="2359:56" pos:end="2359:69"><name pos:start="2359:56" pos:end="2359:69">ignoredEntries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="2360:5" pos:end="2380:7"><expr pos:start="2360:5" pos:end="2380:6"><call pos:start="2360:5" pos:end="2380:6"><name pos:start="2360:5" pos:end="2360:11">iterate</name><argument_list pos:start="2360:12" pos:end="2380:6">(<argument pos:start="2360:13" pos:end="2360:15"><expr pos:start="2360:13" pos:end="2360:15"><name pos:start="2360:13" pos:end="2360:15">zip</name></expr></argument>, <argument pos:start="2360:18" pos:end="2380:5"><expr pos:start="2360:18" pos:end="2380:5"><operator pos:start="2360:18" pos:end="2360:20">new</operator> <class pos:start="2360:22" pos:end="2380:5"><super pos:start="2360:22" pos:end="2360:37"><name pos:start="2360:22" pos:end="2360:37">ZipEntryCallback</name></super><argument_list pos:start="2360:38" pos:end="2360:39">()</argument_list> <block pos:start="2360:41" pos:end="2380:5">{
      <function pos:start="2361:7" pos:end="2379:7"><type pos:start="2361:7" pos:end="2361:17"><specifier pos:start="2361:7" pos:end="2361:12">public</specifier> <name pos:start="2361:14" pos:end="2361:17">void</name></type> <name pos:start="2361:19" pos:end="2361:25">process</name><parameter_list pos:start="2361:26" pos:end="2361:60">(<parameter pos:start="2361:27" pos:end="2361:40"><decl pos:start="2361:27" pos:end="2361:40"><type pos:start="2361:27" pos:end="2361:40"><name pos:start="2361:27" pos:end="2361:37">InputStream</name></type> <name pos:start="2361:39" pos:end="2361:40">in</name></decl></parameter>, <parameter pos:start="2361:43" pos:end="2361:59"><decl pos:start="2361:43" pos:end="2361:59"><type pos:start="2361:43" pos:end="2361:59"><name pos:start="2361:43" pos:end="2361:50">ZipEntry</name></type> <name pos:start="2361:52" pos:end="2361:59">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="2361:62" pos:end="2361:79">throws <argument pos:start="2361:69" pos:end="2361:79"><expr pos:start="2361:69" pos:end="2361:79"><name pos:start="2361:69" pos:end="2361:79">IOException</name></expr></argument></throws> <block pos:start="2361:81" pos:end="2379:7">{<block_content pos:start="2362:9" pos:end="2378:9">
        <decl_stmt pos:start="2362:9" pos:end="2362:46"><decl pos:start="2362:9" pos:end="2362:45"><type pos:start="2362:9" pos:end="2362:14"><name pos:start="2362:9" pos:end="2362:14">String</name></type> <name pos:start="2362:16" pos:end="2362:24">entryName</name> <init pos:start="2362:26" pos:end="2362:45">= <expr pos:start="2362:28" pos:end="2362:45"><call pos:start="2362:28" pos:end="2362:45"><name pos:start="2362:28" pos:end="2362:43"><name pos:start="2362:28" pos:end="2362:35">zipEntry</name><operator pos:start="2362:36" pos:end="2362:36">.</operator><name pos:start="2362:37" pos:end="2362:43">getName</name></name><argument_list pos:start="2362:44" pos:end="2362:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2363:9" pos:end="2365:9"><if pos:start="2363:9" pos:end="2365:9">if <condition pos:start="2363:12" pos:end="2363:47">(<expr pos:start="2363:13" pos:end="2363:46"><call pos:start="2363:13" pos:end="2363:46"><name pos:start="2363:13" pos:end="2363:35"><name pos:start="2363:13" pos:end="2363:26">ignoredEntries</name><operator pos:start="2363:27" pos:end="2363:27">.</operator><name pos:start="2363:28" pos:end="2363:35">contains</name></name><argument_list pos:start="2363:36" pos:end="2363:46">(<argument pos:start="2363:37" pos:end="2363:45"><expr pos:start="2363:37" pos:end="2363:45"><name pos:start="2363:37" pos:end="2363:45">entryName</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2363:49" pos:end="2365:9">{<block_content pos:start="2364:11" pos:end="2364:17">
          <return pos:start="2364:11" pos:end="2364:17">return;</return>
        </block_content>}</block></if></if_stmt>

        <for pos:start="2367:9" pos:end="2371:9">for <control pos:start="2367:13" pos:end="2367:39">(<init pos:start="2367:14" pos:end="2367:38"><decl pos:start="2367:14" pos:end="2367:38"><type pos:start="2367:14" pos:end="2367:19"><name pos:start="2367:14" pos:end="2367:19">String</name></type> <name pos:start="2367:21" pos:end="2367:27">dirName</name> <range pos:start="2367:29" pos:end="2367:38">: <expr pos:start="2367:31" pos:end="2367:38"><name pos:start="2367:31" pos:end="2367:38">dirNames</name></expr></range></decl></init>)</control> <block pos:start="2367:41" pos:end="2371:9">{<block_content pos:start="2368:11" pos:end="2370:11">
          <if_stmt pos:start="2368:11" pos:end="2370:11"><if pos:start="2368:11" pos:end="2370:11">if <condition pos:start="2368:14" pos:end="2368:44">(<expr pos:start="2368:15" pos:end="2368:43"><call pos:start="2368:15" pos:end="2368:43"><name pos:start="2368:15" pos:end="2368:34"><name pos:start="2368:15" pos:end="2368:23">entryName</name><operator pos:start="2368:24" pos:end="2368:24">.</operator><name pos:start="2368:25" pos:end="2368:34">startsWith</name></name><argument_list pos:start="2368:35" pos:end="2368:43">(<argument pos:start="2368:36" pos:end="2368:42"><expr pos:start="2368:36" pos:end="2368:42"><name pos:start="2368:36" pos:end="2368:42">dirName</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2368:46" pos:end="2370:11">{<block_content pos:start="2369:13" pos:end="2369:19">
            <return pos:start="2369:13" pos:end="2369:19">return;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt pos:start="2373:9" pos:end="2378:9"><if pos:start="2373:9" pos:end="2375:9">if <condition pos:start="2373:12" pos:end="2373:33">(<expr pos:start="2373:13" pos:end="2373:32"><call pos:start="2373:13" pos:end="2373:32"><name pos:start="2373:13" pos:end="2373:21"><name pos:start="2373:13" pos:end="2373:17">names</name><operator pos:start="2373:18" pos:end="2373:18">.</operator><name pos:start="2373:19" pos:end="2373:21">add</name></name><argument_list pos:start="2373:22" pos:end="2373:32">(<argument pos:start="2373:23" pos:end="2373:31"><expr pos:start="2373:23" pos:end="2373:31"><name pos:start="2373:23" pos:end="2373:31">entryName</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2373:35" pos:end="2375:9">{<block_content pos:start="2374:11" pos:end="2374:52">
          <expr_stmt pos:start="2374:11" pos:end="2374:52"><expr pos:start="2374:11" pos:end="2374:51"><call pos:start="2374:11" pos:end="2374:51"><name pos:start="2374:11" pos:end="2374:32"><name pos:start="2374:11" pos:end="2374:22">ZipEntryUtil</name><operator pos:start="2374:23" pos:end="2374:23">.</operator><name pos:start="2374:24" pos:end="2374:32">copyEntry</name></name><argument_list pos:start="2374:33" pos:end="2374:51">(<argument pos:start="2374:34" pos:end="2374:41"><expr pos:start="2374:34" pos:end="2374:41"><name pos:start="2374:34" pos:end="2374:41">zipEntry</name></expr></argument>, <argument pos:start="2374:44" pos:end="2374:45"><expr pos:start="2374:44" pos:end="2374:45"><name pos:start="2374:44" pos:end="2374:45">in</name></expr></argument>, <argument pos:start="2374:48" pos:end="2374:50"><expr pos:start="2374:48" pos:end="2374:50"><name pos:start="2374:48" pos:end="2374:50">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="2376:9" pos:end="2378:9">else if <condition pos:start="2376:17" pos:end="2376:38">(<expr pos:start="2376:18" pos:end="2376:37"><call pos:start="2376:18" pos:end="2376:37"><name pos:start="2376:18" pos:end="2376:35"><name pos:start="2376:18" pos:end="2376:20">log</name><operator pos:start="2376:21" pos:end="2376:21">.</operator><name pos:start="2376:22" pos:end="2376:35">isDebugEnabled</name></name><argument_list pos:start="2376:36" pos:end="2376:37">()</argument_list></call></expr>)</condition> <block pos:start="2376:40" pos:end="2378:9">{<block_content pos:start="2377:11" pos:end="2377:54">
          <expr_stmt pos:start="2377:11" pos:end="2377:54"><expr pos:start="2377:11" pos:end="2377:53"><call pos:start="2377:11" pos:end="2377:53"><name pos:start="2377:11" pos:end="2377:19"><name pos:start="2377:11" pos:end="2377:13">log</name><operator pos:start="2377:14" pos:end="2377:14">.</operator><name pos:start="2377:15" pos:end="2377:19">debug</name></name><argument_list pos:start="2377:20" pos:end="2377:53">(<argument pos:start="2377:21" pos:end="2377:41"><expr pos:start="2377:21" pos:end="2377:41"><literal type="string" pos:start="2377:21" pos:end="2377:41">"Duplicate entry: {}"</literal></expr></argument>, <argument pos:start="2377:44" pos:end="2377:52"><expr pos:start="2377:44" pos:end="2377:52"><name pos:start="2377:44" pos:end="2377:52">entryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2383:3" pos:end="2391:5">/**
   *
   * @param zip
   *          zip file to traverse
   * @param names
   *          names of entries to filter dirs from
   * @return Set&lt;String&gt; names of entries that are dirs.
   *
   */</comment>
  <function pos:start="2392:3" pos:end="2421:3"><type pos:start="2392:3" pos:end="2392:20"><specifier pos:start="2392:3" pos:end="2392:8">static</specifier> <name pos:start="2392:10" pos:end="2392:20"><name pos:start="2392:10" pos:end="2392:12">Set</name><argument_list type="generic" pos:start="2392:13" pos:end="2392:20">&lt;<argument pos:start="2392:14" pos:end="2392:19"><name pos:start="2392:14" pos:end="2392:19">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2392:22" pos:end="2392:37">filterDirEntries</name><parameter_list pos:start="2392:38" pos:end="2392:73">(<parameter pos:start="2392:39" pos:end="2392:46"><decl pos:start="2392:39" pos:end="2392:46"><type pos:start="2392:39" pos:end="2392:46"><name pos:start="2392:39" pos:end="2392:42">File</name></type> <name pos:start="2392:44" pos:end="2392:46">zip</name></decl></parameter>, <parameter pos:start="2392:49" pos:end="2392:72"><decl pos:start="2392:49" pos:end="2392:72"><type pos:start="2392:49" pos:end="2392:72"><name pos:start="2392:49" pos:end="2392:66"><name pos:start="2392:49" pos:end="2392:58">Collection</name><argument_list type="generic" pos:start="2392:59" pos:end="2392:66">&lt;<argument pos:start="2392:60" pos:end="2392:65"><name pos:start="2392:60" pos:end="2392:65">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2392:68" pos:end="2392:72">names</name></decl></parameter>)</parameter_list> <block pos:start="2392:75" pos:end="2421:3">{<block_content pos:start="2393:5" pos:end="2420:16">
    <decl_stmt pos:start="2393:5" pos:end="2393:45"><decl pos:start="2393:5" pos:end="2393:44"><type pos:start="2393:5" pos:end="2393:15"><name pos:start="2393:5" pos:end="2393:15"><name pos:start="2393:5" pos:end="2393:7">Set</name><argument_list type="generic" pos:start="2393:8" pos:end="2393:15">&lt;<argument pos:start="2393:9" pos:end="2393:14"><name pos:start="2393:9" pos:end="2393:14">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2393:17" pos:end="2393:20">dirs</name> <init pos:start="2393:22" pos:end="2393:44">= <expr pos:start="2393:24" pos:end="2393:44"><operator pos:start="2393:24" pos:end="2393:26">new</operator> <call pos:start="2393:28" pos:end="2393:44"><name pos:start="2393:28" pos:end="2393:42"><name pos:start="2393:28" pos:end="2393:34">HashSet</name><argument_list type="generic" pos:start="2393:35" pos:end="2393:42">&lt;<argument pos:start="2393:36" pos:end="2393:41"><name pos:start="2393:36" pos:end="2393:41">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2393:43" pos:end="2393:44">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2394:5" pos:end="2396:5"><if pos:start="2394:5" pos:end="2396:5">if <condition pos:start="2394:8" pos:end="2394:20">(<expr pos:start="2394:9" pos:end="2394:19"><name pos:start="2394:9" pos:end="2394:11">zip</name> <operator pos:start="2394:13" pos:end="2394:14">==</operator> <literal type="null" pos:start="2394:16" pos:end="2394:19">null</literal></expr>)</condition> <block pos:start="2394:22" pos:end="2396:5">{<block_content pos:start="2395:7" pos:end="2395:18">
      <return pos:start="2395:7" pos:end="2395:18">return <expr pos:start="2395:14" pos:end="2395:17"><name pos:start="2395:14" pos:end="2395:17">dirs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="2397:5" pos:end="2397:22"><decl pos:start="2397:5" pos:end="2397:21"><type pos:start="2397:5" pos:end="2397:11"><name pos:start="2397:5" pos:end="2397:11">ZipFile</name></type> <name pos:start="2397:13" pos:end="2397:14">zf</name> <init pos:start="2397:16" pos:end="2397:21">= <expr pos:start="2397:18" pos:end="2397:21"><literal type="null" pos:start="2397:18" pos:end="2397:21">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="2398:5" pos:end="2419:5">try <block pos:start="2398:9" pos:end="2413:5">{<block_content pos:start="2399:7" pos:end="2411:7">
      <expr_stmt pos:start="2399:7" pos:end="2399:28"><expr pos:start="2399:7" pos:end="2399:27"><name pos:start="2399:7" pos:end="2399:8">zf</name> <operator pos:start="2399:10" pos:end="2399:10">=</operator> <operator pos:start="2399:12" pos:end="2399:14">new</operator> <call pos:start="2399:16" pos:end="2399:27"><name pos:start="2399:16" pos:end="2399:22">ZipFile</name><argument_list pos:start="2399:23" pos:end="2399:27">(<argument pos:start="2399:24" pos:end="2399:26"><expr pos:start="2399:24" pos:end="2399:26"><name pos:start="2399:24" pos:end="2399:26">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for pos:start="2400:7" pos:end="2411:7">for <control pos:start="2400:11" pos:end="2400:36">(<init pos:start="2400:12" pos:end="2400:35"><decl pos:start="2400:12" pos:end="2400:35"><type pos:start="2400:12" pos:end="2400:17"><name pos:start="2400:12" pos:end="2400:17">String</name></type> <name pos:start="2400:19" pos:end="2400:27">entryName</name> <range pos:start="2400:29" pos:end="2400:35">: <expr pos:start="2400:31" pos:end="2400:35"><name pos:start="2400:31" pos:end="2400:35">names</name></expr></range></decl></init>)</control> <block pos:start="2400:38" pos:end="2411:7">{<block_content pos:start="2401:9" pos:end="2410:9">
        <decl_stmt pos:start="2401:9" pos:end="2401:48"><decl pos:start="2401:9" pos:end="2401:47"><type pos:start="2401:9" pos:end="2401:16"><name pos:start="2401:9" pos:end="2401:16">ZipEntry</name></type> <name pos:start="2401:18" pos:end="2401:22">entry</name> <init pos:start="2401:24" pos:end="2401:47">= <expr pos:start="2401:26" pos:end="2401:47"><call pos:start="2401:26" pos:end="2401:47"><name pos:start="2401:26" pos:end="2401:36"><name pos:start="2401:26" pos:end="2401:27">zf</name><operator pos:start="2401:28" pos:end="2401:28">.</operator><name pos:start="2401:29" pos:end="2401:36">getEntry</name></name><argument_list pos:start="2401:37" pos:end="2401:47">(<argument pos:start="2401:38" pos:end="2401:46"><expr pos:start="2401:38" pos:end="2401:46"><name pos:start="2401:38" pos:end="2401:46">entryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2402:9" pos:end="2410:9"><if pos:start="2402:9" pos:end="2410:9">if <condition pos:start="2402:12" pos:end="2402:26">(<expr pos:start="2402:13" pos:end="2402:25"><name pos:start="2402:13" pos:end="2402:17">entry</name> <operator pos:start="2402:19" pos:end="2402:20">!=</operator> <literal type="null" pos:start="2402:22" pos:end="2402:25">null</literal></expr>)</condition> <block pos:start="2402:28" pos:end="2410:9">{<block_content pos:start="2403:11" pos:end="2409:11">
          <if_stmt pos:start="2403:11" pos:end="2409:11"><if pos:start="2403:11" pos:end="2405:11">if <condition pos:start="2403:14" pos:end="2403:34">(<expr pos:start="2403:15" pos:end="2403:33"><call pos:start="2403:15" pos:end="2403:33"><name pos:start="2403:15" pos:end="2403:31"><name pos:start="2403:15" pos:end="2403:19">entry</name><operator pos:start="2403:20" pos:end="2403:20">.</operator><name pos:start="2403:21" pos:end="2403:31">isDirectory</name></name><argument_list pos:start="2403:32" pos:end="2403:33">()</argument_list></call></expr>)</condition> <block pos:start="2403:36" pos:end="2405:11">{<block_content pos:start="2404:13" pos:end="2404:38">
            <expr_stmt pos:start="2404:13" pos:end="2404:38"><expr pos:start="2404:13" pos:end="2404:37"><call pos:start="2404:13" pos:end="2404:37"><name pos:start="2404:13" pos:end="2404:20"><name pos:start="2404:13" pos:end="2404:16">dirs</name><operator pos:start="2404:17" pos:end="2404:17">.</operator><name pos:start="2404:18" pos:end="2404:20">add</name></name><argument_list pos:start="2404:21" pos:end="2404:37">(<argument pos:start="2404:22" pos:end="2404:36"><expr pos:start="2404:22" pos:end="2404:36"><call pos:start="2404:22" pos:end="2404:36"><name pos:start="2404:22" pos:end="2404:34"><name pos:start="2404:22" pos:end="2404:26">entry</name><operator pos:start="2404:27" pos:end="2404:27">.</operator><name pos:start="2404:28" pos:end="2404:34">getName</name></name><argument_list pos:start="2404:35" pos:end="2404:36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <if type="elseif" pos:start="2406:11" pos:end="2409:11">else if <condition pos:start="2406:19" pos:end="2406:52">(<expr pos:start="2406:20" pos:end="2406:51"><call pos:start="2406:20" pos:end="2406:43"><name pos:start="2406:20" pos:end="2406:36"><name pos:start="2406:20" pos:end="2406:21">zf</name><operator pos:start="2406:22" pos:end="2406:22">.</operator><name pos:start="2406:23" pos:end="2406:36">getInputStream</name></name><argument_list pos:start="2406:37" pos:end="2406:43">(<argument pos:start="2406:38" pos:end="2406:42"><expr pos:start="2406:38" pos:end="2406:42"><name pos:start="2406:38" pos:end="2406:42">entry</name></expr></argument>)</argument_list></call> <operator pos:start="2406:45" pos:end="2406:46">==</operator> <literal type="null" pos:start="2406:48" pos:end="2406:51">null</literal></expr>)</condition> <block pos:start="2406:54" pos:end="2409:11">{<block_content pos:start="2408:13" pos:end="2408:55">
            <comment type="line" pos:start="2407:13" pos:end="2407:56">// no input stream means that this is a dir.</comment>
            <expr_stmt pos:start="2408:13" pos:end="2408:55"><expr pos:start="2408:13" pos:end="2408:54"><call pos:start="2408:13" pos:end="2408:54"><name pos:start="2408:13" pos:end="2408:20"><name pos:start="2408:13" pos:end="2408:16">dirs</name><operator pos:start="2408:17" pos:end="2408:17">.</operator><name pos:start="2408:18" pos:end="2408:20">add</name></name><argument_list pos:start="2408:21" pos:end="2408:54">(<argument pos:start="2408:22" pos:end="2408:53"><expr pos:start="2408:22" pos:end="2408:53"><call pos:start="2408:22" pos:end="2408:36"><name pos:start="2408:22" pos:end="2408:34"><name pos:start="2408:22" pos:end="2408:26">entry</name><operator pos:start="2408:27" pos:end="2408:27">.</operator><name pos:start="2408:28" pos:end="2408:34">getName</name></name><argument_list pos:start="2408:35" pos:end="2408:36">()</argument_list></call> <operator pos:start="2408:38" pos:end="2408:38">+</operator> <name pos:start="2408:40" pos:end="2408:53">PATH_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

    </block_content>}</block>
    <catch pos:start="2414:5" pos:end="2416:5">catch <parameter_list pos:start="2414:11" pos:end="2414:25">(<parameter pos:start="2414:12" pos:end="2414:24"><decl pos:start="2414:12" pos:end="2414:24"><type pos:start="2414:12" pos:end="2414:24"><name pos:start="2414:12" pos:end="2414:22">IOException</name></type> <name pos:start="2414:24" pos:end="2414:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2414:27" pos:end="2416:5">{<block_content pos:start="2415:7" pos:end="2415:34">
      <expr_stmt pos:start="2415:7" pos:end="2415:34"><expr pos:start="2415:7" pos:end="2415:33"><call pos:start="2415:7" pos:end="2415:33"><name pos:start="2415:7" pos:end="2415:30"><name pos:start="2415:7" pos:end="2415:22">ZipExceptionUtil</name><operator pos:start="2415:23" pos:end="2415:23">.</operator><name pos:start="2415:24" pos:end="2415:30">rethrow</name></name><argument_list pos:start="2415:31" pos:end="2415:33">(<argument pos:start="2415:32" pos:end="2415:32"><expr pos:start="2415:32" pos:end="2415:32"><name pos:start="2415:32" pos:end="2415:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch>
    <finally pos:start="2417:5" pos:end="2419:5">finally <block pos:start="2417:13" pos:end="2419:5">{<block_content pos:start="2418:7" pos:end="2418:23">
      <expr_stmt pos:start="2418:7" pos:end="2418:23"><expr pos:start="2418:7" pos:end="2418:22"><call pos:start="2418:7" pos:end="2418:22"><name pos:start="2418:7" pos:end="2418:18">closeQuietly</name><argument_list pos:start="2418:19" pos:end="2418:22">(<argument pos:start="2418:20" pos:end="2418:21"><expr pos:start="2418:20" pos:end="2418:21"><name pos:start="2418:20" pos:end="2418:21">zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
    <return pos:start="2420:5" pos:end="2420:16">return <expr pos:start="2420:12" pos:end="2420:15"><name pos:start="2420:12" pos:end="2420:15">dirs</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2423:3" pos:end="2435:5">/**
   * Copies an existing ZIP file and replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param file
   *          new entry.
   * @param destZip
   *          new ZIP file created.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2436:3" pos:end="2438:3"><type pos:start="2436:3" pos:end="2436:23"><specifier pos:start="2436:3" pos:end="2436:8">public</specifier> <specifier pos:start="2436:10" pos:end="2436:15">static</specifier> <name pos:start="2436:17" pos:end="2436:23">boolean</name></type> <name pos:start="2436:25" pos:end="2436:36">replaceEntry</name><parameter_list pos:start="2436:37" pos:end="2436:84">(<parameter pos:start="2436:38" pos:end="2436:45"><decl pos:start="2436:38" pos:end="2436:45"><type pos:start="2436:38" pos:end="2436:45"><name pos:start="2436:38" pos:end="2436:41">File</name></type> <name pos:start="2436:43" pos:end="2436:45">zip</name></decl></parameter>, <parameter pos:start="2436:48" pos:end="2436:58"><decl pos:start="2436:48" pos:end="2436:58"><type pos:start="2436:48" pos:end="2436:58"><name pos:start="2436:48" pos:end="2436:53">String</name></type> <name pos:start="2436:55" pos:end="2436:58">path</name></decl></parameter>, <parameter pos:start="2436:61" pos:end="2436:69"><decl pos:start="2436:61" pos:end="2436:69"><type pos:start="2436:61" pos:end="2436:69"><name pos:start="2436:61" pos:end="2436:64">File</name></type> <name pos:start="2436:66" pos:end="2436:69">file</name></decl></parameter>, <parameter pos:start="2436:72" pos:end="2436:83"><decl pos:start="2436:72" pos:end="2436:83"><type pos:start="2436:72" pos:end="2436:83"><name pos:start="2436:72" pos:end="2436:75">File</name></type> <name pos:start="2436:77" pos:end="2436:83">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2436:86" pos:end="2438:3">{<block_content pos:start="2437:5" pos:end="2437:66">
    <return pos:start="2437:5" pos:end="2437:66">return <expr pos:start="2437:12" pos:end="2437:65"><call pos:start="2437:12" pos:end="2437:65"><name pos:start="2437:12" pos:end="2437:23">replaceEntry</name><argument_list pos:start="2437:24" pos:end="2437:65">(<argument pos:start="2437:25" pos:end="2437:27"><expr pos:start="2437:25" pos:end="2437:27"><name pos:start="2437:25" pos:end="2437:27">zip</name></expr></argument>, <argument pos:start="2437:30" pos:end="2437:55"><expr pos:start="2437:30" pos:end="2437:55"><operator pos:start="2437:30" pos:end="2437:32">new</operator> <call pos:start="2437:34" pos:end="2437:55"><name pos:start="2437:34" pos:end="2437:43">FileSource</name><argument_list pos:start="2437:44" pos:end="2437:55">(<argument pos:start="2437:45" pos:end="2437:48"><expr pos:start="2437:45" pos:end="2437:48"><name pos:start="2437:45" pos:end="2437:48">path</name></expr></argument>, <argument pos:start="2437:51" pos:end="2437:54"><expr pos:start="2437:51" pos:end="2437:54"><name pos:start="2437:51" pos:end="2437:54">file</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2437:58" pos:end="2437:64"><expr pos:start="2437:58" pos:end="2437:64"><name pos:start="2437:58" pos:end="2437:64">destZip</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2440:3" pos:end="2450:5">/**
   * Changes an existing ZIP file: replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file.
   * @param path
   *          new ZIP entry path.
   * @param file
   *          new entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2451:3" pos:end="2457:3"><type pos:start="2451:3" pos:end="2451:23"><specifier pos:start="2451:3" pos:end="2451:8">public</specifier> <specifier pos:start="2451:10" pos:end="2451:15">static</specifier> <name pos:start="2451:17" pos:end="2451:23">boolean</name></type> <name pos:start="2451:25" pos:end="2451:36">replaceEntry</name><parameter_list pos:start="2451:37" pos:end="2451:88">(<parameter pos:start="2451:38" pos:end="2451:51"><decl pos:start="2451:38" pos:end="2451:51"><type pos:start="2451:38" pos:end="2451:51"><specifier pos:start="2451:38" pos:end="2451:42">final</specifier> <name pos:start="2451:44" pos:end="2451:47">File</name></type> <name pos:start="2451:49" pos:end="2451:51">zip</name></decl></parameter>, <parameter pos:start="2451:54" pos:end="2451:70"><decl pos:start="2451:54" pos:end="2451:70"><type pos:start="2451:54" pos:end="2451:70"><specifier pos:start="2451:54" pos:end="2451:58">final</specifier> <name pos:start="2451:60" pos:end="2451:65">String</name></type> <name pos:start="2451:67" pos:end="2451:70">path</name></decl></parameter>, <parameter pos:start="2451:73" pos:end="2451:87"><decl pos:start="2451:73" pos:end="2451:87"><type pos:start="2451:73" pos:end="2451:87"><specifier pos:start="2451:73" pos:end="2451:77">final</specifier> <name pos:start="2451:79" pos:end="2451:82">File</name></type> <name pos:start="2451:84" pos:end="2451:87">file</name></decl></parameter>)</parameter_list> <block pos:start="2451:90" pos:end="2457:3">{<block_content pos:start="2452:5" pos:end="2456:7">
    <return pos:start="2452:5" pos:end="2456:7">return <expr pos:start="2452:12" pos:end="2456:6"><call pos:start="2452:12" pos:end="2456:6"><name pos:start="2452:12" pos:end="2452:25">operateInPlace</name><argument_list pos:start="2452:26" pos:end="2456:6">(<argument pos:start="2452:27" pos:end="2452:29"><expr pos:start="2452:27" pos:end="2452:29"><name pos:start="2452:27" pos:end="2452:29">zip</name></expr></argument>, <argument pos:start="2452:32" pos:end="2456:5"><expr pos:start="2452:32" pos:end="2456:5"><operator pos:start="2452:32" pos:end="2452:34">new</operator> <class pos:start="2452:36" pos:end="2456:5"><super pos:start="2452:36" pos:end="2452:48"><name pos:start="2452:36" pos:end="2452:48">InPlaceAction</name></super><argument_list pos:start="2452:49" pos:end="2452:50">()</argument_list> <block pos:start="2452:52" pos:end="2456:5">{
      <function pos:start="2453:7" pos:end="2455:7"><type pos:start="2453:7" pos:end="2453:20"><specifier pos:start="2453:7" pos:end="2453:12">public</specifier> <name pos:start="2453:14" pos:end="2453:20">boolean</name></type> <name pos:start="2453:22" pos:end="2453:24">act</name><parameter_list pos:start="2453:25" pos:end="2453:38">(<parameter pos:start="2453:26" pos:end="2453:37"><decl pos:start="2453:26" pos:end="2453:37"><type pos:start="2453:26" pos:end="2453:29"><name pos:start="2453:26" pos:end="2453:29">File</name></type> <name pos:start="2453:31" pos:end="2453:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2453:40" pos:end="2455:7">{<block_content pos:start="2454:9" pos:end="2454:70">
        <return pos:start="2454:9" pos:end="2454:70">return <expr pos:start="2454:16" pos:end="2454:69"><call pos:start="2454:16" pos:end="2454:69"><name pos:start="2454:16" pos:end="2454:27">replaceEntry</name><argument_list pos:start="2454:28" pos:end="2454:69">(<argument pos:start="2454:29" pos:end="2454:31"><expr pos:start="2454:29" pos:end="2454:31"><name pos:start="2454:29" pos:end="2454:31">zip</name></expr></argument>, <argument pos:start="2454:34" pos:end="2454:59"><expr pos:start="2454:34" pos:end="2454:59"><operator pos:start="2454:34" pos:end="2454:36">new</operator> <call pos:start="2454:38" pos:end="2454:59"><name pos:start="2454:38" pos:end="2454:47">FileSource</name><argument_list pos:start="2454:48" pos:end="2454:59">(<argument pos:start="2454:49" pos:end="2454:52"><expr pos:start="2454:49" pos:end="2454:52"><name pos:start="2454:49" pos:end="2454:52">path</name></expr></argument>, <argument pos:start="2454:55" pos:end="2454:58"><expr pos:start="2454:55" pos:end="2454:58"><name pos:start="2454:55" pos:end="2454:58">file</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2454:62" pos:end="2454:68"><expr pos:start="2454:62" pos:end="2454:68"><name pos:start="2454:62" pos:end="2454:68">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2459:3" pos:end="2471:5">/**
   * Copies an existing ZIP file and replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   * @param destZip
   *          new ZIP file created.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2472:3" pos:end="2474:3"><type pos:start="2472:3" pos:end="2472:23"><specifier pos:start="2472:3" pos:end="2472:8">public</specifier> <specifier pos:start="2472:10" pos:end="2472:15">static</specifier> <name pos:start="2472:17" pos:end="2472:23">boolean</name></type> <name pos:start="2472:25" pos:end="2472:36">replaceEntry</name><parameter_list pos:start="2472:37" pos:end="2472:87">(<parameter pos:start="2472:38" pos:end="2472:45"><decl pos:start="2472:38" pos:end="2472:45"><type pos:start="2472:38" pos:end="2472:45"><name pos:start="2472:38" pos:end="2472:41">File</name></type> <name pos:start="2472:43" pos:end="2472:45">zip</name></decl></parameter>, <parameter pos:start="2472:48" pos:end="2472:58"><decl pos:start="2472:48" pos:end="2472:58"><type pos:start="2472:48" pos:end="2472:58"><name pos:start="2472:48" pos:end="2472:53">String</name></type> <name pos:start="2472:55" pos:end="2472:58">path</name></decl></parameter>, <parameter pos:start="2472:61" pos:end="2472:72"><decl pos:start="2472:61" pos:end="2472:72"><type pos:start="2472:61" pos:end="2472:72"><name pos:start="2472:61" pos:end="2472:66"><name pos:start="2472:61" pos:end="2472:64">byte</name><index pos:start="2472:65" pos:end="2472:66">[]</index></name></type> <name pos:start="2472:68" pos:end="2472:72">bytes</name></decl></parameter>, <parameter pos:start="2472:75" pos:end="2472:86"><decl pos:start="2472:75" pos:end="2472:86"><type pos:start="2472:75" pos:end="2472:86"><name pos:start="2472:75" pos:end="2472:78">File</name></type> <name pos:start="2472:80" pos:end="2472:86">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2472:89" pos:end="2474:3">{<block_content pos:start="2473:5" pos:end="2473:67">
    <return pos:start="2473:5" pos:end="2473:67">return <expr pos:start="2473:12" pos:end="2473:66"><call pos:start="2473:12" pos:end="2473:66"><name pos:start="2473:12" pos:end="2473:23">replaceEntry</name><argument_list pos:start="2473:24" pos:end="2473:66">(<argument pos:start="2473:25" pos:end="2473:27"><expr pos:start="2473:25" pos:end="2473:27"><name pos:start="2473:25" pos:end="2473:27">zip</name></expr></argument>, <argument pos:start="2473:30" pos:end="2473:56"><expr pos:start="2473:30" pos:end="2473:56"><operator pos:start="2473:30" pos:end="2473:32">new</operator> <call pos:start="2473:34" pos:end="2473:56"><name pos:start="2473:34" pos:end="2473:43">ByteSource</name><argument_list pos:start="2473:44" pos:end="2473:56">(<argument pos:start="2473:45" pos:end="2473:48"><expr pos:start="2473:45" pos:end="2473:48"><name pos:start="2473:45" pos:end="2473:48">path</name></expr></argument>, <argument pos:start="2473:51" pos:end="2473:55"><expr pos:start="2473:51" pos:end="2473:55"><name pos:start="2473:51" pos:end="2473:55">bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2473:59" pos:end="2473:65"><expr pos:start="2473:59" pos:end="2473:65"><name pos:start="2473:59" pos:end="2473:65">destZip</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2476:3" pos:end="2486:5">/**
   * Changes an existing ZIP file: replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file.
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2487:3" pos:end="2493:3"><type pos:start="2487:3" pos:end="2487:23"><specifier pos:start="2487:3" pos:end="2487:8">public</specifier> <specifier pos:start="2487:10" pos:end="2487:15">static</specifier> <name pos:start="2487:17" pos:end="2487:23">boolean</name></type> <name pos:start="2487:25" pos:end="2487:36">replaceEntry</name><parameter_list pos:start="2487:37" pos:end="2487:91">(<parameter pos:start="2487:38" pos:end="2487:51"><decl pos:start="2487:38" pos:end="2487:51"><type pos:start="2487:38" pos:end="2487:51"><specifier pos:start="2487:38" pos:end="2487:42">final</specifier> <name pos:start="2487:44" pos:end="2487:47">File</name></type> <name pos:start="2487:49" pos:end="2487:51">zip</name></decl></parameter>, <parameter pos:start="2487:54" pos:end="2487:70"><decl pos:start="2487:54" pos:end="2487:70"><type pos:start="2487:54" pos:end="2487:70"><specifier pos:start="2487:54" pos:end="2487:58">final</specifier> <name pos:start="2487:60" pos:end="2487:65">String</name></type> <name pos:start="2487:67" pos:end="2487:70">path</name></decl></parameter>, <parameter pos:start="2487:73" pos:end="2487:90"><decl pos:start="2487:73" pos:end="2487:90"><type pos:start="2487:73" pos:end="2487:90"><specifier pos:start="2487:73" pos:end="2487:77">final</specifier> <name pos:start="2487:79" pos:end="2487:84"><name pos:start="2487:79" pos:end="2487:82">byte</name><index pos:start="2487:83" pos:end="2487:84">[]</index></name></type> <name pos:start="2487:86" pos:end="2487:90">bytes</name></decl></parameter>)</parameter_list> <block pos:start="2487:93" pos:end="2493:3">{<block_content pos:start="2488:5" pos:end="2492:7">
    <return pos:start="2488:5" pos:end="2492:7">return <expr pos:start="2488:12" pos:end="2492:6"><call pos:start="2488:12" pos:end="2492:6"><name pos:start="2488:12" pos:end="2488:25">operateInPlace</name><argument_list pos:start="2488:26" pos:end="2492:6">(<argument pos:start="2488:27" pos:end="2488:29"><expr pos:start="2488:27" pos:end="2488:29"><name pos:start="2488:27" pos:end="2488:29">zip</name></expr></argument>, <argument pos:start="2488:32" pos:end="2492:5"><expr pos:start="2488:32" pos:end="2492:5"><operator pos:start="2488:32" pos:end="2488:34">new</operator> <class pos:start="2488:36" pos:end="2492:5"><super pos:start="2488:36" pos:end="2488:48"><name pos:start="2488:36" pos:end="2488:48">InPlaceAction</name></super><argument_list pos:start="2488:49" pos:end="2488:50">()</argument_list> <block pos:start="2488:52" pos:end="2492:5">{
      <function pos:start="2489:7" pos:end="2491:7"><type pos:start="2489:7" pos:end="2489:20"><specifier pos:start="2489:7" pos:end="2489:12">public</specifier> <name pos:start="2489:14" pos:end="2489:20">boolean</name></type> <name pos:start="2489:22" pos:end="2489:24">act</name><parameter_list pos:start="2489:25" pos:end="2489:38">(<parameter pos:start="2489:26" pos:end="2489:37"><decl pos:start="2489:26" pos:end="2489:37"><type pos:start="2489:26" pos:end="2489:29"><name pos:start="2489:26" pos:end="2489:29">File</name></type> <name pos:start="2489:31" pos:end="2489:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2489:40" pos:end="2491:7">{<block_content pos:start="2490:9" pos:end="2490:71">
        <return pos:start="2490:9" pos:end="2490:71">return <expr pos:start="2490:16" pos:end="2490:70"><call pos:start="2490:16" pos:end="2490:70"><name pos:start="2490:16" pos:end="2490:27">replaceEntry</name><argument_list pos:start="2490:28" pos:end="2490:70">(<argument pos:start="2490:29" pos:end="2490:31"><expr pos:start="2490:29" pos:end="2490:31"><name pos:start="2490:29" pos:end="2490:31">zip</name></expr></argument>, <argument pos:start="2490:34" pos:end="2490:60"><expr pos:start="2490:34" pos:end="2490:60"><operator pos:start="2490:34" pos:end="2490:36">new</operator> <call pos:start="2490:38" pos:end="2490:60"><name pos:start="2490:38" pos:end="2490:47">ByteSource</name><argument_list pos:start="2490:48" pos:end="2490:60">(<argument pos:start="2490:49" pos:end="2490:52"><expr pos:start="2490:49" pos:end="2490:52"><name pos:start="2490:49" pos:end="2490:52">path</name></expr></argument>, <argument pos:start="2490:55" pos:end="2490:59"><expr pos:start="2490:55" pos:end="2490:59"><name pos:start="2490:55" pos:end="2490:59">bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2490:63" pos:end="2490:69"><expr pos:start="2490:63" pos:end="2490:69"><name pos:start="2490:63" pos:end="2490:69">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2495:3" pos:end="2507:5">/**
   * Changes an existing ZIP file: replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file.
   * @param path
   *          new ZIP entry path.
   * @param bytes
   *          new entry bytes (or &lt;code&gt;null&lt;/code&gt; if directory).
   * @param compressionMethod
   *          the new compression method (&lt;code&gt;ZipEntry.STORED&lt;/code&gt; or &lt;code&gt;ZipEntry.DEFLATED&lt;/code&gt;).
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2508:3" pos:end="2515:3"><type pos:start="2508:3" pos:end="2508:23"><specifier pos:start="2508:3" pos:end="2508:8">public</specifier> <specifier pos:start="2508:10" pos:end="2508:15">static</specifier> <name pos:start="2508:17" pos:end="2508:23">boolean</name></type> <name pos:start="2508:25" pos:end="2508:36">replaceEntry</name><parameter_list pos:start="2508:37" pos:end="2509:34">(<parameter pos:start="2508:38" pos:end="2508:51"><decl pos:start="2508:38" pos:end="2508:51"><type pos:start="2508:38" pos:end="2508:51"><specifier pos:start="2508:38" pos:end="2508:42">final</specifier> <name pos:start="2508:44" pos:end="2508:47">File</name></type> <name pos:start="2508:49" pos:end="2508:51">zip</name></decl></parameter>, <parameter pos:start="2508:54" pos:end="2508:70"><decl pos:start="2508:54" pos:end="2508:70"><type pos:start="2508:54" pos:end="2508:70"><specifier pos:start="2508:54" pos:end="2508:58">final</specifier> <name pos:start="2508:60" pos:end="2508:65">String</name></type> <name pos:start="2508:67" pos:end="2508:70">path</name></decl></parameter>, <parameter pos:start="2508:73" pos:end="2508:90"><decl pos:start="2508:73" pos:end="2508:90"><type pos:start="2508:73" pos:end="2508:90"><specifier pos:start="2508:73" pos:end="2508:77">final</specifier> <name pos:start="2508:79" pos:end="2508:84"><name pos:start="2508:79" pos:end="2508:82">byte</name><index pos:start="2508:83" pos:end="2508:84">[]</index></name></type> <name pos:start="2508:86" pos:end="2508:90">bytes</name></decl></parameter>,
      <parameter pos:start="2509:7" pos:end="2509:33"><decl pos:start="2509:7" pos:end="2509:33"><type pos:start="2509:7" pos:end="2509:33"><specifier pos:start="2509:7" pos:end="2509:11">final</specifier> <name pos:start="2509:13" pos:end="2509:15">int</name></type> <name pos:start="2509:17" pos:end="2509:33">compressionMethod</name></decl></parameter>)</parameter_list> <block pos:start="2509:36" pos:end="2515:3">{<block_content pos:start="2510:5" pos:end="2514:7">
    <return pos:start="2510:5" pos:end="2514:7">return <expr pos:start="2510:12" pos:end="2514:6"><call pos:start="2510:12" pos:end="2514:6"><name pos:start="2510:12" pos:end="2510:25">operateInPlace</name><argument_list pos:start="2510:26" pos:end="2514:6">(<argument pos:start="2510:27" pos:end="2510:29"><expr pos:start="2510:27" pos:end="2510:29"><name pos:start="2510:27" pos:end="2510:29">zip</name></expr></argument>, <argument pos:start="2510:32" pos:end="2514:5"><expr pos:start="2510:32" pos:end="2514:5"><operator pos:start="2510:32" pos:end="2510:34">new</operator> <class pos:start="2510:36" pos:end="2514:5"><super pos:start="2510:36" pos:end="2510:48"><name pos:start="2510:36" pos:end="2510:48">InPlaceAction</name></super><argument_list pos:start="2510:49" pos:end="2510:50">()</argument_list> <block pos:start="2510:52" pos:end="2514:5">{
      <function pos:start="2511:7" pos:end="2513:7"><type pos:start="2511:7" pos:end="2511:20"><specifier pos:start="2511:7" pos:end="2511:12">public</specifier> <name pos:start="2511:14" pos:end="2511:20">boolean</name></type> <name pos:start="2511:22" pos:end="2511:24">act</name><parameter_list pos:start="2511:25" pos:end="2511:38">(<parameter pos:start="2511:26" pos:end="2511:37"><decl pos:start="2511:26" pos:end="2511:37"><type pos:start="2511:26" pos:end="2511:29"><name pos:start="2511:26" pos:end="2511:29">File</name></type> <name pos:start="2511:31" pos:end="2511:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2511:40" pos:end="2513:7">{<block_content pos:start="2512:9" pos:end="2512:90">
        <return pos:start="2512:9" pos:end="2512:90">return <expr pos:start="2512:16" pos:end="2512:89"><call pos:start="2512:16" pos:end="2512:89"><name pos:start="2512:16" pos:end="2512:27">replaceEntry</name><argument_list pos:start="2512:28" pos:end="2512:89">(<argument pos:start="2512:29" pos:end="2512:31"><expr pos:start="2512:29" pos:end="2512:31"><name pos:start="2512:29" pos:end="2512:31">zip</name></expr></argument>, <argument pos:start="2512:34" pos:end="2512:79"><expr pos:start="2512:34" pos:end="2512:79"><operator pos:start="2512:34" pos:end="2512:36">new</operator> <call pos:start="2512:38" pos:end="2512:79"><name pos:start="2512:38" pos:end="2512:47">ByteSource</name><argument_list pos:start="2512:48" pos:end="2512:79">(<argument pos:start="2512:49" pos:end="2512:52"><expr pos:start="2512:49" pos:end="2512:52"><name pos:start="2512:49" pos:end="2512:52">path</name></expr></argument>, <argument pos:start="2512:55" pos:end="2512:59"><expr pos:start="2512:55" pos:end="2512:59"><name pos:start="2512:55" pos:end="2512:59">bytes</name></expr></argument>, <argument pos:start="2512:62" pos:end="2512:78"><expr pos:start="2512:62" pos:end="2512:78"><name pos:start="2512:62" pos:end="2512:78">compressionMethod</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2512:82" pos:end="2512:88"><expr pos:start="2512:82" pos:end="2512:88"><name pos:start="2512:82" pos:end="2512:88">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2517:3" pos:end="2527:5">/**
   * Copies an existing ZIP file and replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entry
   *          new ZIP entry.
   * @param destZip
   *          new ZIP file created.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2528:3" pos:end="2530:3"><type pos:start="2528:3" pos:end="2528:23"><specifier pos:start="2528:3" pos:end="2528:8">public</specifier> <specifier pos:start="2528:10" pos:end="2528:15">static</specifier> <name pos:start="2528:17" pos:end="2528:23">boolean</name></type> <name pos:start="2528:25" pos:end="2528:36">replaceEntry</name><parameter_list pos:start="2528:37" pos:end="2528:82">(<parameter pos:start="2528:38" pos:end="2528:45"><decl pos:start="2528:38" pos:end="2528:45"><type pos:start="2528:38" pos:end="2528:45"><name pos:start="2528:38" pos:end="2528:41">File</name></type> <name pos:start="2528:43" pos:end="2528:45">zip</name></decl></parameter>, <parameter pos:start="2528:48" pos:end="2528:67"><decl pos:start="2528:48" pos:end="2528:67"><type pos:start="2528:48" pos:end="2528:67"><name pos:start="2528:48" pos:end="2528:61">ZipEntrySource</name></type> <name pos:start="2528:63" pos:end="2528:67">entry</name></decl></parameter>, <parameter pos:start="2528:70" pos:end="2528:81"><decl pos:start="2528:70" pos:end="2528:81"><type pos:start="2528:70" pos:end="2528:81"><name pos:start="2528:70" pos:end="2528:73">File</name></type> <name pos:start="2528:75" pos:end="2528:81">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2528:84" pos:end="2530:3">{<block_content pos:start="2529:5" pos:end="2529:72">
    <return pos:start="2529:5" pos:end="2529:72">return <expr pos:start="2529:12" pos:end="2529:71"><call pos:start="2529:12" pos:end="2529:71"><name pos:start="2529:12" pos:end="2529:25">replaceEntries</name><argument_list pos:start="2529:26" pos:end="2529:71">(<argument pos:start="2529:27" pos:end="2529:29"><expr pos:start="2529:27" pos:end="2529:29"><name pos:start="2529:27" pos:end="2529:29">zip</name></expr></argument>, <argument pos:start="2529:32" pos:end="2529:61"><expr pos:start="2529:32" pos:end="2529:61"><operator pos:start="2529:32" pos:end="2529:34">new</operator> <name pos:start="2529:36" pos:end="2529:51"><name pos:start="2529:36" pos:end="2529:49">ZipEntrySource</name><index pos:start="2529:50" pos:end="2529:51">[]</index></name> <block pos:start="2529:53" pos:end="2529:61">{ <expr pos:start="2529:55" pos:end="2529:59"><name pos:start="2529:55" pos:end="2529:59">entry</name></expr> }</block></expr></argument>, <argument pos:start="2529:64" pos:end="2529:70"><expr pos:start="2529:64" pos:end="2529:70"><name pos:start="2529:64" pos:end="2529:70">destZip</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2532:3" pos:end="2540:5">/**
   * Changes an existing ZIP file: replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file.
   * @param entry
   *          new ZIP entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2541:3" pos:end="2547:3"><type pos:start="2541:3" pos:end="2541:23"><specifier pos:start="2541:3" pos:end="2541:8">public</specifier> <specifier pos:start="2541:10" pos:end="2541:15">static</specifier> <name pos:start="2541:17" pos:end="2541:23">boolean</name></type> <name pos:start="2541:25" pos:end="2541:36">replaceEntry</name><parameter_list pos:start="2541:37" pos:end="2541:80">(<parameter pos:start="2541:38" pos:end="2541:51"><decl pos:start="2541:38" pos:end="2541:51"><type pos:start="2541:38" pos:end="2541:51"><specifier pos:start="2541:38" pos:end="2541:42">final</specifier> <name pos:start="2541:44" pos:end="2541:47">File</name></type> <name pos:start="2541:49" pos:end="2541:51">zip</name></decl></parameter>, <parameter pos:start="2541:54" pos:end="2541:79"><decl pos:start="2541:54" pos:end="2541:79"><type pos:start="2541:54" pos:end="2541:79"><specifier pos:start="2541:54" pos:end="2541:58">final</specifier> <name pos:start="2541:60" pos:end="2541:73">ZipEntrySource</name></type> <name pos:start="2541:75" pos:end="2541:79">entry</name></decl></parameter>)</parameter_list> <block pos:start="2541:82" pos:end="2547:3">{<block_content pos:start="2542:5" pos:end="2546:7">
    <return pos:start="2542:5" pos:end="2546:7">return <expr pos:start="2542:12" pos:end="2546:6"><call pos:start="2542:12" pos:end="2546:6"><name pos:start="2542:12" pos:end="2542:25">operateInPlace</name><argument_list pos:start="2542:26" pos:end="2546:6">(<argument pos:start="2542:27" pos:end="2542:29"><expr pos:start="2542:27" pos:end="2542:29"><name pos:start="2542:27" pos:end="2542:29">zip</name></expr></argument>, <argument pos:start="2542:32" pos:end="2546:5"><expr pos:start="2542:32" pos:end="2546:5"><operator pos:start="2542:32" pos:end="2542:34">new</operator> <class pos:start="2542:36" pos:end="2546:5"><super pos:start="2542:36" pos:end="2542:48"><name pos:start="2542:36" pos:end="2542:48">InPlaceAction</name></super><argument_list pos:start="2542:49" pos:end="2542:50">()</argument_list> <block pos:start="2542:52" pos:end="2546:5">{
      <function pos:start="2543:7" pos:end="2545:7"><type pos:start="2543:7" pos:end="2543:20"><specifier pos:start="2543:7" pos:end="2543:12">public</specifier> <name pos:start="2543:14" pos:end="2543:20">boolean</name></type> <name pos:start="2543:22" pos:end="2543:24">act</name><parameter_list pos:start="2543:25" pos:end="2543:38">(<parameter pos:start="2543:26" pos:end="2543:37"><decl pos:start="2543:26" pos:end="2543:37"><type pos:start="2543:26" pos:end="2543:29"><name pos:start="2543:26" pos:end="2543:29">File</name></type> <name pos:start="2543:31" pos:end="2543:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2543:40" pos:end="2545:7">{<block_content pos:start="2544:9" pos:end="2544:49">
        <return pos:start="2544:9" pos:end="2544:49">return <expr pos:start="2544:16" pos:end="2544:48"><call pos:start="2544:16" pos:end="2544:48"><name pos:start="2544:16" pos:end="2544:27">replaceEntry</name><argument_list pos:start="2544:28" pos:end="2544:48">(<argument pos:start="2544:29" pos:end="2544:31"><expr pos:start="2544:29" pos:end="2544:31"><name pos:start="2544:29" pos:end="2544:31">zip</name></expr></argument>, <argument pos:start="2544:34" pos:end="2544:38"><expr pos:start="2544:34" pos:end="2544:38"><name pos:start="2544:34" pos:end="2544:38">entry</name></expr></argument>, <argument pos:start="2544:41" pos:end="2544:47"><expr pos:start="2544:41" pos:end="2544:47"><name pos:start="2544:41" pos:end="2544:47">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2549:3" pos:end="2559:5">/**
   * Copies an existing ZIP file and replaces the given entries in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          new ZIP entries to be replaced with.
   * @param destZip
   *          new ZIP file created.
   * @return &lt;code&gt;true&lt;/code&gt; if at least one entry was replaced.
   */</comment>
  <function pos:start="2560:3" pos:end="2596:3"><type pos:start="2560:3" pos:end="2560:23"><specifier pos:start="2560:3" pos:end="2560:8">public</specifier> <specifier pos:start="2560:10" pos:end="2560:15">static</specifier> <name pos:start="2560:17" pos:end="2560:23">boolean</name></type> <name pos:start="2560:25" pos:end="2560:38">replaceEntries</name><parameter_list pos:start="2560:39" pos:end="2560:88">(<parameter pos:start="2560:40" pos:end="2560:47"><decl pos:start="2560:40" pos:end="2560:47"><type pos:start="2560:40" pos:end="2560:47"><name pos:start="2560:40" pos:end="2560:43">File</name></type> <name pos:start="2560:45" pos:end="2560:47">zip</name></decl></parameter>, <parameter pos:start="2560:50" pos:end="2560:73"><decl pos:start="2560:50" pos:end="2560:73"><type pos:start="2560:50" pos:end="2560:73"><name pos:start="2560:50" pos:end="2560:65"><name pos:start="2560:50" pos:end="2560:63">ZipEntrySource</name><index pos:start="2560:64" pos:end="2560:65">[]</index></name></type> <name pos:start="2560:67" pos:end="2560:73">entries</name></decl></parameter>, <parameter pos:start="2560:76" pos:end="2560:87"><decl pos:start="2560:76" pos:end="2560:87"><type pos:start="2560:76" pos:end="2560:87"><name pos:start="2560:76" pos:end="2560:79">File</name></type> <name pos:start="2560:81" pos:end="2560:87">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2560:90" pos:end="2596:3">{<block_content pos:start="2561:5" pos:end="2595:43">
    <if_stmt pos:start="2561:5" pos:end="2563:5"><if pos:start="2561:5" pos:end="2563:5">if <condition pos:start="2561:8" pos:end="2561:29">(<expr pos:start="2561:9" pos:end="2561:28"><call pos:start="2561:9" pos:end="2561:28"><name pos:start="2561:9" pos:end="2561:26"><name pos:start="2561:9" pos:end="2561:11">log</name><operator pos:start="2561:12" pos:end="2561:12">.</operator><name pos:start="2561:13" pos:end="2561:26">isDebugEnabled</name></name><argument_list pos:start="2561:27" pos:end="2561:28">()</argument_list></call></expr>)</condition> <block pos:start="2561:31" pos:end="2563:5">{<block_content pos:start="2562:7" pos:end="2562:116">
      <expr_stmt pos:start="2562:7" pos:end="2562:116"><expr pos:start="2562:7" pos:end="2562:115"><call pos:start="2562:7" pos:end="2562:115"><name pos:start="2562:7" pos:end="2562:15"><name pos:start="2562:7" pos:end="2562:9">log</name><operator pos:start="2562:10" pos:end="2562:10">.</operator><name pos:start="2562:11" pos:end="2562:15">debug</name></name><argument_list pos:start="2562:16" pos:end="2562:115">(<argument pos:start="2562:17" pos:end="2562:114"><expr pos:start="2562:17" pos:end="2562:114"><literal type="string" pos:start="2562:17" pos:end="2562:27">"Copying '"</literal> <operator pos:start="2562:29" pos:end="2562:29">+</operator> <name pos:start="2562:31" pos:end="2562:33">zip</name> <operator pos:start="2562:35" pos:end="2562:35">+</operator> <literal type="string" pos:start="2562:37" pos:end="2562:44">"' to '"</literal> <operator pos:start="2562:46" pos:end="2562:46">+</operator> <name pos:start="2562:48" pos:end="2562:54">destZip</name> <operator pos:start="2562:56" pos:end="2562:56">+</operator> <literal type="string" pos:start="2562:58" pos:end="2562:83">"' and replacing entries "</literal> <operator pos:start="2562:85" pos:end="2562:85">+</operator> <call pos:start="2562:87" pos:end="2562:108"><name pos:start="2562:87" pos:end="2562:99"><name pos:start="2562:87" pos:end="2562:92">Arrays</name><operator pos:start="2562:93" pos:end="2562:93">.</operator><name pos:start="2562:94" pos:end="2562:99">asList</name></name><argument_list pos:start="2562:100" pos:end="2562:108">(<argument pos:start="2562:101" pos:end="2562:107"><expr pos:start="2562:101" pos:end="2562:107"><name pos:start="2562:101" pos:end="2562:107">entries</name></expr></argument>)</argument_list></call> <operator pos:start="2562:110" pos:end="2562:110">+</operator> <literal type="string" pos:start="2562:112" pos:end="2562:114">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2565:5" pos:end="2565:75"><decl pos:start="2565:5" pos:end="2565:74"><type pos:start="2565:5" pos:end="2565:37"><specifier pos:start="2565:5" pos:end="2565:9">final</specifier> <name pos:start="2565:11" pos:end="2565:37"><name pos:start="2565:11" pos:end="2565:13">Map</name><argument_list type="generic" pos:start="2565:14" pos:end="2565:37">&lt;<argument pos:start="2565:15" pos:end="2565:20"><name pos:start="2565:15" pos:end="2565:20">String</name></argument>, <argument pos:start="2565:23" pos:end="2565:36"><name pos:start="2565:23" pos:end="2565:36">ZipEntrySource</name></argument>&gt;</argument_list></name></type> <name pos:start="2565:39" pos:end="2565:49">entryByPath</name> <init pos:start="2565:51" pos:end="2565:74">= <expr pos:start="2565:53" pos:end="2565:74"><call pos:start="2565:53" pos:end="2565:74"><name pos:start="2565:53" pos:end="2565:65">entriesByPath</name><argument_list pos:start="2565:66" pos:end="2565:74">(<argument pos:start="2565:67" pos:end="2565:73"><expr pos:start="2565:67" pos:end="2565:73"><name pos:start="2565:67" pos:end="2565:73">entries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2566:5" pos:end="2566:46"><decl pos:start="2566:5" pos:end="2566:45"><type pos:start="2566:5" pos:end="2566:13"><specifier pos:start="2566:5" pos:end="2566:9">final</specifier> <name pos:start="2566:11" pos:end="2566:13">int</name></type> <name pos:start="2566:15" pos:end="2566:24">entryCount</name> <init pos:start="2566:26" pos:end="2566:45">= <expr pos:start="2566:28" pos:end="2566:45"><call pos:start="2566:28" pos:end="2566:45"><name pos:start="2566:28" pos:end="2566:43"><name pos:start="2566:28" pos:end="2566:38">entryByPath</name><operator pos:start="2566:39" pos:end="2566:39">.</operator><name pos:start="2566:40" pos:end="2566:43">size</name></name><argument_list pos:start="2566:44" pos:end="2566:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try pos:start="2567:5" pos:end="2594:5">try <block pos:start="2567:9" pos:end="2591:5">{<block_content pos:start="2568:7" pos:end="2590:7">
      <decl_stmt pos:start="2568:7" pos:end="2568:111"><decl pos:start="2568:7" pos:end="2568:110"><type pos:start="2568:7" pos:end="2568:27"><specifier pos:start="2568:7" pos:end="2568:11">final</specifier> <name pos:start="2568:13" pos:end="2568:27">ZipOutputStream</name></type> <name pos:start="2568:29" pos:end="2568:31">out</name> <init pos:start="2568:33" pos:end="2568:110">= <expr pos:start="2568:35" pos:end="2568:110"><operator pos:start="2568:35" pos:end="2568:37">new</operator> <call pos:start="2568:39" pos:end="2568:110"><name pos:start="2568:39" pos:end="2568:53">ZipOutputStream</name><argument_list pos:start="2568:54" pos:end="2568:110">(<argument pos:start="2568:55" pos:end="2568:109"><expr pos:start="2568:55" pos:end="2568:109"><operator pos:start="2568:55" pos:end="2568:57">new</operator> <call pos:start="2568:59" pos:end="2568:109"><name pos:start="2568:59" pos:end="2568:78">BufferedOutputStream</name><argument_list pos:start="2568:79" pos:end="2568:109">(<argument pos:start="2568:80" pos:end="2568:108"><expr pos:start="2568:80" pos:end="2568:108"><operator pos:start="2568:80" pos:end="2568:82">new</operator> <call pos:start="2568:84" pos:end="2568:108"><name pos:start="2568:84" pos:end="2568:99">FileOutputStream</name><argument_list pos:start="2568:100" pos:end="2568:108">(<argument pos:start="2568:101" pos:end="2568:107"><expr pos:start="2568:101" pos:end="2568:107"><name pos:start="2568:101" pos:end="2568:107">destZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <try pos:start="2569:7" pos:end="2590:7">try <block pos:start="2569:11" pos:end="2587:7">{<block_content pos:start="2570:9" pos:end="2586:11">
        <decl_stmt pos:start="2570:9" pos:end="2570:56"><decl pos:start="2570:9" pos:end="2570:55"><type pos:start="2570:9" pos:end="2570:25"><specifier pos:start="2570:9" pos:end="2570:13">final</specifier> <name pos:start="2570:15" pos:end="2570:25"><name pos:start="2570:15" pos:end="2570:17">Set</name><argument_list type="generic" pos:start="2570:18" pos:end="2570:25">&lt;<argument pos:start="2570:19" pos:end="2570:24"><name pos:start="2570:19" pos:end="2570:24">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2570:27" pos:end="2570:31">names</name> <init pos:start="2570:33" pos:end="2570:55">= <expr pos:start="2570:35" pos:end="2570:55"><operator pos:start="2570:35" pos:end="2570:37">new</operator> <call pos:start="2570:39" pos:end="2570:55"><name pos:start="2570:39" pos:end="2570:53"><name pos:start="2570:39" pos:end="2570:45">HashSet</name><argument_list type="generic" pos:start="2570:46" pos:end="2570:53">&lt;<argument pos:start="2570:47" pos:end="2570:52"><name pos:start="2570:47" pos:end="2570:52">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2570:54" pos:end="2570:55">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2571:9" pos:end="2586:11"><expr pos:start="2571:9" pos:end="2586:10"><call pos:start="2571:9" pos:end="2586:10"><name pos:start="2571:9" pos:end="2571:15">iterate</name><argument_list pos:start="2571:16" pos:end="2586:10">(<argument pos:start="2571:17" pos:end="2571:19"><expr pos:start="2571:17" pos:end="2571:19"><name pos:start="2571:17" pos:end="2571:19">zip</name></expr></argument>, <argument pos:start="2571:22" pos:end="2586:9"><expr pos:start="2571:22" pos:end="2586:9"><operator pos:start="2571:22" pos:end="2571:24">new</operator> <class pos:start="2571:26" pos:end="2586:9"><super pos:start="2571:26" pos:end="2571:41"><name pos:start="2571:26" pos:end="2571:41">ZipEntryCallback</name></super><argument_list pos:start="2571:42" pos:end="2571:43">()</argument_list> <block pos:start="2571:45" pos:end="2586:9">{
          <function pos:start="2572:11" pos:end="2585:11"><type pos:start="2572:11" pos:end="2572:21"><specifier pos:start="2572:11" pos:end="2572:16">public</specifier> <name pos:start="2572:18" pos:end="2572:21">void</name></type> <name pos:start="2572:23" pos:end="2572:29">process</name><parameter_list pos:start="2572:30" pos:end="2572:64">(<parameter pos:start="2572:31" pos:end="2572:44"><decl pos:start="2572:31" pos:end="2572:44"><type pos:start="2572:31" pos:end="2572:44"><name pos:start="2572:31" pos:end="2572:41">InputStream</name></type> <name pos:start="2572:43" pos:end="2572:44">in</name></decl></parameter>, <parameter pos:start="2572:47" pos:end="2572:63"><decl pos:start="2572:47" pos:end="2572:63"><type pos:start="2572:47" pos:end="2572:63"><name pos:start="2572:47" pos:end="2572:54">ZipEntry</name></type> <name pos:start="2572:56" pos:end="2572:63">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="2572:66" pos:end="2572:83">throws <argument pos:start="2572:73" pos:end="2572:83"><expr pos:start="2572:73" pos:end="2572:83"><name pos:start="2572:73" pos:end="2572:83">IOException</name></expr></argument></throws> <block pos:start="2572:85" pos:end="2585:11">{<block_content pos:start="2573:13" pos:end="2584:13">
            <if_stmt pos:start="2573:13" pos:end="2584:13"><if pos:start="2573:13" pos:end="2581:13">if <condition pos:start="2573:16" pos:end="2573:46">(<expr pos:start="2573:17" pos:end="2573:45"><call pos:start="2573:17" pos:end="2573:45"><name pos:start="2573:17" pos:end="2573:25"><name pos:start="2573:17" pos:end="2573:21">names</name><operator pos:start="2573:22" pos:end="2573:22">.</operator><name pos:start="2573:23" pos:end="2573:25">add</name></name><argument_list pos:start="2573:26" pos:end="2573:45">(<argument pos:start="2573:27" pos:end="2573:44"><expr pos:start="2573:27" pos:end="2573:44"><call pos:start="2573:27" pos:end="2573:44"><name pos:start="2573:27" pos:end="2573:42"><name pos:start="2573:27" pos:end="2573:34">zipEntry</name><operator pos:start="2573:35" pos:end="2573:35">.</operator><name pos:start="2573:36" pos:end="2573:42">getName</name></name><argument_list pos:start="2573:43" pos:end="2573:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2573:48" pos:end="2581:13">{<block_content pos:start="2574:15" pos:end="2580:15">
              <decl_stmt pos:start="2574:15" pos:end="2574:93"><decl pos:start="2574:15" pos:end="2574:92"><type pos:start="2574:15" pos:end="2574:28"><name pos:start="2574:15" pos:end="2574:28">ZipEntrySource</name></type> <name pos:start="2574:30" pos:end="2574:34">entry</name> <init pos:start="2574:36" pos:end="2574:92">= <expr pos:start="2574:38" pos:end="2574:92"><operator pos:start="2574:38" pos:end="2574:38">(</operator><name pos:start="2574:39" pos:end="2574:52">ZipEntrySource</name><operator pos:start="2574:53" pos:end="2574:53">)</operator> <call pos:start="2574:55" pos:end="2574:92"><name pos:start="2574:55" pos:end="2574:72"><name pos:start="2574:55" pos:end="2574:65">entryByPath</name><operator pos:start="2574:66" pos:end="2574:66">.</operator><name pos:start="2574:67" pos:end="2574:72">remove</name></name><argument_list pos:start="2574:73" pos:end="2574:92">(<argument pos:start="2574:74" pos:end="2574:91"><expr pos:start="2574:74" pos:end="2574:91"><call pos:start="2574:74" pos:end="2574:91"><name pos:start="2574:74" pos:end="2574:89"><name pos:start="2574:74" pos:end="2574:81">zipEntry</name><operator pos:start="2574:82" pos:end="2574:82">.</operator><name pos:start="2574:83" pos:end="2574:89">getName</name></name><argument_list pos:start="2574:90" pos:end="2574:91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt pos:start="2575:15" pos:end="2580:15"><if pos:start="2575:15" pos:end="2577:15">if <condition pos:start="2575:18" pos:end="2575:32">(<expr pos:start="2575:19" pos:end="2575:31"><name pos:start="2575:19" pos:end="2575:23">entry</name> <operator pos:start="2575:25" pos:end="2575:26">!=</operator> <literal type="null" pos:start="2575:28" pos:end="2575:31">null</literal></expr>)</condition> <block pos:start="2575:34" pos:end="2577:15">{<block_content pos:start="2576:17" pos:end="2576:37">
                <expr_stmt pos:start="2576:17" pos:end="2576:37"><expr pos:start="2576:17" pos:end="2576:36"><call pos:start="2576:17" pos:end="2576:36"><name pos:start="2576:17" pos:end="2576:24">addEntry</name><argument_list pos:start="2576:25" pos:end="2576:36">(<argument pos:start="2576:26" pos:end="2576:30"><expr pos:start="2576:26" pos:end="2576:30"><name pos:start="2576:26" pos:end="2576:30">entry</name></expr></argument>, <argument pos:start="2576:33" pos:end="2576:35"><expr pos:start="2576:33" pos:end="2576:35"><name pos:start="2576:33" pos:end="2576:35">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if>
              <else pos:start="2578:15" pos:end="2580:15">else <block pos:start="2578:20" pos:end="2580:15">{<block_content pos:start="2579:17" pos:end="2579:58">
                <expr_stmt pos:start="2579:17" pos:end="2579:58"><expr pos:start="2579:17" pos:end="2579:57"><call pos:start="2579:17" pos:end="2579:57"><name pos:start="2579:17" pos:end="2579:38"><name pos:start="2579:17" pos:end="2579:28">ZipEntryUtil</name><operator pos:start="2579:29" pos:end="2579:29">.</operator><name pos:start="2579:30" pos:end="2579:38">copyEntry</name></name><argument_list pos:start="2579:39" pos:end="2579:57">(<argument pos:start="2579:40" pos:end="2579:47"><expr pos:start="2579:40" pos:end="2579:47"><name pos:start="2579:40" pos:end="2579:47">zipEntry</name></expr></argument>, <argument pos:start="2579:50" pos:end="2579:51"><expr pos:start="2579:50" pos:end="2579:51"><name pos:start="2579:50" pos:end="2579:51">in</name></expr></argument>, <argument pos:start="2579:54" pos:end="2579:56"><expr pos:start="2579:54" pos:end="2579:56"><name pos:start="2579:54" pos:end="2579:56">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif" pos:start="2582:13" pos:end="2584:13">else if <condition pos:start="2582:21" pos:end="2582:42">(<expr pos:start="2582:22" pos:end="2582:41"><call pos:start="2582:22" pos:end="2582:41"><name pos:start="2582:22" pos:end="2582:39"><name pos:start="2582:22" pos:end="2582:24">log</name><operator pos:start="2582:25" pos:end="2582:25">.</operator><name pos:start="2582:26" pos:end="2582:39">isDebugEnabled</name></name><argument_list pos:start="2582:40" pos:end="2582:41">()</argument_list></call></expr>)</condition> <block pos:start="2582:44" pos:end="2584:13">{<block_content pos:start="2583:15" pos:end="2583:67">
              <expr_stmt pos:start="2583:15" pos:end="2583:67"><expr pos:start="2583:15" pos:end="2583:66"><call pos:start="2583:15" pos:end="2583:66"><name pos:start="2583:15" pos:end="2583:23"><name pos:start="2583:15" pos:end="2583:17">log</name><operator pos:start="2583:18" pos:end="2583:18">.</operator><name pos:start="2583:19" pos:end="2583:23">debug</name></name><argument_list pos:start="2583:24" pos:end="2583:66">(<argument pos:start="2583:25" pos:end="2583:45"><expr pos:start="2583:25" pos:end="2583:45"><literal type="string" pos:start="2583:25" pos:end="2583:45">"Duplicate entry: {}"</literal></expr></argument>, <argument pos:start="2583:48" pos:end="2583:65"><expr pos:start="2583:48" pos:end="2583:65"><call pos:start="2583:48" pos:end="2583:65"><name pos:start="2583:48" pos:end="2583:63"><name pos:start="2583:48" pos:end="2583:55">zipEntry</name><operator pos:start="2583:56" pos:end="2583:56">.</operator><name pos:start="2583:57" pos:end="2583:63">getName</name></name><argument_list pos:start="2583:64" pos:end="2583:65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <finally pos:start="2588:7" pos:end="2590:7">finally <block pos:start="2588:15" pos:end="2590:7">{<block_content pos:start="2589:9" pos:end="2589:34">
        <expr_stmt pos:start="2589:9" pos:end="2589:34"><expr pos:start="2589:9" pos:end="2589:33"><call pos:start="2589:9" pos:end="2589:33"><name pos:start="2589:9" pos:end="2589:28"><name pos:start="2589:9" pos:end="2589:15">IOUtils</name><operator pos:start="2589:16" pos:end="2589:16">.</operator><name pos:start="2589:17" pos:end="2589:28">closeQuietly</name></name><argument_list pos:start="2589:29" pos:end="2589:33">(<argument pos:start="2589:30" pos:end="2589:32"><expr pos:start="2589:30" pos:end="2589:32"><name pos:start="2589:30" pos:end="2589:32">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block>
    <catch pos:start="2592:5" pos:end="2594:5">catch <parameter_list pos:start="2592:11" pos:end="2592:25">(<parameter pos:start="2592:12" pos:end="2592:24"><decl pos:start="2592:12" pos:end="2592:24"><type pos:start="2592:12" pos:end="2592:24"><name pos:start="2592:12" pos:end="2592:22">IOException</name></type> <name pos:start="2592:24" pos:end="2592:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2592:27" pos:end="2594:5">{<block_content pos:start="2593:7" pos:end="2593:34">
      <expr_stmt pos:start="2593:7" pos:end="2593:34"><expr pos:start="2593:7" pos:end="2593:33"><call pos:start="2593:7" pos:end="2593:33"><name pos:start="2593:7" pos:end="2593:30"><name pos:start="2593:7" pos:end="2593:22">ZipExceptionUtil</name><operator pos:start="2593:23" pos:end="2593:23">.</operator><name pos:start="2593:24" pos:end="2593:30">rethrow</name></name><argument_list pos:start="2593:31" pos:end="2593:33">(<argument pos:start="2593:32" pos:end="2593:32"><expr pos:start="2593:32" pos:end="2593:32"><name pos:start="2593:32" pos:end="2593:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <return pos:start="2595:5" pos:end="2595:43">return <expr pos:start="2595:12" pos:end="2595:42"><call pos:start="2595:12" pos:end="2595:29"><name pos:start="2595:12" pos:end="2595:27"><name pos:start="2595:12" pos:end="2595:22">entryByPath</name><operator pos:start="2595:23" pos:end="2595:23">.</operator><name pos:start="2595:24" pos:end="2595:27">size</name></name><argument_list pos:start="2595:28" pos:end="2595:29">()</argument_list></call> <operator pos:start="2595:31" pos:end="2595:31">&lt;</operator> <name pos:start="2595:33" pos:end="2595:42">entryCount</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2598:3" pos:end="2606:5">/**
   * Changes an existing ZIP file: replaces a given entry in it.
   *
   * @param zip
   *          an existing ZIP file.
   * @param entries
   *          new ZIP entries to be replaced with.
   * @return &lt;code&gt;true&lt;/code&gt; if at least one entry was replaced.
   */</comment>
  <function pos:start="2607:3" pos:end="2613:3"><type pos:start="2607:3" pos:end="2607:23"><specifier pos:start="2607:3" pos:end="2607:8">public</specifier> <specifier pos:start="2607:10" pos:end="2607:15">static</specifier> <name pos:start="2607:17" pos:end="2607:23">boolean</name></type> <name pos:start="2607:25" pos:end="2607:38">replaceEntries</name><parameter_list pos:start="2607:39" pos:end="2607:86">(<parameter pos:start="2607:40" pos:end="2607:53"><decl pos:start="2607:40" pos:end="2607:53"><type pos:start="2607:40" pos:end="2607:53"><specifier pos:start="2607:40" pos:end="2607:44">final</specifier> <name pos:start="2607:46" pos:end="2607:49">File</name></type> <name pos:start="2607:51" pos:end="2607:53">zip</name></decl></parameter>, <parameter pos:start="2607:56" pos:end="2607:85"><decl pos:start="2607:56" pos:end="2607:85"><type pos:start="2607:56" pos:end="2607:85"><specifier pos:start="2607:56" pos:end="2607:60">final</specifier> <name pos:start="2607:62" pos:end="2607:77"><name pos:start="2607:62" pos:end="2607:75">ZipEntrySource</name><index pos:start="2607:76" pos:end="2607:77">[]</index></name></type> <name pos:start="2607:79" pos:end="2607:85">entries</name></decl></parameter>)</parameter_list> <block pos:start="2607:88" pos:end="2613:3">{<block_content pos:start="2608:5" pos:end="2612:7">
    <return pos:start="2608:5" pos:end="2612:7">return <expr pos:start="2608:12" pos:end="2612:6"><call pos:start="2608:12" pos:end="2612:6"><name pos:start="2608:12" pos:end="2608:25">operateInPlace</name><argument_list pos:start="2608:26" pos:end="2612:6">(<argument pos:start="2608:27" pos:end="2608:29"><expr pos:start="2608:27" pos:end="2608:29"><name pos:start="2608:27" pos:end="2608:29">zip</name></expr></argument>, <argument pos:start="2608:32" pos:end="2612:5"><expr pos:start="2608:32" pos:end="2612:5"><operator pos:start="2608:32" pos:end="2608:34">new</operator> <class pos:start="2608:36" pos:end="2612:5"><super pos:start="2608:36" pos:end="2608:48"><name pos:start="2608:36" pos:end="2608:48">InPlaceAction</name></super><argument_list pos:start="2608:49" pos:end="2608:50">()</argument_list> <block pos:start="2608:52" pos:end="2612:5">{
      <function pos:start="2609:7" pos:end="2611:7"><type pos:start="2609:7" pos:end="2609:20"><specifier pos:start="2609:7" pos:end="2609:12">public</specifier> <name pos:start="2609:14" pos:end="2609:20">boolean</name></type> <name pos:start="2609:22" pos:end="2609:24">act</name><parameter_list pos:start="2609:25" pos:end="2609:38">(<parameter pos:start="2609:26" pos:end="2609:37"><decl pos:start="2609:26" pos:end="2609:37"><type pos:start="2609:26" pos:end="2609:29"><name pos:start="2609:26" pos:end="2609:29">File</name></type> <name pos:start="2609:31" pos:end="2609:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2609:40" pos:end="2611:7">{<block_content pos:start="2610:9" pos:end="2610:53">
        <return pos:start="2610:9" pos:end="2610:53">return <expr pos:start="2610:16" pos:end="2610:52"><call pos:start="2610:16" pos:end="2610:52"><name pos:start="2610:16" pos:end="2610:29">replaceEntries</name><argument_list pos:start="2610:30" pos:end="2610:52">(<argument pos:start="2610:31" pos:end="2610:33"><expr pos:start="2610:31" pos:end="2610:33"><name pos:start="2610:31" pos:end="2610:33">zip</name></expr></argument>, <argument pos:start="2610:36" pos:end="2610:42"><expr pos:start="2610:36" pos:end="2610:42"><name pos:start="2610:36" pos:end="2610:42">entries</name></expr></argument>, <argument pos:start="2610:45" pos:end="2610:51"><expr pos:start="2610:45" pos:end="2610:51"><name pos:start="2610:45" pos:end="2610:51">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2615:3" pos:end="2624:5">/**
   * Copies an existing ZIP file and adds/replaces the given entries in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          ZIP entries to be replaced or added.
   * @param destZip
   *          new ZIP file created.
   */</comment>
  <function pos:start="2625:3" pos:end="2666:3"><type pos:start="2625:3" pos:end="2625:20"><specifier pos:start="2625:3" pos:end="2625:8">public</specifier> <specifier pos:start="2625:10" pos:end="2625:15">static</specifier> <name pos:start="2625:17" pos:end="2625:20">void</name></type> <name pos:start="2625:22" pos:end="2625:40">addOrReplaceEntries</name><parameter_list pos:start="2625:41" pos:end="2625:90">(<parameter pos:start="2625:42" pos:end="2625:49"><decl pos:start="2625:42" pos:end="2625:49"><type pos:start="2625:42" pos:end="2625:49"><name pos:start="2625:42" pos:end="2625:45">File</name></type> <name pos:start="2625:47" pos:end="2625:49">zip</name></decl></parameter>, <parameter pos:start="2625:52" pos:end="2625:75"><decl pos:start="2625:52" pos:end="2625:75"><type pos:start="2625:52" pos:end="2625:75"><name pos:start="2625:52" pos:end="2625:67"><name pos:start="2625:52" pos:end="2625:65">ZipEntrySource</name><index pos:start="2625:66" pos:end="2625:67">[]</index></name></type> <name pos:start="2625:69" pos:end="2625:75">entries</name></decl></parameter>, <parameter pos:start="2625:78" pos:end="2625:89"><decl pos:start="2625:78" pos:end="2625:89"><type pos:start="2625:78" pos:end="2625:89"><name pos:start="2625:78" pos:end="2625:81">File</name></type> <name pos:start="2625:83" pos:end="2625:89">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2625:92" pos:end="2666:3">{<block_content pos:start="2626:5" pos:end="2665:5">
    <if_stmt pos:start="2626:5" pos:end="2629:5"><if pos:start="2626:5" pos:end="2629:5">if <condition pos:start="2626:8" pos:end="2626:29">(<expr pos:start="2626:9" pos:end="2626:28"><call pos:start="2626:9" pos:end="2626:28"><name pos:start="2626:9" pos:end="2626:26"><name pos:start="2626:9" pos:end="2626:11">log</name><operator pos:start="2626:12" pos:end="2626:12">.</operator><name pos:start="2626:13" pos:end="2626:26">isDebugEnabled</name></name><argument_list pos:start="2626:27" pos:end="2626:28">()</argument_list></call></expr>)</condition> <block pos:start="2626:31" pos:end="2629:5">{<block_content pos:start="2627:7" pos:end="2628:17">
      <expr_stmt pos:start="2627:7" pos:end="2628:17"><expr pos:start="2627:7" pos:end="2628:16"><call pos:start="2627:7" pos:end="2628:16"><name pos:start="2627:7" pos:end="2627:15"><name pos:start="2627:7" pos:end="2627:9">log</name><operator pos:start="2627:10" pos:end="2627:10">.</operator><name pos:start="2627:11" pos:end="2627:15">debug</name></name><argument_list pos:start="2627:16" pos:end="2628:16">(<argument pos:start="2627:17" pos:end="2628:15"><expr pos:start="2627:17" pos:end="2628:15"><literal type="string" pos:start="2627:17" pos:end="2627:27">"Copying '"</literal> <operator pos:start="2627:29" pos:end="2627:29">+</operator> <name pos:start="2627:31" pos:end="2627:33">zip</name> <operator pos:start="2627:35" pos:end="2627:35">+</operator> <literal type="string" pos:start="2627:37" pos:end="2627:44">"' to '"</literal> <operator pos:start="2627:46" pos:end="2627:46">+</operator> <name pos:start="2627:48" pos:end="2627:54">destZip</name> <operator pos:start="2627:56" pos:end="2627:56">+</operator> <literal type="string" pos:start="2627:58" pos:end="2627:90">"' and adding/replacing entries "</literal> <operator pos:start="2627:92" pos:end="2627:92">+</operator> <call pos:start="2627:94" pos:end="2627:115"><name pos:start="2627:94" pos:end="2627:106"><name pos:start="2627:94" pos:end="2627:99">Arrays</name><operator pos:start="2627:100" pos:end="2627:100">.</operator><name pos:start="2627:101" pos:end="2627:106">asList</name></name><argument_list pos:start="2627:107" pos:end="2627:115">(<argument pos:start="2627:108" pos:end="2627:114"><expr pos:start="2627:108" pos:end="2627:114"><name pos:start="2627:108" pos:end="2627:114">entries</name></expr></argument>)</argument_list></call>
          <operator pos:start="2628:11" pos:end="2628:11">+</operator> <literal type="string" pos:start="2628:13" pos:end="2628:15">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="2631:5" pos:end="2631:75"><decl pos:start="2631:5" pos:end="2631:74"><type pos:start="2631:5" pos:end="2631:37"><specifier pos:start="2631:5" pos:end="2631:9">final</specifier> <name pos:start="2631:11" pos:end="2631:37"><name pos:start="2631:11" pos:end="2631:13">Map</name><argument_list type="generic" pos:start="2631:14" pos:end="2631:37">&lt;<argument pos:start="2631:15" pos:end="2631:20"><name pos:start="2631:15" pos:end="2631:20">String</name></argument>, <argument pos:start="2631:23" pos:end="2631:36"><name pos:start="2631:23" pos:end="2631:36">ZipEntrySource</name></argument>&gt;</argument_list></name></type> <name pos:start="2631:39" pos:end="2631:49">entryByPath</name> <init pos:start="2631:51" pos:end="2631:74">= <expr pos:start="2631:53" pos:end="2631:74"><call pos:start="2631:53" pos:end="2631:74"><name pos:start="2631:53" pos:end="2631:65">entriesByPath</name><argument_list pos:start="2631:66" pos:end="2631:74">(<argument pos:start="2631:67" pos:end="2631:73"><expr pos:start="2631:67" pos:end="2631:73"><name pos:start="2631:67" pos:end="2631:73">entries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try pos:start="2632:5" pos:end="2665:5">try <block pos:start="2632:9" pos:end="2662:5">{<block_content pos:start="2633:7" pos:end="2661:7">
      <decl_stmt pos:start="2633:7" pos:end="2633:111"><decl pos:start="2633:7" pos:end="2633:110"><type pos:start="2633:7" pos:end="2633:27"><specifier pos:start="2633:7" pos:end="2633:11">final</specifier> <name pos:start="2633:13" pos:end="2633:27">ZipOutputStream</name></type> <name pos:start="2633:29" pos:end="2633:31">out</name> <init pos:start="2633:33" pos:end="2633:110">= <expr pos:start="2633:35" pos:end="2633:110"><operator pos:start="2633:35" pos:end="2633:37">new</operator> <call pos:start="2633:39" pos:end="2633:110"><name pos:start="2633:39" pos:end="2633:53">ZipOutputStream</name><argument_list pos:start="2633:54" pos:end="2633:110">(<argument pos:start="2633:55" pos:end="2633:109"><expr pos:start="2633:55" pos:end="2633:109"><operator pos:start="2633:55" pos:end="2633:57">new</operator> <call pos:start="2633:59" pos:end="2633:109"><name pos:start="2633:59" pos:end="2633:78">BufferedOutputStream</name><argument_list pos:start="2633:79" pos:end="2633:109">(<argument pos:start="2633:80" pos:end="2633:108"><expr pos:start="2633:80" pos:end="2633:108"><operator pos:start="2633:80" pos:end="2633:82">new</operator> <call pos:start="2633:84" pos:end="2633:108"><name pos:start="2633:84" pos:end="2633:99">FileOutputStream</name><argument_list pos:start="2633:100" pos:end="2633:108">(<argument pos:start="2633:101" pos:end="2633:107"><expr pos:start="2633:101" pos:end="2633:107"><name pos:start="2633:101" pos:end="2633:107">destZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <try pos:start="2634:7" pos:end="2661:7">try <block pos:start="2634:11" pos:end="2658:7">{<block_content pos:start="2636:9" pos:end="2657:9">
        <comment type="line" pos:start="2635:9" pos:end="2635:35">// Copy and replace entries</comment>
        <decl_stmt pos:start="2636:9" pos:end="2636:56"><decl pos:start="2636:9" pos:end="2636:55"><type pos:start="2636:9" pos:end="2636:25"><specifier pos:start="2636:9" pos:end="2636:13">final</specifier> <name pos:start="2636:15" pos:end="2636:25"><name pos:start="2636:15" pos:end="2636:17">Set</name><argument_list type="generic" pos:start="2636:18" pos:end="2636:25">&lt;<argument pos:start="2636:19" pos:end="2636:24"><name pos:start="2636:19" pos:end="2636:24">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2636:27" pos:end="2636:31">names</name> <init pos:start="2636:33" pos:end="2636:55">= <expr pos:start="2636:35" pos:end="2636:55"><operator pos:start="2636:35" pos:end="2636:37">new</operator> <call pos:start="2636:39" pos:end="2636:55"><name pos:start="2636:39" pos:end="2636:53"><name pos:start="2636:39" pos:end="2636:45">HashSet</name><argument_list type="generic" pos:start="2636:46" pos:end="2636:53">&lt;<argument pos:start="2636:47" pos:end="2636:52"><name pos:start="2636:47" pos:end="2636:52">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2636:54" pos:end="2636:55">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2637:9" pos:end="2652:11"><expr pos:start="2637:9" pos:end="2652:10"><call pos:start="2637:9" pos:end="2652:10"><name pos:start="2637:9" pos:end="2637:15">iterate</name><argument_list pos:start="2637:16" pos:end="2652:10">(<argument pos:start="2637:17" pos:end="2637:19"><expr pos:start="2637:17" pos:end="2637:19"><name pos:start="2637:17" pos:end="2637:19">zip</name></expr></argument>, <argument pos:start="2637:22" pos:end="2652:9"><expr pos:start="2637:22" pos:end="2652:9"><operator pos:start="2637:22" pos:end="2637:24">new</operator> <class pos:start="2637:26" pos:end="2652:9"><super pos:start="2637:26" pos:end="2637:41"><name pos:start="2637:26" pos:end="2637:41">ZipEntryCallback</name></super><argument_list pos:start="2637:42" pos:end="2637:43">()</argument_list> <block pos:start="2637:45" pos:end="2652:9">{
          <function pos:start="2638:11" pos:end="2651:11"><type pos:start="2638:11" pos:end="2638:21"><specifier pos:start="2638:11" pos:end="2638:16">public</specifier> <name pos:start="2638:18" pos:end="2638:21">void</name></type> <name pos:start="2638:23" pos:end="2638:29">process</name><parameter_list pos:start="2638:30" pos:end="2638:64">(<parameter pos:start="2638:31" pos:end="2638:44"><decl pos:start="2638:31" pos:end="2638:44"><type pos:start="2638:31" pos:end="2638:44"><name pos:start="2638:31" pos:end="2638:41">InputStream</name></type> <name pos:start="2638:43" pos:end="2638:44">in</name></decl></parameter>, <parameter pos:start="2638:47" pos:end="2638:63"><decl pos:start="2638:47" pos:end="2638:63"><type pos:start="2638:47" pos:end="2638:63"><name pos:start="2638:47" pos:end="2638:54">ZipEntry</name></type> <name pos:start="2638:56" pos:end="2638:63">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="2638:66" pos:end="2638:83">throws <argument pos:start="2638:73" pos:end="2638:83"><expr pos:start="2638:73" pos:end="2638:83"><name pos:start="2638:73" pos:end="2638:83">IOException</name></expr></argument></throws> <block pos:start="2638:85" pos:end="2651:11">{<block_content pos:start="2639:13" pos:end="2650:13">
            <if_stmt pos:start="2639:13" pos:end="2650:13"><if pos:start="2639:13" pos:end="2647:13">if <condition pos:start="2639:16" pos:end="2639:46">(<expr pos:start="2639:17" pos:end="2639:45"><call pos:start="2639:17" pos:end="2639:45"><name pos:start="2639:17" pos:end="2639:25"><name pos:start="2639:17" pos:end="2639:21">names</name><operator pos:start="2639:22" pos:end="2639:22">.</operator><name pos:start="2639:23" pos:end="2639:25">add</name></name><argument_list pos:start="2639:26" pos:end="2639:45">(<argument pos:start="2639:27" pos:end="2639:44"><expr pos:start="2639:27" pos:end="2639:44"><call pos:start="2639:27" pos:end="2639:44"><name pos:start="2639:27" pos:end="2639:42"><name pos:start="2639:27" pos:end="2639:34">zipEntry</name><operator pos:start="2639:35" pos:end="2639:35">.</operator><name pos:start="2639:36" pos:end="2639:42">getName</name></name><argument_list pos:start="2639:43" pos:end="2639:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2639:48" pos:end="2647:13">{<block_content pos:start="2640:15" pos:end="2646:15">
              <decl_stmt pos:start="2640:15" pos:end="2640:93"><decl pos:start="2640:15" pos:end="2640:92"><type pos:start="2640:15" pos:end="2640:28"><name pos:start="2640:15" pos:end="2640:28">ZipEntrySource</name></type> <name pos:start="2640:30" pos:end="2640:34">entry</name> <init pos:start="2640:36" pos:end="2640:92">= <expr pos:start="2640:38" pos:end="2640:92"><operator pos:start="2640:38" pos:end="2640:38">(</operator><name pos:start="2640:39" pos:end="2640:52">ZipEntrySource</name><operator pos:start="2640:53" pos:end="2640:53">)</operator> <call pos:start="2640:55" pos:end="2640:92"><name pos:start="2640:55" pos:end="2640:72"><name pos:start="2640:55" pos:end="2640:65">entryByPath</name><operator pos:start="2640:66" pos:end="2640:66">.</operator><name pos:start="2640:67" pos:end="2640:72">remove</name></name><argument_list pos:start="2640:73" pos:end="2640:92">(<argument pos:start="2640:74" pos:end="2640:91"><expr pos:start="2640:74" pos:end="2640:91"><call pos:start="2640:74" pos:end="2640:91"><name pos:start="2640:74" pos:end="2640:89"><name pos:start="2640:74" pos:end="2640:81">zipEntry</name><operator pos:start="2640:82" pos:end="2640:82">.</operator><name pos:start="2640:83" pos:end="2640:89">getName</name></name><argument_list pos:start="2640:90" pos:end="2640:91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt pos:start="2641:15" pos:end="2646:15"><if pos:start="2641:15" pos:end="2643:15">if <condition pos:start="2641:18" pos:end="2641:32">(<expr pos:start="2641:19" pos:end="2641:31"><name pos:start="2641:19" pos:end="2641:23">entry</name> <operator pos:start="2641:25" pos:end="2641:26">!=</operator> <literal type="null" pos:start="2641:28" pos:end="2641:31">null</literal></expr>)</condition> <block pos:start="2641:34" pos:end="2643:15">{<block_content pos:start="2642:17" pos:end="2642:37">
                <expr_stmt pos:start="2642:17" pos:end="2642:37"><expr pos:start="2642:17" pos:end="2642:36"><call pos:start="2642:17" pos:end="2642:36"><name pos:start="2642:17" pos:end="2642:24">addEntry</name><argument_list pos:start="2642:25" pos:end="2642:36">(<argument pos:start="2642:26" pos:end="2642:30"><expr pos:start="2642:26" pos:end="2642:30"><name pos:start="2642:26" pos:end="2642:30">entry</name></expr></argument>, <argument pos:start="2642:33" pos:end="2642:35"><expr pos:start="2642:33" pos:end="2642:35"><name pos:start="2642:33" pos:end="2642:35">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if>
              <else pos:start="2644:15" pos:end="2646:15">else <block pos:start="2644:20" pos:end="2646:15">{<block_content pos:start="2645:17" pos:end="2645:58">
                <expr_stmt pos:start="2645:17" pos:end="2645:58"><expr pos:start="2645:17" pos:end="2645:57"><call pos:start="2645:17" pos:end="2645:57"><name pos:start="2645:17" pos:end="2645:38"><name pos:start="2645:17" pos:end="2645:28">ZipEntryUtil</name><operator pos:start="2645:29" pos:end="2645:29">.</operator><name pos:start="2645:30" pos:end="2645:38">copyEntry</name></name><argument_list pos:start="2645:39" pos:end="2645:57">(<argument pos:start="2645:40" pos:end="2645:47"><expr pos:start="2645:40" pos:end="2645:47"><name pos:start="2645:40" pos:end="2645:47">zipEntry</name></expr></argument>, <argument pos:start="2645:50" pos:end="2645:51"><expr pos:start="2645:50" pos:end="2645:51"><name pos:start="2645:50" pos:end="2645:51">in</name></expr></argument>, <argument pos:start="2645:54" pos:end="2645:56"><expr pos:start="2645:54" pos:end="2645:56"><name pos:start="2645:54" pos:end="2645:56">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif" pos:start="2648:13" pos:end="2650:13">else if <condition pos:start="2648:21" pos:end="2648:42">(<expr pos:start="2648:22" pos:end="2648:41"><call pos:start="2648:22" pos:end="2648:41"><name pos:start="2648:22" pos:end="2648:39"><name pos:start="2648:22" pos:end="2648:24">log</name><operator pos:start="2648:25" pos:end="2648:25">.</operator><name pos:start="2648:26" pos:end="2648:39">isDebugEnabled</name></name><argument_list pos:start="2648:40" pos:end="2648:41">()</argument_list></call></expr>)</condition> <block pos:start="2648:44" pos:end="2650:13">{<block_content pos:start="2649:15" pos:end="2649:67">
              <expr_stmt pos:start="2649:15" pos:end="2649:67"><expr pos:start="2649:15" pos:end="2649:66"><call pos:start="2649:15" pos:end="2649:66"><name pos:start="2649:15" pos:end="2649:23"><name pos:start="2649:15" pos:end="2649:17">log</name><operator pos:start="2649:18" pos:end="2649:18">.</operator><name pos:start="2649:19" pos:end="2649:23">debug</name></name><argument_list pos:start="2649:24" pos:end="2649:66">(<argument pos:start="2649:25" pos:end="2649:45"><expr pos:start="2649:25" pos:end="2649:45"><literal type="string" pos:start="2649:25" pos:end="2649:45">"Duplicate entry: {}"</literal></expr></argument>, <argument pos:start="2649:48" pos:end="2649:65"><expr pos:start="2649:48" pos:end="2649:65"><call pos:start="2649:48" pos:end="2649:65"><name pos:start="2649:48" pos:end="2649:63"><name pos:start="2649:48" pos:end="2649:55">zipEntry</name><operator pos:start="2649:56" pos:end="2649:56">.</operator><name pos:start="2649:57" pos:end="2649:63">getName</name></name><argument_list pos:start="2649:64" pos:end="2649:65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="2654:9" pos:end="2654:26">// Add new entries</comment>
        <for pos:start="2655:9" pos:end="2657:9">for <control pos:start="2655:13" pos:end="2655:66">(<init pos:start="2655:14" pos:end="2655:65"><decl pos:start="2655:14" pos:end="2655:65"><type pos:start="2655:14" pos:end="2655:27"><name pos:start="2655:14" pos:end="2655:27">ZipEntrySource</name></type> <name pos:start="2655:29" pos:end="2655:42">zipEntrySource</name> <range pos:start="2655:44" pos:end="2655:65">: <expr pos:start="2655:46" pos:end="2655:65"><call pos:start="2655:46" pos:end="2655:65"><name pos:start="2655:46" pos:end="2655:63"><name pos:start="2655:46" pos:end="2655:56">entryByPath</name><operator pos:start="2655:57" pos:end="2655:57">.</operator><name pos:start="2655:58" pos:end="2655:63">values</name></name><argument_list pos:start="2655:64" pos:end="2655:65">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="2655:68" pos:end="2657:9">{<block_content pos:start="2656:11" pos:end="2656:40">
          <expr_stmt pos:start="2656:11" pos:end="2656:40"><expr pos:start="2656:11" pos:end="2656:39"><call pos:start="2656:11" pos:end="2656:39"><name pos:start="2656:11" pos:end="2656:18">addEntry</name><argument_list pos:start="2656:19" pos:end="2656:39">(<argument pos:start="2656:20" pos:end="2656:33"><expr pos:start="2656:20" pos:end="2656:33"><name pos:start="2656:20" pos:end="2656:33">zipEntrySource</name></expr></argument>, <argument pos:start="2656:36" pos:end="2656:38"><expr pos:start="2656:36" pos:end="2656:38"><name pos:start="2656:36" pos:end="2656:38">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block>
      <finally pos:start="2659:7" pos:end="2661:7">finally <block pos:start="2659:15" pos:end="2661:7">{<block_content pos:start="2660:9" pos:end="2660:34">
        <expr_stmt pos:start="2660:9" pos:end="2660:34"><expr pos:start="2660:9" pos:end="2660:33"><call pos:start="2660:9" pos:end="2660:33"><name pos:start="2660:9" pos:end="2660:28"><name pos:start="2660:9" pos:end="2660:15">IOUtils</name><operator pos:start="2660:16" pos:end="2660:16">.</operator><name pos:start="2660:17" pos:end="2660:28">closeQuietly</name></name><argument_list pos:start="2660:29" pos:end="2660:33">(<argument pos:start="2660:30" pos:end="2660:32"><expr pos:start="2660:30" pos:end="2660:32"><name pos:start="2660:30" pos:end="2660:32">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block>
    <catch pos:start="2663:5" pos:end="2665:5">catch <parameter_list pos:start="2663:11" pos:end="2663:25">(<parameter pos:start="2663:12" pos:end="2663:24"><decl pos:start="2663:12" pos:end="2663:24"><type pos:start="2663:12" pos:end="2663:24"><name pos:start="2663:12" pos:end="2663:22">IOException</name></type> <name pos:start="2663:24" pos:end="2663:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2663:27" pos:end="2665:5">{<block_content pos:start="2664:7" pos:end="2664:34">
      <expr_stmt pos:start="2664:7" pos:end="2664:34"><expr pos:start="2664:7" pos:end="2664:33"><call pos:start="2664:7" pos:end="2664:33"><name pos:start="2664:7" pos:end="2664:30"><name pos:start="2664:7" pos:end="2664:22">ZipExceptionUtil</name><operator pos:start="2664:23" pos:end="2664:23">.</operator><name pos:start="2664:24" pos:end="2664:30">rethrow</name></name><argument_list pos:start="2664:31" pos:end="2664:33">(<argument pos:start="2664:32" pos:end="2664:32"><expr pos:start="2664:32" pos:end="2664:32"><name pos:start="2664:32" pos:end="2664:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2668:3" pos:end="2675:5">/**
   * Changes a ZIP file: adds/replaces the given entries in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          ZIP entries to be replaced or added.
   */</comment>
  <function pos:start="2676:3" pos:end="2683:3"><type pos:start="2676:3" pos:end="2676:20"><specifier pos:start="2676:3" pos:end="2676:8">public</specifier> <specifier pos:start="2676:10" pos:end="2676:15">static</specifier> <name pos:start="2676:17" pos:end="2676:20">void</name></type> <name pos:start="2676:22" pos:end="2676:40">addOrReplaceEntries</name><parameter_list pos:start="2676:41" pos:end="2676:88">(<parameter pos:start="2676:42" pos:end="2676:55"><decl pos:start="2676:42" pos:end="2676:55"><type pos:start="2676:42" pos:end="2676:55"><specifier pos:start="2676:42" pos:end="2676:46">final</specifier> <name pos:start="2676:48" pos:end="2676:51">File</name></type> <name pos:start="2676:53" pos:end="2676:55">zip</name></decl></parameter>, <parameter pos:start="2676:58" pos:end="2676:87"><decl pos:start="2676:58" pos:end="2676:87"><type pos:start="2676:58" pos:end="2676:87"><specifier pos:start="2676:58" pos:end="2676:62">final</specifier> <name pos:start="2676:64" pos:end="2676:79"><name pos:start="2676:64" pos:end="2676:77">ZipEntrySource</name><index pos:start="2676:78" pos:end="2676:79">[]</index></name></type> <name pos:start="2676:81" pos:end="2676:87">entries</name></decl></parameter>)</parameter_list> <block pos:start="2676:90" pos:end="2683:3">{<block_content pos:start="2677:5" pos:end="2682:7">
    <expr_stmt pos:start="2677:5" pos:end="2682:7"><expr pos:start="2677:5" pos:end="2682:6"><call pos:start="2677:5" pos:end="2682:6"><name pos:start="2677:5" pos:end="2677:18">operateInPlace</name><argument_list pos:start="2677:19" pos:end="2682:6">(<argument pos:start="2677:20" pos:end="2677:22"><expr pos:start="2677:20" pos:end="2677:22"><name pos:start="2677:20" pos:end="2677:22">zip</name></expr></argument>, <argument pos:start="2677:25" pos:end="2682:5"><expr pos:start="2677:25" pos:end="2682:5"><operator pos:start="2677:25" pos:end="2677:27">new</operator> <class pos:start="2677:29" pos:end="2682:5"><super pos:start="2677:29" pos:end="2677:41"><name pos:start="2677:29" pos:end="2677:41">InPlaceAction</name></super><argument_list pos:start="2677:42" pos:end="2677:43">()</argument_list> <block pos:start="2677:45" pos:end="2682:5">{
      <function pos:start="2678:7" pos:end="2681:7"><type pos:start="2678:7" pos:end="2678:20"><specifier pos:start="2678:7" pos:end="2678:12">public</specifier> <name pos:start="2678:14" pos:end="2678:20">boolean</name></type> <name pos:start="2678:22" pos:end="2678:24">act</name><parameter_list pos:start="2678:25" pos:end="2678:38">(<parameter pos:start="2678:26" pos:end="2678:37"><decl pos:start="2678:26" pos:end="2678:37"><type pos:start="2678:26" pos:end="2678:29"><name pos:start="2678:26" pos:end="2678:29">File</name></type> <name pos:start="2678:31" pos:end="2678:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2678:40" pos:end="2681:7">{<block_content pos:start="2679:9" pos:end="2680:20">
        <expr_stmt pos:start="2679:9" pos:end="2679:51"><expr pos:start="2679:9" pos:end="2679:50"><call pos:start="2679:9" pos:end="2679:50"><name pos:start="2679:9" pos:end="2679:27">addOrReplaceEntries</name><argument_list pos:start="2679:28" pos:end="2679:50">(<argument pos:start="2679:29" pos:end="2679:31"><expr pos:start="2679:29" pos:end="2679:31"><name pos:start="2679:29" pos:end="2679:31">zip</name></expr></argument>, <argument pos:start="2679:34" pos:end="2679:40"><expr pos:start="2679:34" pos:end="2679:40"><name pos:start="2679:34" pos:end="2679:40">entries</name></expr></argument>, <argument pos:start="2679:43" pos:end="2679:49"><expr pos:start="2679:43" pos:end="2679:49"><name pos:start="2679:43" pos:end="2679:49">tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2680:9" pos:end="2680:20">return <expr pos:start="2680:16" pos:end="2680:19"><literal type="boolean" pos:start="2680:16" pos:end="2680:19">true</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2685:3" pos:end="2687:5">/**
   * @return given entries indexed by path.
   */</comment>
  <function pos:start="2688:3" pos:end="2695:3"><type pos:start="2688:3" pos:end="2688:36"><specifier pos:start="2688:3" pos:end="2688:8">static</specifier> <name pos:start="2688:10" pos:end="2688:36"><name pos:start="2688:10" pos:end="2688:12">Map</name><argument_list type="generic" pos:start="2688:13" pos:end="2688:36">&lt;<argument pos:start="2688:14" pos:end="2688:19"><name pos:start="2688:14" pos:end="2688:19">String</name></argument>, <argument pos:start="2688:22" pos:end="2688:35"><name pos:start="2688:22" pos:end="2688:35">ZipEntrySource</name></argument>&gt;</argument_list></name></type> <name pos:start="2688:38" pos:end="2688:50">entriesByPath</name><parameter_list pos:start="2688:51" pos:end="2688:77">(<parameter pos:start="2688:52" pos:end="2688:76"><decl pos:start="2688:52" pos:end="2688:76"><type pos:start="2688:52" pos:end="2688:68"><name pos:start="2688:52" pos:end="2688:65">ZipEntrySource</name><modifier pos:start="2688:66" pos:end="2688:68">...</modifier></type> <name pos:start="2688:70" pos:end="2688:76">entries</name></decl></parameter>)</parameter_list> <block pos:start="2688:79" pos:end="2695:3">{<block_content pos:start="2689:5" pos:end="2694:18">
    <decl_stmt pos:start="2689:5" pos:end="2689:79"><decl pos:start="2689:5" pos:end="2689:78"><type pos:start="2689:5" pos:end="2689:31"><name pos:start="2689:5" pos:end="2689:31"><name pos:start="2689:5" pos:end="2689:7">Map</name><argument_list type="generic" pos:start="2689:8" pos:end="2689:31">&lt;<argument pos:start="2689:9" pos:end="2689:14"><name pos:start="2689:9" pos:end="2689:14">String</name></argument>, <argument pos:start="2689:17" pos:end="2689:30"><name pos:start="2689:17" pos:end="2689:30">ZipEntrySource</name></argument>&gt;</argument_list></name></type> <name pos:start="2689:33" pos:end="2689:38">result</name> <init pos:start="2689:40" pos:end="2689:78">= <expr pos:start="2689:42" pos:end="2689:78"><operator pos:start="2689:42" pos:end="2689:44">new</operator> <call pos:start="2689:46" pos:end="2689:78"><name pos:start="2689:46" pos:end="2689:76"><name pos:start="2689:46" pos:end="2689:52">HashMap</name><argument_list type="generic" pos:start="2689:53" pos:end="2689:76">&lt;<argument pos:start="2689:54" pos:end="2689:59"><name pos:start="2689:54" pos:end="2689:59">String</name></argument>, <argument pos:start="2689:62" pos:end="2689:75"><name pos:start="2689:62" pos:end="2689:75">ZipEntrySource</name></argument>&gt;</argument_list></name><argument_list pos:start="2689:77" pos:end="2689:78">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for pos:start="2690:5" pos:end="2693:5">for <control pos:start="2690:9" pos:end="2690:44">(<init pos:start="2690:10" pos:end="2690:19"><decl pos:start="2690:10" pos:end="2690:18"><type pos:start="2690:10" pos:end="2690:12"><name pos:start="2690:10" pos:end="2690:12">int</name></type> <name pos:start="2690:14" pos:end="2690:14">i</name> <init pos:start="2690:16" pos:end="2690:18">= <expr pos:start="2690:18" pos:end="2690:18"><literal type="number" pos:start="2690:18" pos:end="2690:18">0</literal></expr></init></decl>;</init> <condition pos:start="2690:21" pos:end="2690:39"><expr pos:start="2690:21" pos:end="2690:38"><name pos:start="2690:21" pos:end="2690:21">i</name> <operator pos:start="2690:23" pos:end="2690:23">&lt;</operator> <name pos:start="2690:25" pos:end="2690:38"><name pos:start="2690:25" pos:end="2690:31">entries</name><operator pos:start="2690:32" pos:end="2690:32">.</operator><name pos:start="2690:33" pos:end="2690:38">length</name></name></expr>;</condition> <incr pos:start="2690:41" pos:end="2690:43"><expr pos:start="2690:41" pos:end="2690:43"><name pos:start="2690:41" pos:end="2690:41">i</name><operator pos:start="2690:42" pos:end="2690:43">++</operator></expr></incr>)</control> <block pos:start="2690:46" pos:end="2693:5">{<block_content pos:start="2691:7" pos:end="2692:43">
      <decl_stmt pos:start="2691:7" pos:end="2691:41"><decl pos:start="2691:7" pos:end="2691:40"><type pos:start="2691:7" pos:end="2691:20"><name pos:start="2691:7" pos:end="2691:20">ZipEntrySource</name></type> <name pos:start="2691:22" pos:end="2691:27">source</name> <init pos:start="2691:29" pos:end="2691:40">= <expr pos:start="2691:31" pos:end="2691:40"><name pos:start="2691:31" pos:end="2691:40"><name pos:start="2691:31" pos:end="2691:37">entries</name><index pos:start="2691:38" pos:end="2691:40">[<expr pos:start="2691:39" pos:end="2691:39"><name pos:start="2691:39" pos:end="2691:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt pos:start="2692:7" pos:end="2692:43"><expr pos:start="2692:7" pos:end="2692:42"><call pos:start="2692:7" pos:end="2692:42"><name pos:start="2692:7" pos:end="2692:16"><name pos:start="2692:7" pos:end="2692:12">result</name><operator pos:start="2692:13" pos:end="2692:13">.</operator><name pos:start="2692:14" pos:end="2692:16">put</name></name><argument_list pos:start="2692:17" pos:end="2692:42">(<argument pos:start="2692:18" pos:end="2692:33"><expr pos:start="2692:18" pos:end="2692:33"><call pos:start="2692:18" pos:end="2692:33"><name pos:start="2692:18" pos:end="2692:31"><name pos:start="2692:18" pos:end="2692:23">source</name><operator pos:start="2692:24" pos:end="2692:24">.</operator><name pos:start="2692:25" pos:end="2692:31">getPath</name></name><argument_list pos:start="2692:32" pos:end="2692:33">()</argument_list></call></expr></argument>, <argument pos:start="2692:36" pos:end="2692:41"><expr pos:start="2692:36" pos:end="2692:41"><name pos:start="2692:36" pos:end="2692:41">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="2694:5" pos:end="2694:18">return <expr pos:start="2694:12" pos:end="2694:17"><name pos:start="2694:12" pos:end="2694:17">result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2697:3" pos:end="2710:5">/**
   * Copies an existing ZIP file and transforms a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param transformer
   *          transformer for the given ZIP entry.
   * @param destZip
   *          new ZIP file created.
   * @throws IllegalArgumentException if the destination is the same as the location
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2711:3" pos:end="2715:3"><type pos:start="2711:3" pos:end="2711:23"><specifier pos:start="2711:3" pos:end="2711:8">public</specifier> <specifier pos:start="2711:10" pos:end="2711:15">static</specifier> <name pos:start="2711:17" pos:end="2711:23">boolean</name></type> <name pos:start="2711:25" pos:end="2711:38">transformEntry</name><parameter_list pos:start="2711:39" pos:end="2711:108">(<parameter pos:start="2711:40" pos:end="2711:47"><decl pos:start="2711:40" pos:end="2711:47"><type pos:start="2711:40" pos:end="2711:47"><name pos:start="2711:40" pos:end="2711:43">File</name></type> <name pos:start="2711:45" pos:end="2711:47">zip</name></decl></parameter>, <parameter pos:start="2711:50" pos:end="2711:60"><decl pos:start="2711:50" pos:end="2711:60"><type pos:start="2711:50" pos:end="2711:60"><name pos:start="2711:50" pos:end="2711:55">String</name></type> <name pos:start="2711:57" pos:end="2711:60">path</name></decl></parameter>, <parameter pos:start="2711:63" pos:end="2711:93"><decl pos:start="2711:63" pos:end="2711:93"><type pos:start="2711:63" pos:end="2711:93"><name pos:start="2711:63" pos:end="2711:81">ZipEntryTransformer</name></type> <name pos:start="2711:83" pos:end="2711:93">transformer</name></decl></parameter>, <parameter pos:start="2711:96" pos:end="2711:107"><decl pos:start="2711:96" pos:end="2711:107"><type pos:start="2711:96" pos:end="2711:107"><name pos:start="2711:96" pos:end="2711:99">File</name></type> <name pos:start="2711:101" pos:end="2711:107">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2711:110" pos:end="2715:3">{<block_content pos:start="2712:5" pos:end="2714:89">
    <if_stmt pos:start="2712:5" pos:end="2713:103"><if pos:start="2712:5" pos:end="2713:103">if<condition pos:start="2712:7" pos:end="2712:27">(<expr pos:start="2712:8" pos:end="2712:26"><call pos:start="2712:8" pos:end="2712:26"><name pos:start="2712:8" pos:end="2712:17"><name pos:start="2712:8" pos:end="2712:10">zip</name><operator pos:start="2712:11" pos:end="2712:11">.</operator><name pos:start="2712:12" pos:end="2712:17">equals</name></name><argument_list pos:start="2712:18" pos:end="2712:26">(<argument pos:start="2712:19" pos:end="2712:25"><expr pos:start="2712:19" pos:end="2712:25"><name pos:start="2712:19" pos:end="2712:25">destZip</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="2712:28" pos:end="2713:103">{<block_content pos:start="2712:29" pos:end="2713:102"><throw pos:start="2712:29" pos:end="2713:102">throw <expr pos:start="2712:35" pos:end="2713:101"><operator pos:start="2712:35" pos:end="2712:37">new</operator> <call pos:start="2712:39" pos:end="2713:101"><name pos:start="2712:39" pos:end="2712:62">IllegalArgumentException</name><argument_list pos:start="2712:63" pos:end="2713:101">(<argument pos:start="2712:64" pos:end="2713:99"><expr pos:start="2712:64" pos:end="2713:99"><literal type="string" pos:start="2712:64" pos:end="2712:72">"Input ("</literal> <operator pos:start="2712:74" pos:end="2712:74">+</operator><call pos:start="2712:75" pos:end="2712:95"><name pos:start="2712:75" pos:end="2712:93"><name pos:start="2712:75" pos:end="2712:77">zip</name><operator pos:start="2712:78" pos:end="2712:78">.</operator><name pos:start="2712:79" pos:end="2712:93">getAbsolutePath</name></name><argument_list pos:start="2712:94" pos:end="2712:95">()</argument_list></call><operator pos:start="2712:96" pos:end="2712:96">+</operator> <literal type="string" pos:start="2712:98" pos:end="2712:132">") is the same as the destination!"</literal> <operator pos:start="2712:134" pos:end="2712:134">+</operator>
            <literal type="string" pos:start="2713:13" pos:end="2713:99">"Please use the transformEntry method without destination for in-place transformation."</literal></expr></argument> )</argument_list></call></expr>;</throw></block_content>}</block></if></if_stmt>
    <return pos:start="2714:5" pos:end="2714:89">return <expr pos:start="2714:12" pos:end="2714:88"><call pos:start="2714:12" pos:end="2714:88"><name pos:start="2714:12" pos:end="2714:25">transformEntry</name><argument_list pos:start="2714:26" pos:end="2714:88">(<argument pos:start="2714:27" pos:end="2714:29"><expr pos:start="2714:27" pos:end="2714:29"><name pos:start="2714:27" pos:end="2714:29">zip</name></expr></argument>, <argument pos:start="2714:32" pos:end="2714:78"><expr pos:start="2714:32" pos:end="2714:78"><operator pos:start="2714:32" pos:end="2714:34">new</operator> <call pos:start="2714:36" pos:end="2714:78"><name pos:start="2714:36" pos:end="2714:59">ZipEntryTransformerEntry</name><argument_list pos:start="2714:60" pos:end="2714:78">(<argument pos:start="2714:61" pos:end="2714:64"><expr pos:start="2714:61" pos:end="2714:64"><name pos:start="2714:61" pos:end="2714:64">path</name></expr></argument>, <argument pos:start="2714:67" pos:end="2714:77"><expr pos:start="2714:67" pos:end="2714:77"><name pos:start="2714:67" pos:end="2714:77">transformer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2714:81" pos:end="2714:87"><expr pos:start="2714:81" pos:end="2714:87"><name pos:start="2714:81" pos:end="2714:87">destZip</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2717:3" pos:end="2727:5">/**
   * Changes an existing ZIP file: transforms a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param path
   *          new ZIP entry path.
   * @param transformer
   *          transformer for the given ZIP entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2728:3" pos:end="2734:3"><type pos:start="2728:3" pos:end="2728:23"><specifier pos:start="2728:3" pos:end="2728:8">public</specifier> <specifier pos:start="2728:10" pos:end="2728:15">static</specifier> <name pos:start="2728:17" pos:end="2728:23">boolean</name></type> <name pos:start="2728:25" pos:end="2728:38">transformEntry</name><parameter_list pos:start="2728:39" pos:end="2728:112">(<parameter pos:start="2728:40" pos:end="2728:53"><decl pos:start="2728:40" pos:end="2728:53"><type pos:start="2728:40" pos:end="2728:53"><specifier pos:start="2728:40" pos:end="2728:44">final</specifier> <name pos:start="2728:46" pos:end="2728:49">File</name></type> <name pos:start="2728:51" pos:end="2728:53">zip</name></decl></parameter>, <parameter pos:start="2728:56" pos:end="2728:72"><decl pos:start="2728:56" pos:end="2728:72"><type pos:start="2728:56" pos:end="2728:72"><specifier pos:start="2728:56" pos:end="2728:60">final</specifier> <name pos:start="2728:62" pos:end="2728:67">String</name></type> <name pos:start="2728:69" pos:end="2728:72">path</name></decl></parameter>, <parameter pos:start="2728:75" pos:end="2728:111"><decl pos:start="2728:75" pos:end="2728:111"><type pos:start="2728:75" pos:end="2728:111"><specifier pos:start="2728:75" pos:end="2728:79">final</specifier> <name pos:start="2728:81" pos:end="2728:99">ZipEntryTransformer</name></type> <name pos:start="2728:101" pos:end="2728:111">transformer</name></decl></parameter>)</parameter_list> <block pos:start="2728:114" pos:end="2734:3">{<block_content pos:start="2729:5" pos:end="2733:7">
    <return pos:start="2729:5" pos:end="2733:7">return <expr pos:start="2729:12" pos:end="2733:6"><call pos:start="2729:12" pos:end="2733:6"><name pos:start="2729:12" pos:end="2729:25">operateInPlace</name><argument_list pos:start="2729:26" pos:end="2733:6">(<argument pos:start="2729:27" pos:end="2729:29"><expr pos:start="2729:27" pos:end="2729:29"><name pos:start="2729:27" pos:end="2729:29">zip</name></expr></argument>, <argument pos:start="2729:32" pos:end="2733:5"><expr pos:start="2729:32" pos:end="2733:5"><operator pos:start="2729:32" pos:end="2729:34">new</operator> <class pos:start="2729:36" pos:end="2733:5"><super pos:start="2729:36" pos:end="2729:48"><name pos:start="2729:36" pos:end="2729:48">InPlaceAction</name></super><argument_list pos:start="2729:49" pos:end="2729:50">()</argument_list> <block pos:start="2729:52" pos:end="2733:5">{
      <function pos:start="2730:7" pos:end="2732:7"><type pos:start="2730:7" pos:end="2730:20"><specifier pos:start="2730:7" pos:end="2730:12">public</specifier> <name pos:start="2730:14" pos:end="2730:20">boolean</name></type> <name pos:start="2730:22" pos:end="2730:24">act</name><parameter_list pos:start="2730:25" pos:end="2730:38">(<parameter pos:start="2730:26" pos:end="2730:37"><decl pos:start="2730:26" pos:end="2730:37"><type pos:start="2730:26" pos:end="2730:29"><name pos:start="2730:26" pos:end="2730:29">File</name></type> <name pos:start="2730:31" pos:end="2730:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2730:40" pos:end="2732:7">{<block_content pos:start="2731:9" pos:end="2731:63">
        <return pos:start="2731:9" pos:end="2731:63">return <expr pos:start="2731:16" pos:end="2731:62"><call pos:start="2731:16" pos:end="2731:62"><name pos:start="2731:16" pos:end="2731:29">transformEntry</name><argument_list pos:start="2731:30" pos:end="2731:62">(<argument pos:start="2731:31" pos:end="2731:33"><expr pos:start="2731:31" pos:end="2731:33"><name pos:start="2731:31" pos:end="2731:33">zip</name></expr></argument>, <argument pos:start="2731:36" pos:end="2731:39"><expr pos:start="2731:36" pos:end="2731:39"><name pos:start="2731:36" pos:end="2731:39">path</name></expr></argument>, <argument pos:start="2731:42" pos:end="2731:52"><expr pos:start="2731:42" pos:end="2731:52"><name pos:start="2731:42" pos:end="2731:52">transformer</name></expr></argument>, <argument pos:start="2731:55" pos:end="2731:61"><expr pos:start="2731:55" pos:end="2731:61"><name pos:start="2731:55" pos:end="2731:61">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2736:3" pos:end="2746:5">/**
   * Copies an existing ZIP file and transforms a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entry
   *          transformer for a ZIP entry.
   * @param destZip
   *          new ZIP file created.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2747:3" pos:end="2749:3"><type pos:start="2747:3" pos:end="2747:23"><specifier pos:start="2747:3" pos:end="2747:8">public</specifier> <specifier pos:start="2747:10" pos:end="2747:15">static</specifier> <name pos:start="2747:17" pos:end="2747:23">boolean</name></type> <name pos:start="2747:25" pos:end="2747:38">transformEntry</name><parameter_list pos:start="2747:39" pos:end="2747:94">(<parameter pos:start="2747:40" pos:end="2747:47"><decl pos:start="2747:40" pos:end="2747:47"><type pos:start="2747:40" pos:end="2747:47"><name pos:start="2747:40" pos:end="2747:43">File</name></type> <name pos:start="2747:45" pos:end="2747:47">zip</name></decl></parameter>, <parameter pos:start="2747:50" pos:end="2747:79"><decl pos:start="2747:50" pos:end="2747:79"><type pos:start="2747:50" pos:end="2747:79"><name pos:start="2747:50" pos:end="2747:73">ZipEntryTransformerEntry</name></type> <name pos:start="2747:75" pos:end="2747:79">entry</name></decl></parameter>, <parameter pos:start="2747:82" pos:end="2747:93"><decl pos:start="2747:82" pos:end="2747:93"><type pos:start="2747:82" pos:end="2747:93"><name pos:start="2747:82" pos:end="2747:85">File</name></type> <name pos:start="2747:87" pos:end="2747:93">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2747:96" pos:end="2749:3">{<block_content pos:start="2748:5" pos:end="2748:84">
    <return pos:start="2748:5" pos:end="2748:84">return <expr pos:start="2748:12" pos:end="2748:83"><call pos:start="2748:12" pos:end="2748:83"><name pos:start="2748:12" pos:end="2748:27">transformEntries</name><argument_list pos:start="2748:28" pos:end="2748:83">(<argument pos:start="2748:29" pos:end="2748:31"><expr pos:start="2748:29" pos:end="2748:31"><name pos:start="2748:29" pos:end="2748:31">zip</name></expr></argument>, <argument pos:start="2748:34" pos:end="2748:73"><expr pos:start="2748:34" pos:end="2748:73"><operator pos:start="2748:34" pos:end="2748:36">new</operator> <name pos:start="2748:38" pos:end="2748:63"><name pos:start="2748:38" pos:end="2748:61">ZipEntryTransformerEntry</name><index pos:start="2748:62" pos:end="2748:63">[]</index></name> <block pos:start="2748:65" pos:end="2748:73">{ <expr pos:start="2748:67" pos:end="2748:71"><name pos:start="2748:67" pos:end="2748:71">entry</name></expr> }</block></expr></argument>, <argument pos:start="2748:76" pos:end="2748:82"><expr pos:start="2748:76" pos:end="2748:82"><name pos:start="2748:76" pos:end="2748:82">destZip</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2751:3" pos:end="2759:5">/**
   * Changes an existing ZIP file: transforms a given entry in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entry
   *          transformer for a ZIP entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2760:3" pos:end="2766:3"><type pos:start="2760:3" pos:end="2760:23"><specifier pos:start="2760:3" pos:end="2760:8">public</specifier> <specifier pos:start="2760:10" pos:end="2760:15">static</specifier> <name pos:start="2760:17" pos:end="2760:23">boolean</name></type> <name pos:start="2760:25" pos:end="2760:38">transformEntry</name><parameter_list pos:start="2760:39" pos:end="2760:92">(<parameter pos:start="2760:40" pos:end="2760:53"><decl pos:start="2760:40" pos:end="2760:53"><type pos:start="2760:40" pos:end="2760:53"><specifier pos:start="2760:40" pos:end="2760:44">final</specifier> <name pos:start="2760:46" pos:end="2760:49">File</name></type> <name pos:start="2760:51" pos:end="2760:53">zip</name></decl></parameter>, <parameter pos:start="2760:56" pos:end="2760:91"><decl pos:start="2760:56" pos:end="2760:91"><type pos:start="2760:56" pos:end="2760:91"><specifier pos:start="2760:56" pos:end="2760:60">final</specifier> <name pos:start="2760:62" pos:end="2760:85">ZipEntryTransformerEntry</name></type> <name pos:start="2760:87" pos:end="2760:91">entry</name></decl></parameter>)</parameter_list> <block pos:start="2760:94" pos:end="2766:3">{<block_content pos:start="2761:5" pos:end="2765:7">
    <return pos:start="2761:5" pos:end="2765:7">return <expr pos:start="2761:12" pos:end="2765:6"><call pos:start="2761:12" pos:end="2765:6"><name pos:start="2761:12" pos:end="2761:25">operateInPlace</name><argument_list pos:start="2761:26" pos:end="2765:6">(<argument pos:start="2761:27" pos:end="2761:29"><expr pos:start="2761:27" pos:end="2761:29"><name pos:start="2761:27" pos:end="2761:29">zip</name></expr></argument>, <argument pos:start="2761:32" pos:end="2765:5"><expr pos:start="2761:32" pos:end="2765:5"><operator pos:start="2761:32" pos:end="2761:34">new</operator> <class pos:start="2761:36" pos:end="2765:5"><super pos:start="2761:36" pos:end="2761:48"><name pos:start="2761:36" pos:end="2761:48">InPlaceAction</name></super><argument_list pos:start="2761:49" pos:end="2761:50">()</argument_list> <block pos:start="2761:52" pos:end="2765:5">{
      <function pos:start="2762:7" pos:end="2764:7"><type pos:start="2762:7" pos:end="2762:20"><specifier pos:start="2762:7" pos:end="2762:12">public</specifier> <name pos:start="2762:14" pos:end="2762:20">boolean</name></type> <name pos:start="2762:22" pos:end="2762:24">act</name><parameter_list pos:start="2762:25" pos:end="2762:38">(<parameter pos:start="2762:26" pos:end="2762:37"><decl pos:start="2762:26" pos:end="2762:37"><type pos:start="2762:26" pos:end="2762:29"><name pos:start="2762:26" pos:end="2762:29">File</name></type> <name pos:start="2762:31" pos:end="2762:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2762:40" pos:end="2764:7">{<block_content pos:start="2763:9" pos:end="2763:51">
        <return pos:start="2763:9" pos:end="2763:51">return <expr pos:start="2763:16" pos:end="2763:50"><call pos:start="2763:16" pos:end="2763:50"><name pos:start="2763:16" pos:end="2763:29">transformEntry</name><argument_list pos:start="2763:30" pos:end="2763:50">(<argument pos:start="2763:31" pos:end="2763:33"><expr pos:start="2763:31" pos:end="2763:33"><name pos:start="2763:31" pos:end="2763:33">zip</name></expr></argument>, <argument pos:start="2763:36" pos:end="2763:40"><expr pos:start="2763:36" pos:end="2763:40"><name pos:start="2763:36" pos:end="2763:40">entry</name></expr></argument>, <argument pos:start="2763:43" pos:end="2763:49"><expr pos:start="2763:43" pos:end="2763:49"><name pos:start="2763:43" pos:end="2763:49">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2768:3" pos:end="2778:5">/**
   * Copies an existing ZIP file and transforms the given entries in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          ZIP entry transformers.
   * @param destZip
   *          new ZIP file created.
   * @return &lt;code&gt;true&lt;/code&gt; if at least one entry was replaced.
   */</comment>
  <function pos:start="2779:3" pos:end="2797:3"><type pos:start="2779:3" pos:end="2779:23"><specifier pos:start="2779:3" pos:end="2779:8">public</specifier> <specifier pos:start="2779:10" pos:end="2779:15">static</specifier> <name pos:start="2779:17" pos:end="2779:23">boolean</name></type> <name pos:start="2779:25" pos:end="2779:40">transformEntries</name><parameter_list pos:start="2779:41" pos:end="2779:100">(<parameter pos:start="2779:42" pos:end="2779:49"><decl pos:start="2779:42" pos:end="2779:49"><type pos:start="2779:42" pos:end="2779:49"><name pos:start="2779:42" pos:end="2779:45">File</name></type> <name pos:start="2779:47" pos:end="2779:49">zip</name></decl></parameter>, <parameter pos:start="2779:52" pos:end="2779:85"><decl pos:start="2779:52" pos:end="2779:85"><type pos:start="2779:52" pos:end="2779:85"><name pos:start="2779:52" pos:end="2779:77"><name pos:start="2779:52" pos:end="2779:75">ZipEntryTransformerEntry</name><index pos:start="2779:76" pos:end="2779:77">[]</index></name></type> <name pos:start="2779:79" pos:end="2779:85">entries</name></decl></parameter>, <parameter pos:start="2779:88" pos:end="2779:99"><decl pos:start="2779:88" pos:end="2779:99"><type pos:start="2779:88" pos:end="2779:99"><name pos:start="2779:88" pos:end="2779:91">File</name></type> <name pos:start="2779:93" pos:end="2779:99">destZip</name></decl></parameter>)</parameter_list> <block pos:start="2779:102" pos:end="2797:3">{<block_content pos:start="2780:5" pos:end="2796:5">
    <if_stmt pos:start="2780:5" pos:end="2781:119"><if pos:start="2780:5" pos:end="2781:119">if <condition pos:start="2780:8" pos:end="2780:29">(<expr pos:start="2780:9" pos:end="2780:28"><call pos:start="2780:9" pos:end="2780:28"><name pos:start="2780:9" pos:end="2780:26"><name pos:start="2780:9" pos:end="2780:11">log</name><operator pos:start="2780:12" pos:end="2780:12">.</operator><name pos:start="2780:13" pos:end="2780:26">isDebugEnabled</name></name><argument_list pos:start="2780:27" pos:end="2780:28">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2781:7" pos:end="2781:119"><block_content pos:start="2781:7" pos:end="2781:119">
      <expr_stmt pos:start="2781:7" pos:end="2781:119"><expr pos:start="2781:7" pos:end="2781:118"><call pos:start="2781:7" pos:end="2781:118"><name pos:start="2781:7" pos:end="2781:15"><name pos:start="2781:7" pos:end="2781:9">log</name><operator pos:start="2781:10" pos:end="2781:10">.</operator><name pos:start="2781:11" pos:end="2781:15">debug</name></name><argument_list pos:start="2781:16" pos:end="2781:118">(<argument pos:start="2781:17" pos:end="2781:117"><expr pos:start="2781:17" pos:end="2781:117"><literal type="string" pos:start="2781:17" pos:end="2781:27">"Copying '"</literal> <operator pos:start="2781:29" pos:end="2781:29">+</operator> <name pos:start="2781:31" pos:end="2781:33">zip</name> <operator pos:start="2781:35" pos:end="2781:35">+</operator> <literal type="string" pos:start="2781:37" pos:end="2781:44">"' to '"</literal> <operator pos:start="2781:46" pos:end="2781:46">+</operator> <name pos:start="2781:48" pos:end="2781:54">destZip</name> <operator pos:start="2781:56" pos:end="2781:56">+</operator> <literal type="string" pos:start="2781:58" pos:end="2781:86">"' and transforming entries "</literal> <operator pos:start="2781:88" pos:end="2781:88">+</operator> <call pos:start="2781:90" pos:end="2781:111"><name pos:start="2781:90" pos:end="2781:102"><name pos:start="2781:90" pos:end="2781:95">Arrays</name><operator pos:start="2781:96" pos:end="2781:96">.</operator><name pos:start="2781:97" pos:end="2781:102">asList</name></name><argument_list pos:start="2781:103" pos:end="2781:111">(<argument pos:start="2781:104" pos:end="2781:110"><expr pos:start="2781:104" pos:end="2781:110"><name pos:start="2781:104" pos:end="2781:110">entries</name></expr></argument>)</argument_list></call> <operator pos:start="2781:113" pos:end="2781:113">+</operator> <literal type="string" pos:start="2781:115" pos:end="2781:117">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <try pos:start="2783:5" pos:end="2796:5">try <block pos:start="2783:9" pos:end="2793:5">{<block_content pos:start="2784:7" pos:end="2792:7">
      <decl_stmt pos:start="2784:7" pos:end="2784:105"><decl pos:start="2784:7" pos:end="2784:104"><type pos:start="2784:7" pos:end="2784:21"><name pos:start="2784:7" pos:end="2784:21">ZipOutputStream</name></type> <name pos:start="2784:23" pos:end="2784:25">out</name> <init pos:start="2784:27" pos:end="2784:104">= <expr pos:start="2784:29" pos:end="2784:104"><operator pos:start="2784:29" pos:end="2784:31">new</operator> <call pos:start="2784:33" pos:end="2784:104"><name pos:start="2784:33" pos:end="2784:47">ZipOutputStream</name><argument_list pos:start="2784:48" pos:end="2784:104">(<argument pos:start="2784:49" pos:end="2784:103"><expr pos:start="2784:49" pos:end="2784:103"><operator pos:start="2784:49" pos:end="2784:51">new</operator> <call pos:start="2784:53" pos:end="2784:103"><name pos:start="2784:53" pos:end="2784:72">BufferedOutputStream</name><argument_list pos:start="2784:73" pos:end="2784:103">(<argument pos:start="2784:74" pos:end="2784:102"><expr pos:start="2784:74" pos:end="2784:102"><operator pos:start="2784:74" pos:end="2784:76">new</operator> <call pos:start="2784:78" pos:end="2784:102"><name pos:start="2784:78" pos:end="2784:93">FileOutputStream</name><argument_list pos:start="2784:94" pos:end="2784:102">(<argument pos:start="2784:95" pos:end="2784:101"><expr pos:start="2784:95" pos:end="2784:101"><name pos:start="2784:95" pos:end="2784:101">destZip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <try pos:start="2785:7" pos:end="2792:7">try <block pos:start="2785:11" pos:end="2789:7">{<block_content pos:start="2786:9" pos:end="2788:30">
        <decl_stmt pos:start="2786:9" pos:end="2786:106"><decl pos:start="2786:9" pos:end="2786:105"><type pos:start="2786:9" pos:end="2786:35"><name pos:start="2786:9" pos:end="2786:35">TransformerZipEntryCallback</name></type> <name pos:start="2786:37" pos:end="2786:42">action</name> <init pos:start="2786:44" pos:end="2786:105">= <expr pos:start="2786:46" pos:end="2786:105"><operator pos:start="2786:46" pos:end="2786:48">new</operator> <call pos:start="2786:50" pos:end="2786:105"><name pos:start="2786:50" pos:end="2786:76">TransformerZipEntryCallback</name><argument_list pos:start="2786:77" pos:end="2786:105">(<argument pos:start="2786:78" pos:end="2786:99"><expr pos:start="2786:78" pos:end="2786:99"><call pos:start="2786:78" pos:end="2786:99"><name pos:start="2786:78" pos:end="2786:90"><name pos:start="2786:78" pos:end="2786:83">Arrays</name><operator pos:start="2786:84" pos:end="2786:84">.</operator><name pos:start="2786:85" pos:end="2786:90">asList</name></name><argument_list pos:start="2786:91" pos:end="2786:99">(<argument pos:start="2786:92" pos:end="2786:98"><expr pos:start="2786:92" pos:end="2786:98"><name pos:start="2786:92" pos:end="2786:98">entries</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2786:102" pos:end="2786:104"><expr pos:start="2786:102" pos:end="2786:104"><name pos:start="2786:102" pos:end="2786:104">out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2787:9" pos:end="2787:29"><expr pos:start="2787:9" pos:end="2787:28"><call pos:start="2787:9" pos:end="2787:28"><name pos:start="2787:9" pos:end="2787:15">iterate</name><argument_list pos:start="2787:16" pos:end="2787:28">(<argument pos:start="2787:17" pos:end="2787:19"><expr pos:start="2787:17" pos:end="2787:19"><name pos:start="2787:17" pos:end="2787:19">zip</name></expr></argument>, <argument pos:start="2787:22" pos:end="2787:27"><expr pos:start="2787:22" pos:end="2787:27"><name pos:start="2787:22" pos:end="2787:27">action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2788:9" pos:end="2788:30">return <expr pos:start="2788:16" pos:end="2788:29"><call pos:start="2788:16" pos:end="2788:29"><name pos:start="2788:16" pos:end="2788:27"><name pos:start="2788:16" pos:end="2788:21">action</name><operator pos:start="2788:22" pos:end="2788:22">.</operator><name pos:start="2788:23" pos:end="2788:27">found</name></name><argument_list pos:start="2788:28" pos:end="2788:29">()</argument_list></call></expr>;</return>
      </block_content>}</block>
      <finally pos:start="2790:7" pos:end="2792:7">finally <block pos:start="2790:15" pos:end="2792:7">{<block_content pos:start="2791:9" pos:end="2791:34">
        <expr_stmt pos:start="2791:9" pos:end="2791:34"><expr pos:start="2791:9" pos:end="2791:33"><call pos:start="2791:9" pos:end="2791:33"><name pos:start="2791:9" pos:end="2791:28"><name pos:start="2791:9" pos:end="2791:15">IOUtils</name><operator pos:start="2791:16" pos:end="2791:16">.</operator><name pos:start="2791:17" pos:end="2791:28">closeQuietly</name></name><argument_list pos:start="2791:29" pos:end="2791:33">(<argument pos:start="2791:30" pos:end="2791:32"><expr pos:start="2791:30" pos:end="2791:32"><name pos:start="2791:30" pos:end="2791:32">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block>
    <catch pos:start="2794:5" pos:end="2796:5">catch <parameter_list pos:start="2794:11" pos:end="2794:25">(<parameter pos:start="2794:12" pos:end="2794:24"><decl pos:start="2794:12" pos:end="2794:24"><type pos:start="2794:12" pos:end="2794:24"><name pos:start="2794:12" pos:end="2794:22">IOException</name></type> <name pos:start="2794:24" pos:end="2794:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2794:27" pos:end="2796:5">{<block_content pos:start="2795:7" pos:end="2795:40">
      <throw pos:start="2795:7" pos:end="2795:40">throw <expr pos:start="2795:13" pos:end="2795:39"><call pos:start="2795:13" pos:end="2795:39"><name pos:start="2795:13" pos:end="2795:36"><name pos:start="2795:13" pos:end="2795:28">ZipExceptionUtil</name><operator pos:start="2795:29" pos:end="2795:29">.</operator><name pos:start="2795:30" pos:end="2795:36">rethrow</name></name><argument_list pos:start="2795:37" pos:end="2795:39">(<argument pos:start="2795:38" pos:end="2795:38"><expr pos:start="2795:38" pos:end="2795:38"><name pos:start="2795:38" pos:end="2795:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2799:3" pos:end="2807:5">/**
   * Changes an existing ZIP file: transforms a given entries in it.
   *
   * @param zip
   *          an existing ZIP file (only read).
   * @param entries
   *          ZIP entry transformers.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2808:3" pos:end="2814:3"><type pos:start="2808:3" pos:end="2808:23"><specifier pos:start="2808:3" pos:end="2808:8">public</specifier> <specifier pos:start="2808:10" pos:end="2808:15">static</specifier> <name pos:start="2808:17" pos:end="2808:23">boolean</name></type> <name pos:start="2808:25" pos:end="2808:40">transformEntries</name><parameter_list pos:start="2808:41" pos:end="2808:98">(<parameter pos:start="2808:42" pos:end="2808:55"><decl pos:start="2808:42" pos:end="2808:55"><type pos:start="2808:42" pos:end="2808:55"><specifier pos:start="2808:42" pos:end="2808:46">final</specifier> <name pos:start="2808:48" pos:end="2808:51">File</name></type> <name pos:start="2808:53" pos:end="2808:55">zip</name></decl></parameter>, <parameter pos:start="2808:58" pos:end="2808:97"><decl pos:start="2808:58" pos:end="2808:97"><type pos:start="2808:58" pos:end="2808:97"><specifier pos:start="2808:58" pos:end="2808:62">final</specifier> <name pos:start="2808:64" pos:end="2808:89"><name pos:start="2808:64" pos:end="2808:87">ZipEntryTransformerEntry</name><index pos:start="2808:88" pos:end="2808:89">[]</index></name></type> <name pos:start="2808:91" pos:end="2808:97">entries</name></decl></parameter>)</parameter_list> <block pos:start="2808:100" pos:end="2814:3">{<block_content pos:start="2809:5" pos:end="2813:7">
    <return pos:start="2809:5" pos:end="2813:7">return <expr pos:start="2809:12" pos:end="2813:6"><call pos:start="2809:12" pos:end="2813:6"><name pos:start="2809:12" pos:end="2809:25">operateInPlace</name><argument_list pos:start="2809:26" pos:end="2813:6">(<argument pos:start="2809:27" pos:end="2809:29"><expr pos:start="2809:27" pos:end="2809:29"><name pos:start="2809:27" pos:end="2809:29">zip</name></expr></argument>, <argument pos:start="2809:32" pos:end="2813:5"><expr pos:start="2809:32" pos:end="2813:5"><operator pos:start="2809:32" pos:end="2809:34">new</operator> <class pos:start="2809:36" pos:end="2813:5"><super pos:start="2809:36" pos:end="2809:48"><name pos:start="2809:36" pos:end="2809:48">InPlaceAction</name></super><argument_list pos:start="2809:49" pos:end="2809:50">()</argument_list> <block pos:start="2809:52" pos:end="2813:5">{
      <function pos:start="2810:7" pos:end="2812:7"><type pos:start="2810:7" pos:end="2810:20"><specifier pos:start="2810:7" pos:end="2810:12">public</specifier> <name pos:start="2810:14" pos:end="2810:20">boolean</name></type> <name pos:start="2810:22" pos:end="2810:24">act</name><parameter_list pos:start="2810:25" pos:end="2810:38">(<parameter pos:start="2810:26" pos:end="2810:37"><decl pos:start="2810:26" pos:end="2810:37"><type pos:start="2810:26" pos:end="2810:29"><name pos:start="2810:26" pos:end="2810:29">File</name></type> <name pos:start="2810:31" pos:end="2810:37">tmpFile</name></decl></parameter>)</parameter_list> <block pos:start="2810:40" pos:end="2812:7">{<block_content pos:start="2811:9" pos:end="2811:55">
        <return pos:start="2811:9" pos:end="2811:55">return <expr pos:start="2811:16" pos:end="2811:54"><call pos:start="2811:16" pos:end="2811:54"><name pos:start="2811:16" pos:end="2811:31">transformEntries</name><argument_list pos:start="2811:32" pos:end="2811:54">(<argument pos:start="2811:33" pos:end="2811:35"><expr pos:start="2811:33" pos:end="2811:35"><name pos:start="2811:33" pos:end="2811:35">zip</name></expr></argument>, <argument pos:start="2811:38" pos:end="2811:44"><expr pos:start="2811:38" pos:end="2811:44"><name pos:start="2811:38" pos:end="2811:44">entries</name></expr></argument>, <argument pos:start="2811:47" pos:end="2811:53"><expr pos:start="2811:47" pos:end="2811:53"><name pos:start="2811:47" pos:end="2811:53">tmpFile</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2816:3" pos:end="2828:5">/**
   * Copies an existing ZIP file and transforms a given entry in it.
   *
   * @param is
   *          a ZIP input stream.
   * @param path
   *          new ZIP entry path.
   * @param transformer
   *          transformer for the given ZIP entry.
   * @param os
   *          a ZIP output stream.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2829:3" pos:end="2831:3"><type pos:start="2829:3" pos:end="2829:23"><specifier pos:start="2829:3" pos:end="2829:8">public</specifier> <specifier pos:start="2829:10" pos:end="2829:15">static</specifier> <name pos:start="2829:17" pos:end="2829:23">boolean</name></type> <name pos:start="2829:25" pos:end="2829:38">transformEntry</name><parameter_list pos:start="2829:39" pos:end="2829:117">(<parameter pos:start="2829:40" pos:end="2829:53"><decl pos:start="2829:40" pos:end="2829:53"><type pos:start="2829:40" pos:end="2829:53"><name pos:start="2829:40" pos:end="2829:50">InputStream</name></type> <name pos:start="2829:52" pos:end="2829:53">is</name></decl></parameter>, <parameter pos:start="2829:56" pos:end="2829:66"><decl pos:start="2829:56" pos:end="2829:66"><type pos:start="2829:56" pos:end="2829:66"><name pos:start="2829:56" pos:end="2829:61">String</name></type> <name pos:start="2829:63" pos:end="2829:66">path</name></decl></parameter>, <parameter pos:start="2829:69" pos:end="2829:99"><decl pos:start="2829:69" pos:end="2829:99"><type pos:start="2829:69" pos:end="2829:99"><name pos:start="2829:69" pos:end="2829:87">ZipEntryTransformer</name></type> <name pos:start="2829:89" pos:end="2829:99">transformer</name></decl></parameter>, <parameter pos:start="2829:102" pos:end="2829:116"><decl pos:start="2829:102" pos:end="2829:116"><type pos:start="2829:102" pos:end="2829:116"><name pos:start="2829:102" pos:end="2829:113">OutputStream</name></type> <name pos:start="2829:115" pos:end="2829:116">os</name></decl></parameter>)</parameter_list> <block pos:start="2829:119" pos:end="2831:3">{<block_content pos:start="2830:5" pos:end="2830:83">
    <return pos:start="2830:5" pos:end="2830:83">return <expr pos:start="2830:12" pos:end="2830:82"><call pos:start="2830:12" pos:end="2830:82"><name pos:start="2830:12" pos:end="2830:25">transformEntry</name><argument_list pos:start="2830:26" pos:end="2830:82">(<argument pos:start="2830:27" pos:end="2830:28"><expr pos:start="2830:27" pos:end="2830:28"><name pos:start="2830:27" pos:end="2830:28">is</name></expr></argument>, <argument pos:start="2830:31" pos:end="2830:77"><expr pos:start="2830:31" pos:end="2830:77"><operator pos:start="2830:31" pos:end="2830:33">new</operator> <call pos:start="2830:35" pos:end="2830:77"><name pos:start="2830:35" pos:end="2830:58">ZipEntryTransformerEntry</name><argument_list pos:start="2830:59" pos:end="2830:77">(<argument pos:start="2830:60" pos:end="2830:63"><expr pos:start="2830:60" pos:end="2830:63"><name pos:start="2830:60" pos:end="2830:63">path</name></expr></argument>, <argument pos:start="2830:66" pos:end="2830:76"><expr pos:start="2830:66" pos:end="2830:76"><name pos:start="2830:66" pos:end="2830:76">transformer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2830:80" pos:end="2830:81"><expr pos:start="2830:80" pos:end="2830:81"><name pos:start="2830:80" pos:end="2830:81">os</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2833:3" pos:end="2843:5">/**
   * Copies an existing ZIP file and transforms a given entry in it.
   *
   * @param is
   *          a ZIP input stream.
   * @param entry
   *          transformer for a ZIP entry.
   * @param os
   *          a ZIP output stream.
   * @return &lt;code&gt;true&lt;/code&gt; if the entry was replaced.
   */</comment>
  <function pos:start="2844:3" pos:end="2846:3"><type pos:start="2844:3" pos:end="2844:23"><specifier pos:start="2844:3" pos:end="2844:8">public</specifier> <specifier pos:start="2844:10" pos:end="2844:15">static</specifier> <name pos:start="2844:17" pos:end="2844:23">boolean</name></type> <name pos:start="2844:25" pos:end="2844:38">transformEntry</name><parameter_list pos:start="2844:39" pos:end="2844:103">(<parameter pos:start="2844:40" pos:end="2844:53"><decl pos:start="2844:40" pos:end="2844:53"><type pos:start="2844:40" pos:end="2844:53"><name pos:start="2844:40" pos:end="2844:50">InputStream</name></type> <name pos:start="2844:52" pos:end="2844:53">is</name></decl></parameter>, <parameter pos:start="2844:56" pos:end="2844:85"><decl pos:start="2844:56" pos:end="2844:85"><type pos:start="2844:56" pos:end="2844:85"><name pos:start="2844:56" pos:end="2844:79">ZipEntryTransformerEntry</name></type> <name pos:start="2844:81" pos:end="2844:85">entry</name></decl></parameter>, <parameter pos:start="2844:88" pos:end="2844:102"><decl pos:start="2844:88" pos:end="2844:102"><type pos:start="2844:88" pos:end="2844:102"><name pos:start="2844:88" pos:end="2844:99">OutputStream</name></type> <name pos:start="2844:101" pos:end="2844:102">os</name></decl></parameter>)</parameter_list> <block pos:start="2844:105" pos:end="2846:3">{<block_content pos:start="2845:5" pos:end="2845:78">
    <return pos:start="2845:5" pos:end="2845:78">return <expr pos:start="2845:12" pos:end="2845:77"><call pos:start="2845:12" pos:end="2845:77"><name pos:start="2845:12" pos:end="2845:27">transformEntries</name><argument_list pos:start="2845:28" pos:end="2845:77">(<argument pos:start="2845:29" pos:end="2845:30"><expr pos:start="2845:29" pos:end="2845:30"><name pos:start="2845:29" pos:end="2845:30">is</name></expr></argument>, <argument pos:start="2845:33" pos:end="2845:72"><expr pos:start="2845:33" pos:end="2845:72"><operator pos:start="2845:33" pos:end="2845:35">new</operator> <name pos:start="2845:37" pos:end="2845:62"><name pos:start="2845:37" pos:end="2845:60">ZipEntryTransformerEntry</name><index pos:start="2845:61" pos:end="2845:62">[]</index></name> <block pos:start="2845:64" pos:end="2845:72">{ <expr pos:start="2845:66" pos:end="2845:70"><name pos:start="2845:66" pos:end="2845:70">entry</name></expr> }</block></expr></argument>, <argument pos:start="2845:75" pos:end="2845:76"><expr pos:start="2845:75" pos:end="2845:76"><name pos:start="2845:75" pos:end="2845:76">os</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2848:3" pos:end="2858:5">/**
   * Copies an existing ZIP file and transforms the given entries in it.
   *
   * @param is
   *          a ZIP input stream.
   * @param entries
   *          ZIP entry transformers.
   * @param os
   *          a ZIP output stream.
   * @return &lt;code&gt;true&lt;/code&gt; if at least one entry was replaced.
   */</comment>
  <function pos:start="2859:3" pos:end="2875:3"><type pos:start="2859:3" pos:end="2859:23"><specifier pos:start="2859:3" pos:end="2859:8">public</specifier> <specifier pos:start="2859:10" pos:end="2859:15">static</specifier> <name pos:start="2859:17" pos:end="2859:23">boolean</name></type> <name pos:start="2859:25" pos:end="2859:40">transformEntries</name><parameter_list pos:start="2859:41" pos:end="2859:109">(<parameter pos:start="2859:42" pos:end="2859:55"><decl pos:start="2859:42" pos:end="2859:55"><type pos:start="2859:42" pos:end="2859:55"><name pos:start="2859:42" pos:end="2859:52">InputStream</name></type> <name pos:start="2859:54" pos:end="2859:55">is</name></decl></parameter>, <parameter pos:start="2859:58" pos:end="2859:91"><decl pos:start="2859:58" pos:end="2859:91"><type pos:start="2859:58" pos:end="2859:91"><name pos:start="2859:58" pos:end="2859:83"><name pos:start="2859:58" pos:end="2859:81">ZipEntryTransformerEntry</name><index pos:start="2859:82" pos:end="2859:83">[]</index></name></type> <name pos:start="2859:85" pos:end="2859:91">entries</name></decl></parameter>, <parameter pos:start="2859:94" pos:end="2859:108"><decl pos:start="2859:94" pos:end="2859:108"><type pos:start="2859:94" pos:end="2859:108"><name pos:start="2859:94" pos:end="2859:105">OutputStream</name></type> <name pos:start="2859:107" pos:end="2859:108">os</name></decl></parameter>)</parameter_list> <block pos:start="2859:111" pos:end="2875:3">{<block_content pos:start="2860:5" pos:end="2874:5">
    <if_stmt pos:start="2860:5" pos:end="2861:113"><if pos:start="2860:5" pos:end="2861:113">if <condition pos:start="2860:8" pos:end="2860:29">(<expr pos:start="2860:9" pos:end="2860:28"><call pos:start="2860:9" pos:end="2860:28"><name pos:start="2860:9" pos:end="2860:26"><name pos:start="2860:9" pos:end="2860:11">log</name><operator pos:start="2860:12" pos:end="2860:12">.</operator><name pos:start="2860:13" pos:end="2860:26">isDebugEnabled</name></name><argument_list pos:start="2860:27" pos:end="2860:28">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2861:7" pos:end="2861:113"><block_content pos:start="2861:7" pos:end="2861:113">
      <expr_stmt pos:start="2861:7" pos:end="2861:113"><expr pos:start="2861:7" pos:end="2861:112"><call pos:start="2861:7" pos:end="2861:112"><name pos:start="2861:7" pos:end="2861:15"><name pos:start="2861:7" pos:end="2861:9">log</name><operator pos:start="2861:10" pos:end="2861:10">.</operator><name pos:start="2861:11" pos:end="2861:15">debug</name></name><argument_list pos:start="2861:16" pos:end="2861:112">(<argument pos:start="2861:17" pos:end="2861:111"><expr pos:start="2861:17" pos:end="2861:111"><literal type="string" pos:start="2861:17" pos:end="2861:27">"Copying '"</literal> <operator pos:start="2861:29" pos:end="2861:29">+</operator> <name pos:start="2861:31" pos:end="2861:32">is</name> <operator pos:start="2861:34" pos:end="2861:34">+</operator> <literal type="string" pos:start="2861:36" pos:end="2861:43">"' to '"</literal> <operator pos:start="2861:45" pos:end="2861:45">+</operator> <name pos:start="2861:47" pos:end="2861:48">os</name> <operator pos:start="2861:50" pos:end="2861:50">+</operator> <literal type="string" pos:start="2861:52" pos:end="2861:80">"' and transforming entries "</literal> <operator pos:start="2861:82" pos:end="2861:82">+</operator> <call pos:start="2861:84" pos:end="2861:105"><name pos:start="2861:84" pos:end="2861:96"><name pos:start="2861:84" pos:end="2861:89">Arrays</name><operator pos:start="2861:90" pos:end="2861:90">.</operator><name pos:start="2861:91" pos:end="2861:96">asList</name></name><argument_list pos:start="2861:97" pos:end="2861:105">(<argument pos:start="2861:98" pos:end="2861:104"><expr pos:start="2861:98" pos:end="2861:104"><name pos:start="2861:98" pos:end="2861:104">entries</name></expr></argument>)</argument_list></call> <operator pos:start="2861:107" pos:end="2861:107">+</operator> <literal type="string" pos:start="2861:109" pos:end="2861:111">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <try pos:start="2863:5" pos:end="2874:5">try <block pos:start="2863:9" pos:end="2871:5">{<block_content pos:start="2864:7" pos:end="2870:28">
      <decl_stmt pos:start="2864:7" pos:end="2864:52"><decl pos:start="2864:7" pos:end="2864:51"><type pos:start="2864:7" pos:end="2864:21"><name pos:start="2864:7" pos:end="2864:21">ZipOutputStream</name></type> <name pos:start="2864:23" pos:end="2864:25">out</name> <init pos:start="2864:27" pos:end="2864:51">= <expr pos:start="2864:29" pos:end="2864:51"><operator pos:start="2864:29" pos:end="2864:31">new</operator> <call pos:start="2864:33" pos:end="2864:51"><name pos:start="2864:33" pos:end="2864:47">ZipOutputStream</name><argument_list pos:start="2864:48" pos:end="2864:51">(<argument pos:start="2864:49" pos:end="2864:50"><expr pos:start="2864:49" pos:end="2864:50"><name pos:start="2864:49" pos:end="2864:50">os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="2865:7" pos:end="2865:104"><decl pos:start="2865:7" pos:end="2865:103"><type pos:start="2865:7" pos:end="2865:33"><name pos:start="2865:7" pos:end="2865:33">TransformerZipEntryCallback</name></type> <name pos:start="2865:35" pos:end="2865:40">action</name> <init pos:start="2865:42" pos:end="2865:103">= <expr pos:start="2865:44" pos:end="2865:103"><operator pos:start="2865:44" pos:end="2865:46">new</operator> <call pos:start="2865:48" pos:end="2865:103"><name pos:start="2865:48" pos:end="2865:74">TransformerZipEntryCallback</name><argument_list pos:start="2865:75" pos:end="2865:103">(<argument pos:start="2865:76" pos:end="2865:97"><expr pos:start="2865:76" pos:end="2865:97"><call pos:start="2865:76" pos:end="2865:97"><name pos:start="2865:76" pos:end="2865:88"><name pos:start="2865:76" pos:end="2865:81">Arrays</name><operator pos:start="2865:82" pos:end="2865:82">.</operator><name pos:start="2865:83" pos:end="2865:88">asList</name></name><argument_list pos:start="2865:89" pos:end="2865:97">(<argument pos:start="2865:90" pos:end="2865:96"><expr pos:start="2865:90" pos:end="2865:96"><name pos:start="2865:90" pos:end="2865:96">entries</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2865:100" pos:end="2865:102"><expr pos:start="2865:100" pos:end="2865:102"><name pos:start="2865:100" pos:end="2865:102">out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt pos:start="2866:7" pos:end="2866:26"><expr pos:start="2866:7" pos:end="2866:25"><call pos:start="2866:7" pos:end="2866:25"><name pos:start="2866:7" pos:end="2866:13">iterate</name><argument_list pos:start="2866:14" pos:end="2866:25">(<argument pos:start="2866:15" pos:end="2866:16"><expr pos:start="2866:15" pos:end="2866:16"><name pos:start="2866:15" pos:end="2866:16">is</name></expr></argument>, <argument pos:start="2866:19" pos:end="2866:24"><expr pos:start="2866:19" pos:end="2866:24"><name pos:start="2866:19" pos:end="2866:24">action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line" pos:start="2867:7" pos:end="2867:79">// Finishes writing the contents of the ZIP output stream without closing</comment>
      <comment type="line" pos:start="2868:7" pos:end="2868:31">// the underlying stream.</comment>
      <expr_stmt pos:start="2869:7" pos:end="2869:19"><expr pos:start="2869:7" pos:end="2869:18"><call pos:start="2869:7" pos:end="2869:18"><name pos:start="2869:7" pos:end="2869:16"><name pos:start="2869:7" pos:end="2869:9">out</name><operator pos:start="2869:10" pos:end="2869:10">.</operator><name pos:start="2869:11" pos:end="2869:16">finish</name></name><argument_list pos:start="2869:17" pos:end="2869:18">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="2870:7" pos:end="2870:28">return <expr pos:start="2870:14" pos:end="2870:27"><call pos:start="2870:14" pos:end="2870:27"><name pos:start="2870:14" pos:end="2870:25"><name pos:start="2870:14" pos:end="2870:19">action</name><operator pos:start="2870:20" pos:end="2870:20">.</operator><name pos:start="2870:21" pos:end="2870:25">found</name></name><argument_list pos:start="2870:26" pos:end="2870:27">()</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="2872:5" pos:end="2874:5">catch <parameter_list pos:start="2872:11" pos:end="2872:25">(<parameter pos:start="2872:12" pos:end="2872:24"><decl pos:start="2872:12" pos:end="2872:24"><type pos:start="2872:12" pos:end="2872:24"><name pos:start="2872:12" pos:end="2872:22">IOException</name></type> <name pos:start="2872:24" pos:end="2872:24">e</name></decl></parameter>)</parameter_list> <block pos:start="2872:27" pos:end="2874:5">{<block_content pos:start="2873:7" pos:end="2873:40">
      <throw pos:start="2873:7" pos:end="2873:40">throw <expr pos:start="2873:13" pos:end="2873:39"><call pos:start="2873:13" pos:end="2873:39"><name pos:start="2873:13" pos:end="2873:36"><name pos:start="2873:13" pos:end="2873:28">ZipExceptionUtil</name><operator pos:start="2873:29" pos:end="2873:29">.</operator><name pos:start="2873:30" pos:end="2873:36">rethrow</name></name><argument_list pos:start="2873:37" pos:end="2873:39">(<argument pos:start="2873:38" pos:end="2873:38"><expr pos:start="2873:38" pos:end="2873:38"><name pos:start="2873:38" pos:end="2873:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class pos:start="2877:3" pos:end="2912:3"><specifier pos:start="2877:3" pos:end="2877:9">private</specifier> <specifier pos:start="2877:11" pos:end="2877:16">static</specifier> class <name pos:start="2877:24" pos:end="2877:50">TransformerZipEntryCallback</name> <super_list pos:start="2877:52" pos:end="2877:78"><implements pos:start="2877:52" pos:end="2877:78">implements <super pos:start="2877:63" pos:end="2877:78"><name pos:start="2877:63" pos:end="2877:78">ZipEntryCallback</name></super></implements></super_list> <block pos:start="2877:80" pos:end="2912:3">{

    <decl_stmt pos:start="2879:5" pos:end="2879:63"><decl pos:start="2879:5" pos:end="2879:62"><type pos:start="2879:5" pos:end="2879:50"><specifier pos:start="2879:5" pos:end="2879:11">private</specifier> <specifier pos:start="2879:13" pos:end="2879:17">final</specifier> <name pos:start="2879:19" pos:end="2879:50"><name pos:start="2879:19" pos:end="2879:21">Map</name><argument_list type="generic" pos:start="2879:22" pos:end="2879:50">&lt;<argument pos:start="2879:23" pos:end="2879:28"><name pos:start="2879:23" pos:end="2879:28">String</name></argument>, <argument pos:start="2879:31" pos:end="2879:49"><name pos:start="2879:31" pos:end="2879:49">ZipEntryTransformer</name></argument>&gt;</argument_list></name></type> <name pos:start="2879:52" pos:end="2879:62">entryByPath</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2880:5" pos:end="2880:33"><decl pos:start="2880:5" pos:end="2880:32"><type pos:start="2880:5" pos:end="2880:21"><specifier pos:start="2880:5" pos:end="2880:11">private</specifier> <specifier pos:start="2880:13" pos:end="2880:17">final</specifier> <name pos:start="2880:19" pos:end="2880:21">int</name></type> <name pos:start="2880:23" pos:end="2880:32">entryCount</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2881:5" pos:end="2881:38"><decl pos:start="2881:5" pos:end="2881:37"><type pos:start="2881:5" pos:end="2881:33"><specifier pos:start="2881:5" pos:end="2881:11">private</specifier> <specifier pos:start="2881:13" pos:end="2881:17">final</specifier> <name pos:start="2881:19" pos:end="2881:33">ZipOutputStream</name></type> <name pos:start="2881:35" pos:end="2881:37">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2882:5" pos:end="2882:60"><decl pos:start="2882:5" pos:end="2882:59"><type pos:start="2882:5" pos:end="2882:29"><specifier pos:start="2882:5" pos:end="2882:11">private</specifier> <specifier pos:start="2882:13" pos:end="2882:17">final</specifier> <name pos:start="2882:19" pos:end="2882:29"><name pos:start="2882:19" pos:end="2882:21">Set</name><argument_list type="generic" pos:start="2882:22" pos:end="2882:29">&lt;<argument pos:start="2882:23" pos:end="2882:28"><name pos:start="2882:23" pos:end="2882:28">String</name></argument>&gt;</argument_list></name></type> <name pos:start="2882:31" pos:end="2882:35">names</name> <init pos:start="2882:37" pos:end="2882:59">= <expr pos:start="2882:39" pos:end="2882:59"><operator pos:start="2882:39" pos:end="2882:41">new</operator> <call pos:start="2882:43" pos:end="2882:59"><name pos:start="2882:43" pos:end="2882:57"><name pos:start="2882:43" pos:end="2882:49">HashSet</name><argument_list type="generic" pos:start="2882:50" pos:end="2882:57">&lt;<argument pos:start="2882:51" pos:end="2882:56"><name pos:start="2882:51" pos:end="2882:56">String</name></argument>&gt;</argument_list></name><argument_list pos:start="2882:58" pos:end="2882:59">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor pos:start="2884:5" pos:end="2888:5"><specifier pos:start="2884:5" pos:end="2884:10">public</specifier> <name pos:start="2884:12" pos:end="2884:38">TransformerZipEntryCallback</name><parameter_list pos:start="2884:39" pos:end="2884:99">(<parameter pos:start="2884:40" pos:end="2884:77"><decl pos:start="2884:40" pos:end="2884:77"><type pos:start="2884:40" pos:end="2884:77"><name pos:start="2884:40" pos:end="2884:69"><name pos:start="2884:40" pos:end="2884:43">List</name><argument_list type="generic" pos:start="2884:44" pos:end="2884:69">&lt;<argument pos:start="2884:45" pos:end="2884:68"><name pos:start="2884:45" pos:end="2884:68">ZipEntryTransformerEntry</name></argument>&gt;</argument_list></name></type> <name pos:start="2884:71" pos:end="2884:77">entries</name></decl></parameter>, <parameter pos:start="2884:80" pos:end="2884:98"><decl pos:start="2884:80" pos:end="2884:98"><type pos:start="2884:80" pos:end="2884:98"><name pos:start="2884:80" pos:end="2884:94">ZipOutputStream</name></type> <name pos:start="2884:96" pos:end="2884:98">out</name></decl></parameter>)</parameter_list> <block pos:start="2884:101" pos:end="2888:5">{<block_content pos:start="2885:7" pos:end="2887:21">
      <expr_stmt pos:start="2885:7" pos:end="2885:48"><expr pos:start="2885:7" pos:end="2885:47"><name pos:start="2885:7" pos:end="2885:17">entryByPath</name> <operator pos:start="2885:19" pos:end="2885:19">=</operator> <call pos:start="2885:21" pos:end="2885:47"><name pos:start="2885:21" pos:end="2885:38">transformersByPath</name><argument_list pos:start="2885:39" pos:end="2885:47">(<argument pos:start="2885:40" pos:end="2885:46"><expr pos:start="2885:40" pos:end="2885:46"><name pos:start="2885:40" pos:end="2885:46">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="2886:7" pos:end="2886:38"><expr pos:start="2886:7" pos:end="2886:37"><name pos:start="2886:7" pos:end="2886:16">entryCount</name> <operator pos:start="2886:18" pos:end="2886:18">=</operator> <call pos:start="2886:20" pos:end="2886:37"><name pos:start="2886:20" pos:end="2886:35"><name pos:start="2886:20" pos:end="2886:30">entryByPath</name><operator pos:start="2886:31" pos:end="2886:31">.</operator><name pos:start="2886:32" pos:end="2886:35">size</name></name><argument_list pos:start="2886:36" pos:end="2886:37">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="2887:7" pos:end="2887:21"><expr pos:start="2887:7" pos:end="2887:20"><name pos:start="2887:7" pos:end="2887:14"><name pos:start="2887:7" pos:end="2887:10">this</name><operator pos:start="2887:11" pos:end="2887:11">.</operator><name pos:start="2887:12" pos:end="2887:14">out</name></name> <operator pos:start="2887:16" pos:end="2887:16">=</operator> <name pos:start="2887:18" pos:end="2887:20">out</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="2890:5" pos:end="2903:5"><type pos:start="2890:5" pos:end="2890:15"><specifier pos:start="2890:5" pos:end="2890:10">public</specifier> <name pos:start="2890:12" pos:end="2890:15">void</name></type> <name pos:start="2890:17" pos:end="2890:23">process</name><parameter_list pos:start="2890:24" pos:end="2890:58">(<parameter pos:start="2890:25" pos:end="2890:38"><decl pos:start="2890:25" pos:end="2890:38"><type pos:start="2890:25" pos:end="2890:38"><name pos:start="2890:25" pos:end="2890:35">InputStream</name></type> <name pos:start="2890:37" pos:end="2890:38">in</name></decl></parameter>, <parameter pos:start="2890:41" pos:end="2890:57"><decl pos:start="2890:41" pos:end="2890:57"><type pos:start="2890:41" pos:end="2890:57"><name pos:start="2890:41" pos:end="2890:48">ZipEntry</name></type> <name pos:start="2890:50" pos:end="2890:57">zipEntry</name></decl></parameter>)</parameter_list> <throws pos:start="2890:60" pos:end="2890:77">throws <argument pos:start="2890:67" pos:end="2890:77"><expr pos:start="2890:67" pos:end="2890:77"><name pos:start="2890:67" pos:end="2890:77">IOException</name></expr></argument></throws> <block pos:start="2890:79" pos:end="2903:5">{<block_content pos:start="2891:7" pos:end="2902:7">
      <if_stmt pos:start="2891:7" pos:end="2902:7"><if pos:start="2891:7" pos:end="2899:7">if <condition pos:start="2891:10" pos:end="2891:40">(<expr pos:start="2891:11" pos:end="2891:39"><call pos:start="2891:11" pos:end="2891:39"><name pos:start="2891:11" pos:end="2891:19"><name pos:start="2891:11" pos:end="2891:15">names</name><operator pos:start="2891:16" pos:end="2891:16">.</operator><name pos:start="2891:17" pos:end="2891:19">add</name></name><argument_list pos:start="2891:20" pos:end="2891:39">(<argument pos:start="2891:21" pos:end="2891:38"><expr pos:start="2891:21" pos:end="2891:38"><call pos:start="2891:21" pos:end="2891:38"><name pos:start="2891:21" pos:end="2891:36"><name pos:start="2891:21" pos:end="2891:28">zipEntry</name><operator pos:start="2891:29" pos:end="2891:29">.</operator><name pos:start="2891:30" pos:end="2891:36">getName</name></name><argument_list pos:start="2891:37" pos:end="2891:38">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2891:42" pos:end="2899:7">{<block_content pos:start="2892:9" pos:end="2898:9">
        <decl_stmt pos:start="2892:9" pos:end="2892:97"><decl pos:start="2892:9" pos:end="2892:96"><type pos:start="2892:9" pos:end="2892:27"><name pos:start="2892:9" pos:end="2892:27">ZipEntryTransformer</name></type> <name pos:start="2892:29" pos:end="2892:33">entry</name> <init pos:start="2892:35" pos:end="2892:96">= <expr pos:start="2892:37" pos:end="2892:96"><operator pos:start="2892:37" pos:end="2892:37">(</operator><name pos:start="2892:38" pos:end="2892:56">ZipEntryTransformer</name><operator pos:start="2892:57" pos:end="2892:57">)</operator> <call pos:start="2892:59" pos:end="2892:96"><name pos:start="2892:59" pos:end="2892:76"><name pos:start="2892:59" pos:end="2892:69">entryByPath</name><operator pos:start="2892:70" pos:end="2892:70">.</operator><name pos:start="2892:71" pos:end="2892:76">remove</name></name><argument_list pos:start="2892:77" pos:end="2892:96">(<argument pos:start="2892:78" pos:end="2892:95"><expr pos:start="2892:78" pos:end="2892:95"><call pos:start="2892:78" pos:end="2892:95"><name pos:start="2892:78" pos:end="2892:93"><name pos:start="2892:78" pos:end="2892:85">zipEntry</name><operator pos:start="2892:86" pos:end="2892:86">.</operator><name pos:start="2892:87" pos:end="2892:93">getName</name></name><argument_list pos:start="2892:94" pos:end="2892:95">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2893:9" pos:end="2898:9"><if pos:start="2893:9" pos:end="2895:9">if <condition pos:start="2893:12" pos:end="2893:26">(<expr pos:start="2893:13" pos:end="2893:25"><name pos:start="2893:13" pos:end="2893:17">entry</name> <operator pos:start="2893:19" pos:end="2893:20">!=</operator> <literal type="null" pos:start="2893:22" pos:end="2893:25">null</literal></expr>)</condition> <block pos:start="2893:28" pos:end="2895:9">{<block_content pos:start="2894:11" pos:end="2894:45">
          <expr_stmt pos:start="2894:11" pos:end="2894:45"><expr pos:start="2894:11" pos:end="2894:44"><call pos:start="2894:11" pos:end="2894:44"><name pos:start="2894:11" pos:end="2894:25"><name pos:start="2894:11" pos:end="2894:15">entry</name><operator pos:start="2894:16" pos:end="2894:16">.</operator><name pos:start="2894:17" pos:end="2894:25">transform</name></name><argument_list pos:start="2894:26" pos:end="2894:44">(<argument pos:start="2894:27" pos:end="2894:28"><expr pos:start="2894:27" pos:end="2894:28"><name pos:start="2894:27" pos:end="2894:28">in</name></expr></argument>, <argument pos:start="2894:31" pos:end="2894:38"><expr pos:start="2894:31" pos:end="2894:38"><name pos:start="2894:31" pos:end="2894:38">zipEntry</name></expr></argument>, <argument pos:start="2894:41" pos:end="2894:43"><expr pos:start="2894:41" pos:end="2894:43"><name pos:start="2894:41" pos:end="2894:43">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2896:9" pos:end="2898:9">else <block pos:start="2896:14" pos:end="2898:9">{<block_content pos:start="2897:11" pos:end="2897:52">
          <expr_stmt pos:start="2897:11" pos:end="2897:52"><expr pos:start="2897:11" pos:end="2897:51"><call pos:start="2897:11" pos:end="2897:51"><name pos:start="2897:11" pos:end="2897:32"><name pos:start="2897:11" pos:end="2897:22">ZipEntryUtil</name><operator pos:start="2897:23" pos:end="2897:23">.</operator><name pos:start="2897:24" pos:end="2897:32">copyEntry</name></name><argument_list pos:start="2897:33" pos:end="2897:51">(<argument pos:start="2897:34" pos:end="2897:41"><expr pos:start="2897:34" pos:end="2897:41"><name pos:start="2897:34" pos:end="2897:41">zipEntry</name></expr></argument>, <argument pos:start="2897:44" pos:end="2897:45"><expr pos:start="2897:44" pos:end="2897:45"><name pos:start="2897:44" pos:end="2897:45">in</name></expr></argument>, <argument pos:start="2897:48" pos:end="2897:50"><expr pos:start="2897:48" pos:end="2897:50"><name pos:start="2897:48" pos:end="2897:50">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if>
      <if type="elseif" pos:start="2900:7" pos:end="2902:7">else if <condition pos:start="2900:15" pos:end="2900:36">(<expr pos:start="2900:16" pos:end="2900:35"><call pos:start="2900:16" pos:end="2900:35"><name pos:start="2900:16" pos:end="2900:33"><name pos:start="2900:16" pos:end="2900:18">log</name><operator pos:start="2900:19" pos:end="2900:19">.</operator><name pos:start="2900:20" pos:end="2900:33">isDebugEnabled</name></name><argument_list pos:start="2900:34" pos:end="2900:35">()</argument_list></call></expr>)</condition> <block pos:start="2900:38" pos:end="2902:7">{<block_content pos:start="2901:9" pos:end="2901:61">
        <expr_stmt pos:start="2901:9" pos:end="2901:61"><expr pos:start="2901:9" pos:end="2901:60"><call pos:start="2901:9" pos:end="2901:60"><name pos:start="2901:9" pos:end="2901:17"><name pos:start="2901:9" pos:end="2901:11">log</name><operator pos:start="2901:12" pos:end="2901:12">.</operator><name pos:start="2901:13" pos:end="2901:17">debug</name></name><argument_list pos:start="2901:18" pos:end="2901:60">(<argument pos:start="2901:19" pos:end="2901:39"><expr pos:start="2901:19" pos:end="2901:39"><literal type="string" pos:start="2901:19" pos:end="2901:39">"Duplicate entry: {}"</literal></expr></argument>, <argument pos:start="2901:42" pos:end="2901:59"><expr pos:start="2901:42" pos:end="2901:59"><call pos:start="2901:42" pos:end="2901:59"><name pos:start="2901:42" pos:end="2901:57"><name pos:start="2901:42" pos:end="2901:49">zipEntry</name><operator pos:start="2901:50" pos:end="2901:50">.</operator><name pos:start="2901:51" pos:end="2901:57">getName</name></name><argument_list pos:start="2901:58" pos:end="2901:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="2905:5" pos:end="2907:7">/**
     * @return &lt;code&gt;true&lt;/code&gt; if at least one entry was replaced.
     */</comment>
    <function pos:start="2908:5" pos:end="2910:5"><type pos:start="2908:5" pos:end="2908:18"><specifier pos:start="2908:5" pos:end="2908:10">public</specifier> <name pos:start="2908:12" pos:end="2908:18">boolean</name></type> <name pos:start="2908:20" pos:end="2908:24">found</name><parameter_list pos:start="2908:25" pos:end="2908:26">()</parameter_list> <block pos:start="2908:28" pos:end="2910:5">{<block_content pos:start="2909:7" pos:end="2909:45">
      <return pos:start="2909:7" pos:end="2909:45">return <expr pos:start="2909:14" pos:end="2909:44"><call pos:start="2909:14" pos:end="2909:31"><name pos:start="2909:14" pos:end="2909:29"><name pos:start="2909:14" pos:end="2909:24">entryByPath</name><operator pos:start="2909:25" pos:end="2909:25">.</operator><name pos:start="2909:26" pos:end="2909:29">size</name></name><argument_list pos:start="2909:30" pos:end="2909:31">()</argument_list></call> <operator pos:start="2909:33" pos:end="2909:33">&lt;</operator> <name pos:start="2909:35" pos:end="2909:44">entryCount</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <comment type="block" format="javadoc" pos:start="2914:3" pos:end="2916:5">/**
   * @return transformers by path.
   */</comment>
  <function pos:start="2917:3" pos:end="2923:3"><type pos:start="2917:3" pos:end="2917:41"><specifier pos:start="2917:3" pos:end="2917:8">static</specifier> <name pos:start="2917:10" pos:end="2917:41"><name pos:start="2917:10" pos:end="2917:12">Map</name><argument_list type="generic" pos:start="2917:13" pos:end="2917:41">&lt;<argument pos:start="2917:14" pos:end="2917:19"><name pos:start="2917:14" pos:end="2917:19">String</name></argument>, <argument pos:start="2917:22" pos:end="2917:40"><name pos:start="2917:22" pos:end="2917:40">ZipEntryTransformer</name></argument>&gt;</argument_list></name></type> <name pos:start="2917:43" pos:end="2917:60">transformersByPath</name><parameter_list pos:start="2917:61" pos:end="2917:100">(<parameter pos:start="2917:62" pos:end="2917:99"><decl pos:start="2917:62" pos:end="2917:99"><type pos:start="2917:62" pos:end="2917:91"><name pos:start="2917:62" pos:end="2917:91"><name pos:start="2917:62" pos:end="2917:65">List</name><argument_list type="generic" pos:start="2917:66" pos:end="2917:91">&lt;<argument pos:start="2917:67" pos:end="2917:90"><name pos:start="2917:67" pos:end="2917:90">ZipEntryTransformerEntry</name></argument>&gt;</argument_list></name></type> <name pos:start="2917:93" pos:end="2917:99">entries</name></decl></parameter>)</parameter_list> <block pos:start="2917:102" pos:end="2923:3">{<block_content pos:start="2918:5" pos:end="2922:18">
    <decl_stmt pos:start="2918:5" pos:end="2918:89"><decl pos:start="2918:5" pos:end="2918:88"><type pos:start="2918:5" pos:end="2918:36"><name pos:start="2918:5" pos:end="2918:36"><name pos:start="2918:5" pos:end="2918:7">Map</name><argument_list type="generic" pos:start="2918:8" pos:end="2918:36">&lt;<argument pos:start="2918:9" pos:end="2918:14"><name pos:start="2918:9" pos:end="2918:14">String</name></argument>, <argument pos:start="2918:17" pos:end="2918:35"><name pos:start="2918:17" pos:end="2918:35">ZipEntryTransformer</name></argument>&gt;</argument_list></name></type> <name pos:start="2918:38" pos:end="2918:43">result</name> <init pos:start="2918:45" pos:end="2918:88">= <expr pos:start="2918:47" pos:end="2918:88"><operator pos:start="2918:47" pos:end="2918:49">new</operator> <call pos:start="2918:51" pos:end="2918:88"><name pos:start="2918:51" pos:end="2918:86"><name pos:start="2918:51" pos:end="2918:57">HashMap</name><argument_list type="generic" pos:start="2918:58" pos:end="2918:86">&lt;<argument pos:start="2918:59" pos:end="2918:64"><name pos:start="2918:59" pos:end="2918:64">String</name></argument>, <argument pos:start="2918:67" pos:end="2918:85"><name pos:start="2918:67" pos:end="2918:85">ZipEntryTransformer</name></argument>&gt;</argument_list></name><argument_list pos:start="2918:87" pos:end="2918:88">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for pos:start="2919:5" pos:end="2921:5">for <control pos:start="2919:9" pos:end="2919:50">(<init pos:start="2919:10" pos:end="2919:49"><decl pos:start="2919:10" pos:end="2919:49"><type pos:start="2919:10" pos:end="2919:33"><name pos:start="2919:10" pos:end="2919:33">ZipEntryTransformerEntry</name></type> <name pos:start="2919:35" pos:end="2919:39">entry</name> <range pos:start="2919:41" pos:end="2919:49">: <expr pos:start="2919:43" pos:end="2919:49"><name pos:start="2919:43" pos:end="2919:49">entries</name></expr></range></decl></init>)</control> <block pos:start="2919:52" pos:end="2921:5">{<block_content pos:start="2920:7" pos:end="2920:58">
      <expr_stmt pos:start="2920:7" pos:end="2920:58"><expr pos:start="2920:7" pos:end="2920:57"><call pos:start="2920:7" pos:end="2920:57"><name pos:start="2920:7" pos:end="2920:16"><name pos:start="2920:7" pos:end="2920:12">result</name><operator pos:start="2920:13" pos:end="2920:13">.</operator><name pos:start="2920:14" pos:end="2920:16">put</name></name><argument_list pos:start="2920:17" pos:end="2920:57">(<argument pos:start="2920:18" pos:end="2920:32"><expr pos:start="2920:18" pos:end="2920:32"><call pos:start="2920:18" pos:end="2920:32"><name pos:start="2920:18" pos:end="2920:30"><name pos:start="2920:18" pos:end="2920:22">entry</name><operator pos:start="2920:23" pos:end="2920:23">.</operator><name pos:start="2920:24" pos:end="2920:30">getPath</name></name><argument_list pos:start="2920:31" pos:end="2920:32">()</argument_list></call></expr></argument>, <argument pos:start="2920:35" pos:end="2920:56"><expr pos:start="2920:35" pos:end="2920:56"><call pos:start="2920:35" pos:end="2920:56"><name pos:start="2920:35" pos:end="2920:54"><name pos:start="2920:35" pos:end="2920:39">entry</name><operator pos:start="2920:40" pos:end="2920:40">.</operator><name pos:start="2920:41" pos:end="2920:54">getTransformer</name></name><argument_list pos:start="2920:55" pos:end="2920:56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="2922:5" pos:end="2922:18">return <expr pos:start="2922:12" pos:end="2922:17"><name pos:start="2922:12" pos:end="2922:17">result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="2925:3" pos:end="2932:5">/**
   * Adds a given ZIP entry to a ZIP file.
   *
   * @param entry
   *          new ZIP entry.
   * @param out
   *          target ZIP stream.
   */</comment>
  <function pos:start="2933:3" pos:end="2945:3"><type pos:start="2933:3" pos:end="2933:21"><specifier pos:start="2933:3" pos:end="2933:9">private</specifier> <specifier pos:start="2933:11" pos:end="2933:16">static</specifier> <name pos:start="2933:18" pos:end="2933:21">void</name></type> <name pos:start="2933:23" pos:end="2933:30">addEntry</name><parameter_list pos:start="2933:31" pos:end="2933:73">(<parameter pos:start="2933:32" pos:end="2933:51"><decl pos:start="2933:32" pos:end="2933:51"><type pos:start="2933:32" pos:end="2933:51"><name pos:start="2933:32" pos:end="2933:45">ZipEntrySource</name></type> <name pos:start="2933:47" pos:end="2933:51">entry</name></decl></parameter>, <parameter pos:start="2933:54" pos:end="2933:72"><decl pos:start="2933:54" pos:end="2933:72"><type pos:start="2933:54" pos:end="2933:72"><name pos:start="2933:54" pos:end="2933:68">ZipOutputStream</name></type> <name pos:start="2933:70" pos:end="2933:72">out</name></decl></parameter>)</parameter_list> <throws pos:start="2933:75" pos:end="2933:92">throws <argument pos:start="2933:82" pos:end="2933:92"><expr pos:start="2933:82" pos:end="2933:92"><name pos:start="2933:82" pos:end="2933:92">IOException</name></expr></argument></throws> <block pos:start="2933:94" pos:end="2945:3">{<block_content pos:start="2934:5" pos:end="2944:21">
    <expr_stmt pos:start="2934:5" pos:end="2934:39"><expr pos:start="2934:5" pos:end="2934:38"><call pos:start="2934:5" pos:end="2934:38"><name pos:start="2934:5" pos:end="2934:20"><name pos:start="2934:5" pos:end="2934:7">out</name><operator pos:start="2934:8" pos:end="2934:8">.</operator><name pos:start="2934:9" pos:end="2934:20">putNextEntry</name></name><argument_list pos:start="2934:21" pos:end="2934:38">(<argument pos:start="2934:22" pos:end="2934:37"><expr pos:start="2934:22" pos:end="2934:37"><call pos:start="2934:22" pos:end="2934:37"><name pos:start="2934:22" pos:end="2934:35"><name pos:start="2934:22" pos:end="2934:26">entry</name><operator pos:start="2934:27" pos:end="2934:27">.</operator><name pos:start="2934:28" pos:end="2934:35">getEntry</name></name><argument_list pos:start="2934:36" pos:end="2934:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="2935:5" pos:end="2935:44"><decl pos:start="2935:5" pos:end="2935:43"><type pos:start="2935:5" pos:end="2935:15"><name pos:start="2935:5" pos:end="2935:15">InputStream</name></type> <name pos:start="2935:17" pos:end="2935:18">in</name> <init pos:start="2935:20" pos:end="2935:43">= <expr pos:start="2935:22" pos:end="2935:43"><call pos:start="2935:22" pos:end="2935:43"><name pos:start="2935:22" pos:end="2935:41"><name pos:start="2935:22" pos:end="2935:26">entry</name><operator pos:start="2935:27" pos:end="2935:27">.</operator><name pos:start="2935:28" pos:end="2935:41">getInputStream</name></name><argument_list pos:start="2935:42" pos:end="2935:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="2936:5" pos:end="2943:5"><if pos:start="2936:5" pos:end="2943:5">if <condition pos:start="2936:8" pos:end="2936:19">(<expr pos:start="2936:9" pos:end="2936:18"><name pos:start="2936:9" pos:end="2936:10">in</name> <operator pos:start="2936:12" pos:end="2936:13">!=</operator> <literal type="null" pos:start="2936:15" pos:end="2936:18">null</literal></expr>)</condition> <block pos:start="2936:21" pos:end="2943:5">{<block_content pos:start="2937:7" pos:end="2942:7">
      <try pos:start="2937:7" pos:end="2942:7">try <block pos:start="2937:11" pos:end="2939:7">{<block_content pos:start="2938:9" pos:end="2938:30">
        <expr_stmt pos:start="2938:9" pos:end="2938:30"><expr pos:start="2938:9" pos:end="2938:29"><call pos:start="2938:9" pos:end="2938:29"><name pos:start="2938:9" pos:end="2938:20"><name pos:start="2938:9" pos:end="2938:15">IOUtils</name><operator pos:start="2938:16" pos:end="2938:16">.</operator><name pos:start="2938:17" pos:end="2938:20">copy</name></name><argument_list pos:start="2938:21" pos:end="2938:29">(<argument pos:start="2938:22" pos:end="2938:23"><expr pos:start="2938:22" pos:end="2938:23"><name pos:start="2938:22" pos:end="2938:23">in</name></expr></argument>, <argument pos:start="2938:26" pos:end="2938:28"><expr pos:start="2938:26" pos:end="2938:28"><name pos:start="2938:26" pos:end="2938:28">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <finally pos:start="2940:7" pos:end="2942:7">finally <block pos:start="2940:15" pos:end="2942:7">{<block_content pos:start="2941:9" pos:end="2941:33">
        <expr_stmt pos:start="2941:9" pos:end="2941:33"><expr pos:start="2941:9" pos:end="2941:32"><call pos:start="2941:9" pos:end="2941:32"><name pos:start="2941:9" pos:end="2941:28"><name pos:start="2941:9" pos:end="2941:15">IOUtils</name><operator pos:start="2941:16" pos:end="2941:16">.</operator><name pos:start="2941:17" pos:end="2941:28">closeQuietly</name></name><argument_list pos:start="2941:29" pos:end="2941:32">(<argument pos:start="2941:30" pos:end="2941:31"><expr pos:start="2941:30" pos:end="2941:31"><name pos:start="2941:30" pos:end="2941:31">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2944:5" pos:end="2944:21"><expr pos:start="2944:5" pos:end="2944:20"><call pos:start="2944:5" pos:end="2944:20"><name pos:start="2944:5" pos:end="2944:18"><name pos:start="2944:5" pos:end="2944:7">out</name><operator pos:start="2944:8" pos:end="2944:8">.</operator><name pos:start="2944:9" pos:end="2944:18">closeEntry</name></name><argument_list pos:start="2944:19" pos:end="2944:20">()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" pos:start="2947:3" pos:end="2947:32">/* Comparing two ZIP files. */</comment>

  <comment type="block" format="javadoc" pos:start="2949:3" pos:end="2981:5">/**
   * Compares two ZIP files and returns &lt;code&gt;true&lt;/code&gt; if they contain same
   * entries.
   * &lt;p&gt;
   * First the two files are compared byte-by-byte. If a difference is found the
   * corresponding entries of both ZIP files are compared. Thus if same contents
   * is packed differently the two archives may still be the same.
   * &lt;/p&gt;
   * &lt;p&gt;
   * Two archives are considered the same if
   * &lt;ol&gt;
   * &lt;li&gt;they contain same number of entries,&lt;/li&gt;
   * &lt;li&gt;for each entry in the first archive there exists an entry with the same
   * in the second archive&lt;/li&gt;
   * &lt;li&gt;for each entry in the first archive and the entry with the same name in
   * the second archive
   * &lt;ol&gt;
   * &lt;li&gt;both are either directories or files,&lt;/li&gt;
   * &lt;li&gt;both have the same size,&lt;/li&gt;
   * &lt;li&gt;both have the same CRC,&lt;/li&gt;
   * &lt;li&gt;both have the same contents (compared byte-by-byte).&lt;/li&gt;
   * &lt;/ol&gt;
   * &lt;/li&gt;
   * &lt;/ol&gt;
   *
   * @param f1
   *          first ZIP file.
   * @param f2
   *          second ZIP file.
   * @return &lt;code&gt;true&lt;/code&gt; if the two ZIP files contain same entries,
   *         &lt;code&gt;false&lt;/code&gt; if a difference was found or an error occurred
   *         during the comparison.
   */</comment>
  <function pos:start="2982:3" pos:end="3003:3"><type pos:start="2982:3" pos:end="2982:23"><specifier pos:start="2982:3" pos:end="2982:8">public</specifier> <specifier pos:start="2982:10" pos:end="2982:15">static</specifier> <name pos:start="2982:17" pos:end="2982:23">boolean</name></type> <name pos:start="2982:25" pos:end="2982:37">archiveEquals</name><parameter_list pos:start="2982:38" pos:end="2982:55">(<parameter pos:start="2982:39" pos:end="2982:45"><decl pos:start="2982:39" pos:end="2982:45"><type pos:start="2982:39" pos:end="2982:45"><name pos:start="2982:39" pos:end="2982:42">File</name></type> <name pos:start="2982:44" pos:end="2982:45">f1</name></decl></parameter>, <parameter pos:start="2982:48" pos:end="2982:54"><decl pos:start="2982:48" pos:end="2982:54"><type pos:start="2982:48" pos:end="2982:54"><name pos:start="2982:48" pos:end="2982:51">File</name></type> <name pos:start="2982:53" pos:end="2982:54">f2</name></decl></parameter>)</parameter_list> <block pos:start="2982:57" pos:end="3003:3">{<block_content pos:start="2983:5" pos:end="3002:5">
    <try pos:start="2983:5" pos:end="3002:5">try <block pos:start="2983:9" pos:end="2998:5">{<block_content pos:start="2985:7" pos:end="2997:20">
      <comment type="line" pos:start="2984:7" pos:end="2984:37">// Check the files byte-by-byte</comment>
      <if_stmt pos:start="2985:7" pos:end="2987:7"><if pos:start="2985:7" pos:end="2987:7">if <condition pos:start="2985:10" pos:end="2985:42">(<expr pos:start="2985:11" pos:end="2985:41"><call pos:start="2985:11" pos:end="2985:41"><name pos:start="2985:11" pos:end="2985:33"><name pos:start="2985:11" pos:end="2985:19">FileUtils</name><operator pos:start="2985:20" pos:end="2985:20">.</operator><name pos:start="2985:21" pos:end="2985:33">contentEquals</name></name><argument_list pos:start="2985:34" pos:end="2985:41">(<argument pos:start="2985:35" pos:end="2985:36"><expr pos:start="2985:35" pos:end="2985:36"><name pos:start="2985:35" pos:end="2985:36">f1</name></expr></argument>, <argument pos:start="2985:39" pos:end="2985:40"><expr pos:start="2985:39" pos:end="2985:40"><name pos:start="2985:39" pos:end="2985:40">f2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2985:44" pos:end="2987:7">{<block_content pos:start="2986:9" pos:end="2986:20">
        <return pos:start="2986:9" pos:end="2986:20">return <expr pos:start="2986:16" pos:end="2986:19"><literal type="boolean" pos:start="2986:16" pos:end="2986:19">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt pos:start="2989:7" pos:end="2989:63"><expr pos:start="2989:7" pos:end="2989:62"><call pos:start="2989:7" pos:end="2989:62"><name pos:start="2989:7" pos:end="2989:15"><name pos:start="2989:7" pos:end="2989:9">log</name><operator pos:start="2989:10" pos:end="2989:10">.</operator><name pos:start="2989:11" pos:end="2989:15">debug</name></name><argument_list pos:start="2989:16" pos:end="2989:62">(<argument pos:start="2989:17" pos:end="2989:53"><expr pos:start="2989:17" pos:end="2989:53"><literal type="string" pos:start="2989:17" pos:end="2989:53">"Comparing archives '{}' and '{}'..."</literal></expr></argument>, <argument pos:start="2989:56" pos:end="2989:57"><expr pos:start="2989:56" pos:end="2989:57"><name pos:start="2989:56" pos:end="2989:57">f1</name></expr></argument>, <argument pos:start="2989:60" pos:end="2989:61"><expr pos:start="2989:60" pos:end="2989:61"><name pos:start="2989:60" pos:end="2989:61">f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt pos:start="2991:7" pos:end="2991:46"><decl pos:start="2991:7" pos:end="2991:45"><type pos:start="2991:7" pos:end="2991:10"><name pos:start="2991:7" pos:end="2991:10">long</name></type> <name pos:start="2991:12" pos:end="2991:16">start</name> <init pos:start="2991:18" pos:end="2991:45">= <expr pos:start="2991:20" pos:end="2991:45"><call pos:start="2991:20" pos:end="2991:45"><name pos:start="2991:20" pos:end="2991:43"><name pos:start="2991:20" pos:end="2991:25">System</name><operator pos:start="2991:26" pos:end="2991:26">.</operator><name pos:start="2991:27" pos:end="2991:43">currentTimeMillis</name></name><argument_list pos:start="2991:44" pos:end="2991:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="2992:7" pos:end="2992:53"><decl pos:start="2992:7" pos:end="2992:52"><type pos:start="2992:7" pos:end="2992:13"><name pos:start="2992:7" pos:end="2992:13">boolean</name></type> <name pos:start="2992:15" pos:end="2992:20">result</name> <init pos:start="2992:22" pos:end="2992:52">= <expr pos:start="2992:24" pos:end="2992:52"><call pos:start="2992:24" pos:end="2992:52"><name pos:start="2992:24" pos:end="2992:44">archiveEqualsInternal</name><argument_list pos:start="2992:45" pos:end="2992:52">(<argument pos:start="2992:46" pos:end="2992:47"><expr pos:start="2992:46" pos:end="2992:47"><name pos:start="2992:46" pos:end="2992:47">f1</name></expr></argument>, <argument pos:start="2992:50" pos:end="2992:51"><expr pos:start="2992:50" pos:end="2992:51"><name pos:start="2992:50" pos:end="2992:51">f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="2993:7" pos:end="2993:53"><decl pos:start="2993:7" pos:end="2993:52"><type pos:start="2993:7" pos:end="2993:10"><name pos:start="2993:7" pos:end="2993:10">long</name></type> <name pos:start="2993:12" pos:end="2993:15">time</name> <init pos:start="2993:17" pos:end="2993:52">= <expr pos:start="2993:19" pos:end="2993:52"><call pos:start="2993:19" pos:end="2993:44"><name pos:start="2993:19" pos:end="2993:42"><name pos:start="2993:19" pos:end="2993:24">System</name><operator pos:start="2993:25" pos:end="2993:25">.</operator><name pos:start="2993:26" pos:end="2993:42">currentTimeMillis</name></name><argument_list pos:start="2993:43" pos:end="2993:44">()</argument_list></call> <operator pos:start="2993:46" pos:end="2993:46">-</operator> <name pos:start="2993:48" pos:end="2993:52">start</name></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="2994:7" pos:end="2996:7"><if pos:start="2994:7" pos:end="2996:7">if <condition pos:start="2994:10" pos:end="2994:19">(<expr pos:start="2994:11" pos:end="2994:18"><name pos:start="2994:11" pos:end="2994:14">time</name> <operator pos:start="2994:16" pos:end="2994:16">&gt;</operator> <literal type="number" pos:start="2994:18" pos:end="2994:18">0</literal></expr>)</condition> <block pos:start="2994:21" pos:end="2996:7">{<block_content pos:start="2995:9" pos:end="2995:59">
        <expr_stmt pos:start="2995:9" pos:end="2995:59"><expr pos:start="2995:9" pos:end="2995:58"><call pos:start="2995:9" pos:end="2995:58"><name pos:start="2995:9" pos:end="2995:17"><name pos:start="2995:9" pos:end="2995:11">log</name><operator pos:start="2995:12" pos:end="2995:12">.</operator><name pos:start="2995:13" pos:end="2995:17">debug</name></name><argument_list pos:start="2995:18" pos:end="2995:58">(<argument pos:start="2995:19" pos:end="2995:57"><expr pos:start="2995:19" pos:end="2995:57"><literal type="string" pos:start="2995:19" pos:end="2995:41">"Archives compared in "</literal> <operator pos:start="2995:43" pos:end="2995:43">+</operator> <name pos:start="2995:45" pos:end="2995:48">time</name> <operator pos:start="2995:50" pos:end="2995:50">+</operator> <literal type="string" pos:start="2995:52" pos:end="2995:57">" ms."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return pos:start="2997:7" pos:end="2997:20">return <expr pos:start="2997:14" pos:end="2997:19"><name pos:start="2997:14" pos:end="2997:19">result</name></expr>;</return>
    </block_content>}</block>
    <catch pos:start="2999:5" pos:end="3002:5">catch <parameter_list pos:start="2999:11" pos:end="2999:23">(<parameter pos:start="2999:12" pos:end="2999:22"><decl pos:start="2999:12" pos:end="2999:22"><type pos:start="2999:12" pos:end="2999:22"><name pos:start="2999:12" pos:end="2999:20">Exception</name></type> <name pos:start="2999:22" pos:end="2999:22">e</name></decl></parameter>)</parameter_list> <block pos:start="2999:25" pos:end="3002:5">{<block_content pos:start="3000:7" pos:end="3001:19">
      <expr_stmt pos:start="3000:7" pos:end="3000:71"><expr pos:start="3000:7" pos:end="3000:70"><call pos:start="3000:7" pos:end="3000:70"><name pos:start="3000:7" pos:end="3000:15"><name pos:start="3000:7" pos:end="3000:9">log</name><operator pos:start="3000:10" pos:end="3000:10">.</operator><name pos:start="3000:11" pos:end="3000:15">debug</name></name><argument_list pos:start="3000:16" pos:end="3000:70">(<argument pos:start="3000:17" pos:end="3000:66"><expr pos:start="3000:17" pos:end="3000:66"><literal type="string" pos:start="3000:17" pos:end="3000:37">"Could not compare '"</literal> <operator pos:start="3000:39" pos:end="3000:39">+</operator> <name pos:start="3000:41" pos:end="3000:42">f1</name> <operator pos:start="3000:44" pos:end="3000:44">+</operator> <literal type="string" pos:start="3000:46" pos:end="3000:54">"' and '"</literal> <operator pos:start="3000:56" pos:end="3000:56">+</operator> <name pos:start="3000:58" pos:end="3000:59">f2</name> <operator pos:start="3000:61" pos:end="3000:61">+</operator> <literal type="string" pos:start="3000:63" pos:end="3000:66">"':"</literal></expr></argument>, <argument pos:start="3000:69" pos:end="3000:69"><expr pos:start="3000:69" pos:end="3000:69"><name pos:start="3000:69" pos:end="3000:69">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="3001:7" pos:end="3001:19">return <expr pos:start="3001:14" pos:end="3001:18"><literal type="boolean" pos:start="3001:14" pos:end="3001:18">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function pos:start="3005:3" pos:end="3065:3"><type pos:start="3005:3" pos:end="3005:24"><specifier pos:start="3005:3" pos:end="3005:9">private</specifier> <specifier pos:start="3005:11" pos:end="3005:16">static</specifier> <name pos:start="3005:18" pos:end="3005:24">boolean</name></type> <name pos:start="3005:26" pos:end="3005:46">archiveEqualsInternal</name><parameter_list pos:start="3005:47" pos:end="3005:64">(<parameter pos:start="3005:48" pos:end="3005:54"><decl pos:start="3005:48" pos:end="3005:54"><type pos:start="3005:48" pos:end="3005:54"><name pos:start="3005:48" pos:end="3005:51">File</name></type> <name pos:start="3005:53" pos:end="3005:54">f1</name></decl></parameter>, <parameter pos:start="3005:57" pos:end="3005:63"><decl pos:start="3005:57" pos:end="3005:63"><type pos:start="3005:57" pos:end="3005:63"><name pos:start="3005:57" pos:end="3005:60">File</name></type> <name pos:start="3005:62" pos:end="3005:63">f2</name></decl></parameter>)</parameter_list> <throws pos:start="3005:66" pos:end="3005:83">throws <argument pos:start="3005:73" pos:end="3005:83"><expr pos:start="3005:73" pos:end="3005:83"><name pos:start="3005:73" pos:end="3005:83">IOException</name></expr></argument></throws> <block pos:start="3005:85" pos:end="3065:3">{<block_content pos:start="3006:5" pos:end="3064:16">
    <decl_stmt pos:start="3006:5" pos:end="3006:23"><decl pos:start="3006:5" pos:end="3006:22"><type pos:start="3006:5" pos:end="3006:11"><name pos:start="3006:5" pos:end="3006:11">ZipFile</name></type> <name pos:start="3006:13" pos:end="3006:15">zf1</name> <init pos:start="3006:17" pos:end="3006:22">= <expr pos:start="3006:19" pos:end="3006:22"><literal type="null" pos:start="3006:19" pos:end="3006:22">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3007:5" pos:end="3007:23"><decl pos:start="3007:5" pos:end="3007:22"><type pos:start="3007:5" pos:end="3007:11"><name pos:start="3007:5" pos:end="3007:11">ZipFile</name></type> <name pos:start="3007:13" pos:end="3007:15">zf2</name> <init pos:start="3007:17" pos:end="3007:22">= <expr pos:start="3007:19" pos:end="3007:22"><literal type="null" pos:start="3007:19" pos:end="3007:22">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="3008:5" pos:end="3060:5">try <block pos:start="3008:9" pos:end="3056:5">{<block_content pos:start="3009:7" pos:end="3055:7">
      <expr_stmt pos:start="3009:7" pos:end="3009:28"><expr pos:start="3009:7" pos:end="3009:27"><name pos:start="3009:7" pos:end="3009:9">zf1</name> <operator pos:start="3009:11" pos:end="3009:11">=</operator> <operator pos:start="3009:13" pos:end="3009:15">new</operator> <call pos:start="3009:17" pos:end="3009:27"><name pos:start="3009:17" pos:end="3009:23">ZipFile</name><argument_list pos:start="3009:24" pos:end="3009:27">(<argument pos:start="3009:25" pos:end="3009:26"><expr pos:start="3009:25" pos:end="3009:26"><name pos:start="3009:25" pos:end="3009:26">f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="3010:7" pos:end="3010:28"><expr pos:start="3010:7" pos:end="3010:27"><name pos:start="3010:7" pos:end="3010:9">zf2</name> <operator pos:start="3010:11" pos:end="3010:11">=</operator> <operator pos:start="3010:13" pos:end="3010:15">new</operator> <call pos:start="3010:17" pos:end="3010:27"><name pos:start="3010:17" pos:end="3010:23">ZipFile</name><argument_list pos:start="3010:24" pos:end="3010:27">(<argument pos:start="3010:25" pos:end="3010:26"><expr pos:start="3010:25" pos:end="3010:26"><name pos:start="3010:25" pos:end="3010:26">f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line" pos:start="3012:7" pos:end="3012:36">// Check the number of entries</comment>
      <if_stmt pos:start="3013:7" pos:end="3016:7"><if pos:start="3013:7" pos:end="3016:7">if <condition pos:start="3013:10" pos:end="3013:35">(<expr pos:start="3013:11" pos:end="3013:34"><call pos:start="3013:11" pos:end="3013:20"><name pos:start="3013:11" pos:end="3013:18"><name pos:start="3013:11" pos:end="3013:13">zf1</name><operator pos:start="3013:14" pos:end="3013:14">.</operator><name pos:start="3013:15" pos:end="3013:18">size</name></name><argument_list pos:start="3013:19" pos:end="3013:20">()</argument_list></call> <operator pos:start="3013:22" pos:end="3013:23">!=</operator> <call pos:start="3013:25" pos:end="3013:34"><name pos:start="3013:25" pos:end="3013:32"><name pos:start="3013:25" pos:end="3013:27">zf2</name><operator pos:start="3013:28" pos:end="3013:28">.</operator><name pos:start="3013:29" pos:end="3013:32">size</name></name><argument_list pos:start="3013:33" pos:end="3013:34">()</argument_list></call></expr>)</condition> <block pos:start="3013:37" pos:end="3016:7">{<block_content pos:start="3014:9" pos:end="3015:21">
        <expr_stmt pos:start="3014:9" pos:end="3014:91"><expr pos:start="3014:9" pos:end="3014:90"><call pos:start="3014:9" pos:end="3014:90"><name pos:start="3014:9" pos:end="3014:17"><name pos:start="3014:9" pos:end="3014:11">log</name><operator pos:start="3014:12" pos:end="3014:12">.</operator><name pos:start="3014:13" pos:end="3014:17">debug</name></name><argument_list pos:start="3014:18" pos:end="3014:90">(<argument pos:start="3014:19" pos:end="3014:89"><expr pos:start="3014:19" pos:end="3014:89"><literal type="string" pos:start="3014:19" pos:end="3014:47">"Number of entries changed ("</literal> <operator pos:start="3014:49" pos:end="3014:49">+</operator> <call pos:start="3014:51" pos:end="3014:60"><name pos:start="3014:51" pos:end="3014:58"><name pos:start="3014:51" pos:end="3014:53">zf1</name><operator pos:start="3014:54" pos:end="3014:54">.</operator><name pos:start="3014:55" pos:end="3014:58">size</name></name><argument_list pos:start="3014:59" pos:end="3014:60">()</argument_list></call> <operator pos:start="3014:62" pos:end="3014:62">+</operator> <literal type="string" pos:start="3014:64" pos:end="3014:69">" vs "</literal> <operator pos:start="3014:71" pos:end="3014:71">+</operator> <call pos:start="3014:73" pos:end="3014:82"><name pos:start="3014:73" pos:end="3014:80"><name pos:start="3014:73" pos:end="3014:75">zf2</name><operator pos:start="3014:76" pos:end="3014:76">.</operator><name pos:start="3014:77" pos:end="3014:80">size</name></name><argument_list pos:start="3014:81" pos:end="3014:82">()</argument_list></call> <operator pos:start="3014:84" pos:end="3014:84">+</operator> <literal type="string" pos:start="3014:86" pos:end="3014:89">")."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3015:9" pos:end="3015:21">return <expr pos:start="3015:16" pos:end="3015:20"><literal type="boolean" pos:start="3015:16" pos:end="3015:20">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block" pos:start="3017:7" pos:end="3027:9">/*
       * As there are same number of entries in both archives we can traverse
       * all entries of one of the archives and get the corresponding entries
       * from the other archive.
       *
       * If a corresponding entry is missing from the second archive the
       * archives are different and we finish the comparison.
       *
       * We guarantee that no entry of the second archive is skipped as there
       * are same number of unique entries in both archives.
       */</comment>
      <decl_stmt pos:start="3028:7" pos:end="3028:57"><decl pos:start="3028:7" pos:end="3028:56"><type pos:start="3028:7" pos:end="3028:37"><name pos:start="3028:7" pos:end="3028:37"><name pos:start="3028:7" pos:end="3028:17">Enumeration</name><argument_list type="generic" pos:start="3028:18" pos:end="3028:37">&lt;<argument pos:start="3028:19" pos:end="3028:36"><name pos:start="3028:19" pos:end="3028:19">?</name> <extends pos:start="3028:21" pos:end="3028:36">extends <name pos:start="3028:29" pos:end="3028:36">ZipEntry</name></extends></argument>&gt;</argument_list></name></type> <name pos:start="3028:39" pos:end="3028:40">en</name> <init pos:start="3028:42" pos:end="3028:56">= <expr pos:start="3028:44" pos:end="3028:56"><call pos:start="3028:44" pos:end="3028:56"><name pos:start="3028:44" pos:end="3028:54"><name pos:start="3028:44" pos:end="3028:46">zf1</name><operator pos:start="3028:47" pos:end="3028:47">.</operator><name pos:start="3028:48" pos:end="3028:54">entries</name></name><argument_list pos:start="3028:55" pos:end="3028:56">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while pos:start="3029:7" pos:end="3055:7">while <condition pos:start="3029:13" pos:end="3029:34">(<expr pos:start="3029:14" pos:end="3029:33"><call pos:start="3029:14" pos:end="3029:33"><name pos:start="3029:14" pos:end="3029:31"><name pos:start="3029:14" pos:end="3029:15">en</name><operator pos:start="3029:16" pos:end="3029:16">.</operator><name pos:start="3029:17" pos:end="3029:31">hasMoreElements</name></name><argument_list pos:start="3029:32" pos:end="3029:33">()</argument_list></call></expr>)</condition> <block pos:start="3029:36" pos:end="3055:7">{<block_content pos:start="3030:9" pos:end="3054:9">
        <decl_stmt pos:start="3030:9" pos:end="3030:50"><decl pos:start="3030:9" pos:end="3030:49"><type pos:start="3030:9" pos:end="3030:16"><name pos:start="3030:9" pos:end="3030:16">ZipEntry</name></type> <name pos:start="3030:18" pos:end="3030:19">e1</name> <init pos:start="3030:21" pos:end="3030:49">= <expr pos:start="3030:23" pos:end="3030:49"><operator pos:start="3030:23" pos:end="3030:23">(</operator><name pos:start="3030:24" pos:end="3030:31">ZipEntry</name><operator pos:start="3030:32" pos:end="3030:32">)</operator> <call pos:start="3030:34" pos:end="3030:49"><name pos:start="3030:34" pos:end="3030:47"><name pos:start="3030:34" pos:end="3030:35">en</name><operator pos:start="3030:36" pos:end="3030:36">.</operator><name pos:start="3030:37" pos:end="3030:47">nextElement</name></name><argument_list pos:start="3030:48" pos:end="3030:49">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3031:9" pos:end="3031:35"><decl pos:start="3031:9" pos:end="3031:34"><type pos:start="3031:9" pos:end="3031:14"><name pos:start="3031:9" pos:end="3031:14">String</name></type> <name pos:start="3031:16" pos:end="3031:19">path</name> <init pos:start="3031:21" pos:end="3031:34">= <expr pos:start="3031:23" pos:end="3031:34"><call pos:start="3031:23" pos:end="3031:34"><name pos:start="3031:23" pos:end="3031:32"><name pos:start="3031:23" pos:end="3031:24">e1</name><operator pos:start="3031:25" pos:end="3031:25">.</operator><name pos:start="3031:26" pos:end="3031:32">getName</name></name><argument_list pos:start="3031:33" pos:end="3031:34">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3032:9" pos:end="3032:41"><decl pos:start="3032:9" pos:end="3032:40"><type pos:start="3032:9" pos:end="3032:16"><name pos:start="3032:9" pos:end="3032:16">ZipEntry</name></type> <name pos:start="3032:18" pos:end="3032:19">e2</name> <init pos:start="3032:21" pos:end="3032:40">= <expr pos:start="3032:23" pos:end="3032:40"><call pos:start="3032:23" pos:end="3032:40"><name pos:start="3032:23" pos:end="3032:34"><name pos:start="3032:23" pos:end="3032:25">zf2</name><operator pos:start="3032:26" pos:end="3032:26">.</operator><name pos:start="3032:27" pos:end="3032:34">getEntry</name></name><argument_list pos:start="3032:35" pos:end="3032:40">(<argument pos:start="3032:36" pos:end="3032:39"><expr pos:start="3032:36" pos:end="3032:39"><name pos:start="3032:36" pos:end="3032:39">path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="3034:9" pos:end="3034:26">// Check meta data</comment>
        <if_stmt pos:start="3035:9" pos:end="3037:9"><if pos:start="3035:9" pos:end="3037:9">if <condition pos:start="3035:12" pos:end="3035:42">(<expr pos:start="3035:13" pos:end="3035:41"><operator pos:start="3035:13" pos:end="3035:13">!</operator><call pos:start="3035:14" pos:end="3035:41"><name pos:start="3035:14" pos:end="3035:27">metaDataEquals</name><argument_list pos:start="3035:28" pos:end="3035:41">(<argument pos:start="3035:29" pos:end="3035:32"><expr pos:start="3035:29" pos:end="3035:32"><name pos:start="3035:29" pos:end="3035:32">path</name></expr></argument>, <argument pos:start="3035:35" pos:end="3035:36"><expr pos:start="3035:35" pos:end="3035:36"><name pos:start="3035:35" pos:end="3035:36">e1</name></expr></argument>, <argument pos:start="3035:39" pos:end="3035:40"><expr pos:start="3035:39" pos:end="3035:40"><name pos:start="3035:39" pos:end="3035:40">e2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3035:44" pos:end="3037:9">{<block_content pos:start="3036:11" pos:end="3036:23">
          <return pos:start="3036:11" pos:end="3036:23">return <expr pos:start="3036:18" pos:end="3036:22"><literal type="boolean" pos:start="3036:18" pos:end="3036:22">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="3039:9" pos:end="3039:28">// Check the content</comment>
        <decl_stmt pos:start="3040:9" pos:end="3040:31"><decl pos:start="3040:9" pos:end="3040:30"><type pos:start="3040:9" pos:end="3040:19"><name pos:start="3040:9" pos:end="3040:19">InputStream</name></type> <name pos:start="3040:21" pos:end="3040:23">is1</name> <init pos:start="3040:25" pos:end="3040:30">= <expr pos:start="3040:27" pos:end="3040:30"><literal type="null" pos:start="3040:27" pos:end="3040:30">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3041:9" pos:end="3041:31"><decl pos:start="3041:9" pos:end="3041:30"><type pos:start="3041:9" pos:end="3041:19"><name pos:start="3041:9" pos:end="3041:19">InputStream</name></type> <name pos:start="3041:21" pos:end="3041:23">is2</name> <init pos:start="3041:25" pos:end="3041:30">= <expr pos:start="3041:27" pos:end="3041:30"><literal type="null" pos:start="3041:27" pos:end="3041:30">null</literal></expr></init></decl>;</decl_stmt>
        <try pos:start="3042:9" pos:end="3054:9">try <block pos:start="3042:13" pos:end="3050:9">{<block_content pos:start="3043:11" pos:end="3049:11">
          <expr_stmt pos:start="3043:11" pos:end="3043:39"><expr pos:start="3043:11" pos:end="3043:38"><name pos:start="3043:11" pos:end="3043:13">is1</name> <operator pos:start="3043:15" pos:end="3043:15">=</operator> <call pos:start="3043:17" pos:end="3043:38"><name pos:start="3043:17" pos:end="3043:34"><name pos:start="3043:17" pos:end="3043:19">zf1</name><operator pos:start="3043:20" pos:end="3043:20">.</operator><name pos:start="3043:21" pos:end="3043:34">getInputStream</name></name><argument_list pos:start="3043:35" pos:end="3043:38">(<argument pos:start="3043:36" pos:end="3043:37"><expr pos:start="3043:36" pos:end="3043:37"><name pos:start="3043:36" pos:end="3043:37">e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt pos:start="3044:11" pos:end="3044:39"><expr pos:start="3044:11" pos:end="3044:38"><name pos:start="3044:11" pos:end="3044:13">is2</name> <operator pos:start="3044:15" pos:end="3044:15">=</operator> <call pos:start="3044:17" pos:end="3044:38"><name pos:start="3044:17" pos:end="3044:34"><name pos:start="3044:17" pos:end="3044:19">zf2</name><operator pos:start="3044:20" pos:end="3044:20">.</operator><name pos:start="3044:21" pos:end="3044:34">getInputStream</name></name><argument_list pos:start="3044:35" pos:end="3044:38">(<argument pos:start="3044:36" pos:end="3044:37"><expr pos:start="3044:36" pos:end="3044:37"><name pos:start="3044:36" pos:end="3044:37">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="3046:11" pos:end="3049:11"><if pos:start="3046:11" pos:end="3049:11">if <condition pos:start="3046:14" pos:end="3046:47">(<expr pos:start="3046:15" pos:end="3046:46"><operator pos:start="3046:15" pos:end="3046:15">!</operator><call pos:start="3046:16" pos:end="3046:46"><name pos:start="3046:16" pos:end="3046:36"><name pos:start="3046:16" pos:end="3046:22">IOUtils</name><operator pos:start="3046:23" pos:end="3046:23">.</operator><name pos:start="3046:24" pos:end="3046:36">contentEquals</name></name><argument_list pos:start="3046:37" pos:end="3046:46">(<argument pos:start="3046:38" pos:end="3046:40"><expr pos:start="3046:38" pos:end="3046:40"><name pos:start="3046:38" pos:end="3046:40">is1</name></expr></argument>, <argument pos:start="3046:43" pos:end="3046:45"><expr pos:start="3046:43" pos:end="3046:45"><name pos:start="3046:43" pos:end="3046:45">is2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3046:49" pos:end="3049:11">{<block_content pos:start="3047:13" pos:end="3048:25">
            <expr_stmt pos:start="3047:13" pos:end="3047:59"><expr pos:start="3047:13" pos:end="3047:58"><call pos:start="3047:13" pos:end="3047:58"><name pos:start="3047:13" pos:end="3047:21"><name pos:start="3047:13" pos:end="3047:15">log</name><operator pos:start="3047:16" pos:end="3047:16">.</operator><name pos:start="3047:17" pos:end="3047:21">debug</name></name><argument_list pos:start="3047:22" pos:end="3047:58">(<argument pos:start="3047:23" pos:end="3047:51"><expr pos:start="3047:23" pos:end="3047:51"><literal type="string" pos:start="3047:23" pos:end="3047:51">"Entry '{}' content changed."</literal></expr></argument>, <argument pos:start="3047:54" pos:end="3047:57"><expr pos:start="3047:54" pos:end="3047:57"><name pos:start="3047:54" pos:end="3047:57">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3048:13" pos:end="3048:25">return <expr pos:start="3048:20" pos:end="3048:24"><literal type="boolean" pos:start="3048:20" pos:end="3048:24">false</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <finally pos:start="3051:9" pos:end="3054:9">finally <block pos:start="3051:17" pos:end="3054:9">{<block_content pos:start="3052:11" pos:end="3053:36">
          <expr_stmt pos:start="3052:11" pos:end="3052:36"><expr pos:start="3052:11" pos:end="3052:35"><call pos:start="3052:11" pos:end="3052:35"><name pos:start="3052:11" pos:end="3052:30"><name pos:start="3052:11" pos:end="3052:17">IOUtils</name><operator pos:start="3052:18" pos:end="3052:18">.</operator><name pos:start="3052:19" pos:end="3052:30">closeQuietly</name></name><argument_list pos:start="3052:31" pos:end="3052:35">(<argument pos:start="3052:32" pos:end="3052:34"><expr pos:start="3052:32" pos:end="3052:34"><name pos:start="3052:32" pos:end="3052:34">is1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt pos:start="3053:11" pos:end="3053:36"><expr pos:start="3053:11" pos:end="3053:35"><call pos:start="3053:11" pos:end="3053:35"><name pos:start="3053:11" pos:end="3053:30"><name pos:start="3053:11" pos:end="3053:17">IOUtils</name><operator pos:start="3053:18" pos:end="3053:18">.</operator><name pos:start="3053:19" pos:end="3053:30">closeQuietly</name></name><argument_list pos:start="3053:31" pos:end="3053:35">(<argument pos:start="3053:32" pos:end="3053:34"><expr pos:start="3053:32" pos:end="3053:34"><name pos:start="3053:32" pos:end="3053:34">is2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      </block_content>}</block></while>
    </block_content>}</block>
    <finally pos:start="3057:5" pos:end="3060:5">finally <block pos:start="3057:13" pos:end="3060:5">{<block_content pos:start="3058:7" pos:end="3059:24">
      <expr_stmt pos:start="3058:7" pos:end="3058:24"><expr pos:start="3058:7" pos:end="3058:23"><call pos:start="3058:7" pos:end="3058:23"><name pos:start="3058:7" pos:end="3058:18">closeQuietly</name><argument_list pos:start="3058:19" pos:end="3058:23">(<argument pos:start="3058:20" pos:end="3058:22"><expr pos:start="3058:20" pos:end="3058:22"><name pos:start="3058:20" pos:end="3058:22">zf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="3059:7" pos:end="3059:24"><expr pos:start="3059:7" pos:end="3059:23"><call pos:start="3059:7" pos:end="3059:23"><name pos:start="3059:7" pos:end="3059:18">closeQuietly</name><argument_list pos:start="3059:19" pos:end="3059:23">(<argument pos:start="3059:20" pos:end="3059:22"><expr pos:start="3059:20" pos:end="3059:22"><name pos:start="3059:20" pos:end="3059:22">zf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

    <expr_stmt pos:start="3062:5" pos:end="3062:40"><expr pos:start="3062:5" pos:end="3062:39"><call pos:start="3062:5" pos:end="3062:39"><name pos:start="3062:5" pos:end="3062:13"><name pos:start="3062:5" pos:end="3062:7">log</name><operator pos:start="3062:8" pos:end="3062:8">.</operator><name pos:start="3062:9" pos:end="3062:13">debug</name></name><argument_list pos:start="3062:14" pos:end="3062:39">(<argument pos:start="3062:15" pos:end="3062:38"><expr pos:start="3062:15" pos:end="3062:38"><literal type="string" pos:start="3062:15" pos:end="3062:38">"Archives are the same."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="3064:5" pos:end="3064:16">return <expr pos:start="3064:12" pos:end="3064:15"><literal type="boolean" pos:start="3064:12" pos:end="3064:15">true</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3067:3" pos:end="3085:5">/**
   * Compares meta-data of two ZIP entries.
   * &lt;p&gt;
   * Two entries are considered the same if
   * &lt;ol&gt;
   * &lt;li&gt;both entries exist,&lt;/li&gt;
   * &lt;li&gt;both entries are either directories or files,&lt;/li&gt;
   * &lt;li&gt;both entries have the same size,&lt;/li&gt;
   * &lt;li&gt;both entries have the same CRC.&lt;/li&gt;
   * &lt;/ol&gt;
   *
   * @param path
   *          name of the entries.
   * @param e1
   *          first entry (required).
   * @param e2
   *          second entry (may be &lt;code&gt;null&lt;/code&gt;).
   * @return &lt;code&gt;true&lt;/code&gt; if no difference was found.
   */</comment>
  <function pos:start="3086:3" pos:end="3134:3"><type pos:start="3086:3" pos:end="3086:24"><specifier pos:start="3086:3" pos:end="3086:9">private</specifier> <specifier pos:start="3086:11" pos:end="3086:16">static</specifier> <name pos:start="3086:18" pos:end="3086:24">boolean</name></type> <name pos:start="3086:26" pos:end="3086:39">metaDataEquals</name><parameter_list pos:start="3086:40" pos:end="3086:78">(<parameter pos:start="3086:41" pos:end="3086:51"><decl pos:start="3086:41" pos:end="3086:51"><type pos:start="3086:41" pos:end="3086:51"><name pos:start="3086:41" pos:end="3086:46">String</name></type> <name pos:start="3086:48" pos:end="3086:51">path</name></decl></parameter>, <parameter pos:start="3086:54" pos:end="3086:64"><decl pos:start="3086:54" pos:end="3086:64"><type pos:start="3086:54" pos:end="3086:64"><name pos:start="3086:54" pos:end="3086:61">ZipEntry</name></type> <name pos:start="3086:63" pos:end="3086:64">e1</name></decl></parameter>, <parameter pos:start="3086:67" pos:end="3086:77"><decl pos:start="3086:67" pos:end="3086:77"><type pos:start="3086:67" pos:end="3086:77"><name pos:start="3086:67" pos:end="3086:74">ZipEntry</name></type> <name pos:start="3086:76" pos:end="3086:77">e2</name></decl></parameter>)</parameter_list> <throws pos:start="3086:80" pos:end="3086:97">throws <argument pos:start="3086:87" pos:end="3086:97"><expr pos:start="3086:87" pos:end="3086:97"><name pos:start="3086:87" pos:end="3086:97">IOException</name></expr></argument></throws> <block pos:start="3086:99" pos:end="3134:3">{<block_content pos:start="3088:5" pos:end="3133:16">
    <comment type="line" pos:start="3087:5" pos:end="3087:59">// Check if the same entry exists in the second archive</comment>
    <if_stmt pos:start="3088:5" pos:end="3091:5"><if pos:start="3088:5" pos:end="3091:5">if <condition pos:start="3088:8" pos:end="3088:19">(<expr pos:start="3088:9" pos:end="3088:18"><name pos:start="3088:9" pos:end="3088:10">e2</name> <operator pos:start="3088:12" pos:end="3088:13">==</operator> <literal type="null" pos:start="3088:15" pos:end="3088:18">null</literal></expr>)</condition> <block pos:start="3088:21" pos:end="3091:5">{<block_content pos:start="3089:7" pos:end="3090:19">
      <expr_stmt pos:start="3089:7" pos:end="3089:45"><expr pos:start="3089:7" pos:end="3089:44"><call pos:start="3089:7" pos:end="3089:44"><name pos:start="3089:7" pos:end="3089:15"><name pos:start="3089:7" pos:end="3089:9">log</name><operator pos:start="3089:10" pos:end="3089:10">.</operator><name pos:start="3089:11" pos:end="3089:15">debug</name></name><argument_list pos:start="3089:16" pos:end="3089:44">(<argument pos:start="3089:17" pos:end="3089:37"><expr pos:start="3089:17" pos:end="3089:37"><literal type="string" pos:start="3089:17" pos:end="3089:37">"Entry '{}' removed."</literal></expr></argument>, <argument pos:start="3089:40" pos:end="3089:43"><expr pos:start="3089:40" pos:end="3089:43"><name pos:start="3089:40" pos:end="3089:43">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="3090:7" pos:end="3090:19">return <expr pos:start="3090:14" pos:end="3090:18"><literal type="boolean" pos:start="3090:14" pos:end="3090:18">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="3093:5" pos:end="3093:31">// Check the directory flag</comment>
    <if_stmt pos:start="3094:5" pos:end="3106:5"><if pos:start="3094:5" pos:end="3102:5">if <condition pos:start="3094:8" pos:end="3094:25">(<expr pos:start="3094:9" pos:end="3094:24"><call pos:start="3094:9" pos:end="3094:24"><name pos:start="3094:9" pos:end="3094:22"><name pos:start="3094:9" pos:end="3094:10">e1</name><operator pos:start="3094:11" pos:end="3094:11">.</operator><name pos:start="3094:12" pos:end="3094:22">isDirectory</name></name><argument_list pos:start="3094:23" pos:end="3094:24">()</argument_list></call></expr>)</condition> <block pos:start="3094:27" pos:end="3102:5">{<block_content pos:start="3095:7" pos:end="3101:7">
      <if_stmt pos:start="3095:7" pos:end="3101:7"><if pos:start="3095:7" pos:end="3097:7">if <condition pos:start="3095:10" pos:end="3095:27">(<expr pos:start="3095:11" pos:end="3095:26"><call pos:start="3095:11" pos:end="3095:26"><name pos:start="3095:11" pos:end="3095:24"><name pos:start="3095:11" pos:end="3095:12">e2</name><operator pos:start="3095:13" pos:end="3095:13">.</operator><name pos:start="3095:14" pos:end="3095:24">isDirectory</name></name><argument_list pos:start="3095:25" pos:end="3095:26">()</argument_list></call></expr>)</condition> <block pos:start="3095:29" pos:end="3097:7">{<block_content pos:start="3096:9" pos:end="3096:20">
        <return pos:start="3096:9" pos:end="3096:20">return <expr pos:start="3096:16" pos:end="3096:19"><literal type="boolean" pos:start="3096:16" pos:end="3096:19">true</literal></expr>;</return> <comment type="line" pos:start="3096:22" pos:end="3096:79">// Let's skip the directory as there is nothing to compare</comment>
      </block_content>}</block></if>
      <else pos:start="3098:7" pos:end="3101:7">else <block pos:start="3098:12" pos:end="3101:7">{<block_content pos:start="3099:9" pos:end="3100:21">
        <expr_stmt pos:start="3099:9" pos:end="3099:64"><expr pos:start="3099:9" pos:end="3099:63"><call pos:start="3099:9" pos:end="3099:63"><name pos:start="3099:9" pos:end="3099:17"><name pos:start="3099:9" pos:end="3099:11">log</name><operator pos:start="3099:12" pos:end="3099:12">.</operator><name pos:start="3099:13" pos:end="3099:17">debug</name></name><argument_list pos:start="3099:18" pos:end="3099:63">(<argument pos:start="3099:19" pos:end="3099:56"><expr pos:start="3099:19" pos:end="3099:56"><literal type="string" pos:start="3099:19" pos:end="3099:56">"Entry '{}' not a directory any more."</literal></expr></argument>, <argument pos:start="3099:59" pos:end="3099:62"><expr pos:start="3099:59" pos:end="3099:62"><name pos:start="3099:59" pos:end="3099:62">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3100:9" pos:end="3100:21">return <expr pos:start="3100:16" pos:end="3100:20"><literal type="boolean" pos:start="3100:16" pos:end="3100:20">false</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="3103:5" pos:end="3106:5">else if <condition pos:start="3103:13" pos:end="3103:30">(<expr pos:start="3103:14" pos:end="3103:29"><call pos:start="3103:14" pos:end="3103:29"><name pos:start="3103:14" pos:end="3103:27"><name pos:start="3103:14" pos:end="3103:15">e2</name><operator pos:start="3103:16" pos:end="3103:16">.</operator><name pos:start="3103:17" pos:end="3103:27">isDirectory</name></name><argument_list pos:start="3103:28" pos:end="3103:29">()</argument_list></call></expr>)</condition> <block pos:start="3103:32" pos:end="3106:5">{<block_content pos:start="3104:7" pos:end="3105:19">
      <expr_stmt pos:start="3104:7" pos:end="3104:53"><expr pos:start="3104:7" pos:end="3104:52"><call pos:start="3104:7" pos:end="3104:52"><name pos:start="3104:7" pos:end="3104:15"><name pos:start="3104:7" pos:end="3104:9">log</name><operator pos:start="3104:10" pos:end="3104:10">.</operator><name pos:start="3104:11" pos:end="3104:15">debug</name></name><argument_list pos:start="3104:16" pos:end="3104:52">(<argument pos:start="3104:17" pos:end="3104:45"><expr pos:start="3104:17" pos:end="3104:45"><literal type="string" pos:start="3104:17" pos:end="3104:45">"Entry '{}' now a directory."</literal></expr></argument>, <argument pos:start="3104:48" pos:end="3104:51"><expr pos:start="3104:48" pos:end="3104:51"><name pos:start="3104:48" pos:end="3104:51">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="3105:7" pos:end="3105:19">return <expr pos:start="3105:14" pos:end="3105:18"><literal type="boolean" pos:start="3105:14" pos:end="3105:18">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="3108:5" pos:end="3108:21">// Check the size</comment>
    <decl_stmt pos:start="3109:5" pos:end="3109:30"><decl pos:start="3109:5" pos:end="3109:29"><type pos:start="3109:5" pos:end="3109:8"><name pos:start="3109:5" pos:end="3109:8">long</name></type> <name pos:start="3109:10" pos:end="3109:14">size1</name> <init pos:start="3109:16" pos:end="3109:29">= <expr pos:start="3109:18" pos:end="3109:29"><call pos:start="3109:18" pos:end="3109:29"><name pos:start="3109:18" pos:end="3109:27"><name pos:start="3109:18" pos:end="3109:19">e1</name><operator pos:start="3109:20" pos:end="3109:20">.</operator><name pos:start="3109:21" pos:end="3109:27">getSize</name></name><argument_list pos:start="3109:28" pos:end="3109:29">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3110:5" pos:end="3110:30"><decl pos:start="3110:5" pos:end="3110:29"><type pos:start="3110:5" pos:end="3110:8"><name pos:start="3110:5" pos:end="3110:8">long</name></type> <name pos:start="3110:10" pos:end="3110:14">size2</name> <init pos:start="3110:16" pos:end="3110:29">= <expr pos:start="3110:18" pos:end="3110:29"><call pos:start="3110:18" pos:end="3110:29"><name pos:start="3110:18" pos:end="3110:27"><name pos:start="3110:18" pos:end="3110:19">e2</name><operator pos:start="3110:20" pos:end="3110:20">.</operator><name pos:start="3110:21" pos:end="3110:27">getSize</name></name><argument_list pos:start="3110:28" pos:end="3110:29">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="3111:5" pos:end="3114:5"><if pos:start="3111:5" pos:end="3114:5">if <condition pos:start="3111:8" pos:end="3111:53">(<expr pos:start="3111:9" pos:end="3111:52"><name pos:start="3111:9" pos:end="3111:13">size1</name> <operator pos:start="3111:15" pos:end="3111:16">!=</operator> <operator pos:start="3111:18" pos:end="3111:18">-</operator><literal type="number" pos:start="3111:19" pos:end="3111:19">1</literal> <operator pos:start="3111:21" pos:end="3111:22">&amp;&amp;</operator> <name pos:start="3111:24" pos:end="3111:28">size2</name> <operator pos:start="3111:30" pos:end="3111:31">!=</operator> <operator pos:start="3111:33" pos:end="3111:33">-</operator><literal type="number" pos:start="3111:34" pos:end="3111:34">1</literal> <operator pos:start="3111:36" pos:end="3111:37">&amp;&amp;</operator> <name pos:start="3111:39" pos:end="3111:43">size1</name> <operator pos:start="3111:45" pos:end="3111:46">!=</operator> <name pos:start="3111:48" pos:end="3111:52">size2</name></expr>)</condition> <block pos:start="3111:55" pos:end="3114:5">{<block_content pos:start="3112:7" pos:end="3113:19">
      <expr_stmt pos:start="3112:7" pos:end="3112:87"><expr pos:start="3112:7" pos:end="3112:86"><call pos:start="3112:7" pos:end="3112:86"><name pos:start="3112:7" pos:end="3112:15"><name pos:start="3112:7" pos:end="3112:9">log</name><operator pos:start="3112:10" pos:end="3112:10">.</operator><name pos:start="3112:11" pos:end="3112:15">debug</name></name><argument_list pos:start="3112:16" pos:end="3112:86">(<argument pos:start="3112:17" pos:end="3112:85"><expr pos:start="3112:17" pos:end="3112:85"><literal type="string" pos:start="3112:17" pos:end="3112:25">"Entry '"</literal> <operator pos:start="3112:27" pos:end="3112:27">+</operator> <name pos:start="3112:29" pos:end="3112:32">path</name> <operator pos:start="3112:34" pos:end="3112:34">+</operator> <literal type="string" pos:start="3112:36" pos:end="3112:53">"' size changed ("</literal> <operator pos:start="3112:55" pos:end="3112:55">+</operator> <name pos:start="3112:57" pos:end="3112:61">size1</name> <operator pos:start="3112:63" pos:end="3112:63">+</operator> <literal type="string" pos:start="3112:65" pos:end="3112:70">" vs "</literal> <operator pos:start="3112:72" pos:end="3112:72">+</operator> <name pos:start="3112:74" pos:end="3112:78">size2</name> <operator pos:start="3112:80" pos:end="3112:80">+</operator> <literal type="string" pos:start="3112:82" pos:end="3112:85">")."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="3113:7" pos:end="3113:19">return <expr pos:start="3113:14" pos:end="3113:18"><literal type="boolean" pos:start="3113:14" pos:end="3113:18">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="3116:5" pos:end="3116:20">// Check the CRC</comment>
    <decl_stmt pos:start="3117:5" pos:end="3117:28"><decl pos:start="3117:5" pos:end="3117:27"><type pos:start="3117:5" pos:end="3117:8"><name pos:start="3117:5" pos:end="3117:8">long</name></type> <name pos:start="3117:10" pos:end="3117:13">crc1</name> <init pos:start="3117:15" pos:end="3117:27">= <expr pos:start="3117:17" pos:end="3117:27"><call pos:start="3117:17" pos:end="3117:27"><name pos:start="3117:17" pos:end="3117:25"><name pos:start="3117:17" pos:end="3117:18">e1</name><operator pos:start="3117:19" pos:end="3117:19">.</operator><name pos:start="3117:20" pos:end="3117:25">getCrc</name></name><argument_list pos:start="3117:26" pos:end="3117:27">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3118:5" pos:end="3118:28"><decl pos:start="3118:5" pos:end="3118:27"><type pos:start="3118:5" pos:end="3118:8"><name pos:start="3118:5" pos:end="3118:8">long</name></type> <name pos:start="3118:10" pos:end="3118:13">crc2</name> <init pos:start="3118:15" pos:end="3118:27">= <expr pos:start="3118:17" pos:end="3118:27"><call pos:start="3118:17" pos:end="3118:27"><name pos:start="3118:17" pos:end="3118:25"><name pos:start="3118:17" pos:end="3118:18">e2</name><operator pos:start="3118:19" pos:end="3118:19">.</operator><name pos:start="3118:20" pos:end="3118:25">getCrc</name></name><argument_list pos:start="3118:26" pos:end="3118:27">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="3119:5" pos:end="3122:5"><if pos:start="3119:5" pos:end="3122:5">if <condition pos:start="3119:8" pos:end="3119:49">(<expr pos:start="3119:9" pos:end="3119:48"><name pos:start="3119:9" pos:end="3119:12">crc1</name> <operator pos:start="3119:14" pos:end="3119:15">!=</operator> <operator pos:start="3119:17" pos:end="3119:17">-</operator><literal type="number" pos:start="3119:18" pos:end="3119:18">1</literal> <operator pos:start="3119:20" pos:end="3119:21">&amp;&amp;</operator> <name pos:start="3119:23" pos:end="3119:26">crc2</name> <operator pos:start="3119:28" pos:end="3119:29">!=</operator> <operator pos:start="3119:31" pos:end="3119:31">-</operator><literal type="number" pos:start="3119:32" pos:end="3119:32">1</literal> <operator pos:start="3119:34" pos:end="3119:35">&amp;&amp;</operator> <name pos:start="3119:37" pos:end="3119:40">crc1</name> <operator pos:start="3119:42" pos:end="3119:43">!=</operator> <name pos:start="3119:45" pos:end="3119:48">crc2</name></expr>)</condition> <block pos:start="3119:51" pos:end="3122:5">{<block_content pos:start="3120:7" pos:end="3121:19">
      <expr_stmt pos:start="3120:7" pos:end="3120:84"><expr pos:start="3120:7" pos:end="3120:83"><call pos:start="3120:7" pos:end="3120:83"><name pos:start="3120:7" pos:end="3120:15"><name pos:start="3120:7" pos:end="3120:9">log</name><operator pos:start="3120:10" pos:end="3120:10">.</operator><name pos:start="3120:11" pos:end="3120:15">debug</name></name><argument_list pos:start="3120:16" pos:end="3120:83">(<argument pos:start="3120:17" pos:end="3120:82"><expr pos:start="3120:17" pos:end="3120:82"><literal type="string" pos:start="3120:17" pos:end="3120:25">"Entry '"</literal> <operator pos:start="3120:27" pos:end="3120:27">+</operator> <name pos:start="3120:29" pos:end="3120:32">path</name> <operator pos:start="3120:34" pos:end="3120:34">+</operator> <literal type="string" pos:start="3120:36" pos:end="3120:52">"' CRC changed ("</literal> <operator pos:start="3120:54" pos:end="3120:54">+</operator> <name pos:start="3120:56" pos:end="3120:59">crc1</name> <operator pos:start="3120:61" pos:end="3120:61">+</operator> <literal type="string" pos:start="3120:63" pos:end="3120:68">" vs "</literal> <operator pos:start="3120:70" pos:end="3120:70">+</operator> <name pos:start="3120:72" pos:end="3120:75">crc2</name> <operator pos:start="3120:77" pos:end="3120:77">+</operator> <literal type="string" pos:start="3120:79" pos:end="3120:82">")."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="3121:7" pos:end="3121:19">return <expr pos:start="3121:14" pos:end="3121:18"><literal type="boolean" pos:start="3121:14" pos:end="3121:18">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="3124:5" pos:end="3124:45">// Check the time (ignored, logging only)</comment>
    <if_stmt pos:start="3125:5" pos:end="3131:5"><if pos:start="3125:5" pos:end="3131:5">if <condition pos:start="3125:8" pos:end="3125:29">(<expr pos:start="3125:9" pos:end="3125:28"><call pos:start="3125:9" pos:end="3125:28"><name pos:start="3125:9" pos:end="3125:26"><name pos:start="3125:9" pos:end="3125:11">log</name><operator pos:start="3125:12" pos:end="3125:12">.</operator><name pos:start="3125:13" pos:end="3125:26">isTraceEnabled</name></name><argument_list pos:start="3125:27" pos:end="3125:28">()</argument_list></call></expr>)</condition> <block pos:start="3125:31" pos:end="3131:5">{<block_content pos:start="3126:7" pos:end="3130:7">
      <decl_stmt pos:start="3126:7" pos:end="3126:32"><decl pos:start="3126:7" pos:end="3126:31"><type pos:start="3126:7" pos:end="3126:10"><name pos:start="3126:7" pos:end="3126:10">long</name></type> <name pos:start="3126:12" pos:end="3126:16">time1</name> <init pos:start="3126:18" pos:end="3126:31">= <expr pos:start="3126:20" pos:end="3126:31"><call pos:start="3126:20" pos:end="3126:31"><name pos:start="3126:20" pos:end="3126:29"><name pos:start="3126:20" pos:end="3126:21">e1</name><operator pos:start="3126:22" pos:end="3126:22">.</operator><name pos:start="3126:23" pos:end="3126:29">getTime</name></name><argument_list pos:start="3126:30" pos:end="3126:31">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="3127:7" pos:end="3127:32"><decl pos:start="3127:7" pos:end="3127:31"><type pos:start="3127:7" pos:end="3127:10"><name pos:start="3127:7" pos:end="3127:10">long</name></type> <name pos:start="3127:12" pos:end="3127:16">time2</name> <init pos:start="3127:18" pos:end="3127:31">= <expr pos:start="3127:20" pos:end="3127:31"><call pos:start="3127:20" pos:end="3127:31"><name pos:start="3127:20" pos:end="3127:29"><name pos:start="3127:20" pos:end="3127:21">e2</name><operator pos:start="3127:22" pos:end="3127:22">.</operator><name pos:start="3127:23" pos:end="3127:29">getTime</name></name><argument_list pos:start="3127:30" pos:end="3127:31">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="3128:7" pos:end="3130:7"><if pos:start="3128:7" pos:end="3130:7">if <condition pos:start="3128:10" pos:end="3128:55">(<expr pos:start="3128:11" pos:end="3128:54"><name pos:start="3128:11" pos:end="3128:15">time1</name> <operator pos:start="3128:17" pos:end="3128:18">!=</operator> <operator pos:start="3128:20" pos:end="3128:20">-</operator><literal type="number" pos:start="3128:21" pos:end="3128:21">1</literal> <operator pos:start="3128:23" pos:end="3128:24">&amp;&amp;</operator> <name pos:start="3128:26" pos:end="3128:30">time2</name> <operator pos:start="3128:32" pos:end="3128:33">!=</operator> <operator pos:start="3128:35" pos:end="3128:35">-</operator><literal type="number" pos:start="3128:36" pos:end="3128:36">1</literal> <operator pos:start="3128:38" pos:end="3128:39">&amp;&amp;</operator> <name pos:start="3128:41" pos:end="3128:45">time1</name> <operator pos:start="3128:47" pos:end="3128:48">!=</operator> <name pos:start="3128:50" pos:end="3128:54">time2</name></expr>)</condition> <block pos:start="3128:57" pos:end="3130:7">{<block_content pos:start="3129:9" pos:end="3129:109">
        <expr_stmt pos:start="3129:9" pos:end="3129:109"><expr pos:start="3129:9" pos:end="3129:108"><call pos:start="3129:9" pos:end="3129:108"><name pos:start="3129:9" pos:end="3129:17"><name pos:start="3129:9" pos:end="3129:11">log</name><operator pos:start="3129:12" pos:end="3129:12">.</operator><name pos:start="3129:13" pos:end="3129:17">trace</name></name><argument_list pos:start="3129:18" pos:end="3129:108">(<argument pos:start="3129:19" pos:end="3129:107"><expr pos:start="3129:19" pos:end="3129:107"><literal type="string" pos:start="3129:19" pos:end="3129:27">"Entry '"</literal> <operator pos:start="3129:29" pos:end="3129:29">+</operator> <name pos:start="3129:31" pos:end="3129:34">path</name> <operator pos:start="3129:36" pos:end="3129:36">+</operator> <literal type="string" pos:start="3129:38" pos:end="3129:55">"' time changed ("</literal> <operator pos:start="3129:57" pos:end="3129:57">+</operator> <operator pos:start="3129:59" pos:end="3129:61">new</operator> <call pos:start="3129:63" pos:end="3129:73"><name pos:start="3129:63" pos:end="3129:66">Date</name><argument_list pos:start="3129:67" pos:end="3129:73">(<argument pos:start="3129:68" pos:end="3129:72"><expr pos:start="3129:68" pos:end="3129:72"><name pos:start="3129:68" pos:end="3129:72">time1</name></expr></argument>)</argument_list></call> <operator pos:start="3129:75" pos:end="3129:75">+</operator> <literal type="string" pos:start="3129:77" pos:end="3129:82">" vs "</literal> <operator pos:start="3129:84" pos:end="3129:84">+</operator> <operator pos:start="3129:86" pos:end="3129:88">new</operator> <call pos:start="3129:90" pos:end="3129:100"><name pos:start="3129:90" pos:end="3129:93">Date</name><argument_list pos:start="3129:94" pos:end="3129:100">(<argument pos:start="3129:95" pos:end="3129:99"><expr pos:start="3129:95" pos:end="3129:99"><name pos:start="3129:95" pos:end="3129:99">time2</name></expr></argument>)</argument_list></call> <operator pos:start="3129:102" pos:end="3129:102">+</operator> <literal type="string" pos:start="3129:104" pos:end="3129:107">")."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="3133:5" pos:end="3133:16">return <expr pos:start="3133:12" pos:end="3133:15"><literal type="boolean" pos:start="3133:12" pos:end="3133:15">true</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3136:3" pos:end="3147:5">/**
   * Compares same entry in two ZIP files (byte-by-byte).
   *
   * @param f1
   *          first ZIP file.
   * @param f2
   *          second ZIP file.
   * @param path
   *          name of the entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the contents of the entry was same in both ZIP
   *         files.
   */</comment>
  <function pos:start="3148:3" pos:end="3150:3"><type pos:start="3148:3" pos:end="3148:23"><specifier pos:start="3148:3" pos:end="3148:8">public</specifier> <specifier pos:start="3148:10" pos:end="3148:15">static</specifier> <name pos:start="3148:17" pos:end="3148:23">boolean</name></type> <name pos:start="3148:25" pos:end="3148:35">entryEquals</name><parameter_list pos:start="3148:36" pos:end="3148:66">(<parameter pos:start="3148:37" pos:end="3148:43"><decl pos:start="3148:37" pos:end="3148:43"><type pos:start="3148:37" pos:end="3148:43"><name pos:start="3148:37" pos:end="3148:40">File</name></type> <name pos:start="3148:42" pos:end="3148:43">f1</name></decl></parameter>, <parameter pos:start="3148:46" pos:end="3148:52"><decl pos:start="3148:46" pos:end="3148:52"><type pos:start="3148:46" pos:end="3148:52"><name pos:start="3148:46" pos:end="3148:49">File</name></type> <name pos:start="3148:51" pos:end="3148:52">f2</name></decl></parameter>, <parameter pos:start="3148:55" pos:end="3148:65"><decl pos:start="3148:55" pos:end="3148:65"><type pos:start="3148:55" pos:end="3148:65"><name pos:start="3148:55" pos:end="3148:60">String</name></type> <name pos:start="3148:62" pos:end="3148:65">path</name></decl></parameter>)</parameter_list> <block pos:start="3148:68" pos:end="3150:3">{<block_content pos:start="3149:5" pos:end="3149:43">
    <return pos:start="3149:5" pos:end="3149:43">return <expr pos:start="3149:12" pos:end="3149:42"><call pos:start="3149:12" pos:end="3149:42"><name pos:start="3149:12" pos:end="3149:22">entryEquals</name><argument_list pos:start="3149:23" pos:end="3149:42">(<argument pos:start="3149:24" pos:end="3149:25"><expr pos:start="3149:24" pos:end="3149:25"><name pos:start="3149:24" pos:end="3149:25">f1</name></expr></argument>, <argument pos:start="3149:28" pos:end="3149:29"><expr pos:start="3149:28" pos:end="3149:29"><name pos:start="3149:28" pos:end="3149:29">f2</name></expr></argument>, <argument pos:start="3149:32" pos:end="3149:35"><expr pos:start="3149:32" pos:end="3149:35"><name pos:start="3149:32" pos:end="3149:35">path</name></expr></argument>, <argument pos:start="3149:38" pos:end="3149:41"><expr pos:start="3149:38" pos:end="3149:41"><name pos:start="3149:38" pos:end="3149:41">path</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3152:3" pos:end="3164:5">/**
   * Compares two ZIP entries (byte-by-byte). .
   *
   * @param f1
   *          first ZIP file.
   * @param f2
   *          second ZIP file.
   * @param path1
   *          name of the first entry.
   * @param path2
   *          name of the second entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the contents of the entries were same.
   */</comment>
  <function pos:start="3165:3" pos:end="3182:3"><type pos:start="3165:3" pos:end="3165:23"><specifier pos:start="3165:3" pos:end="3165:8">public</specifier> <specifier pos:start="3165:10" pos:end="3165:15">static</specifier> <name pos:start="3165:17" pos:end="3165:23">boolean</name></type> <name pos:start="3165:25" pos:end="3165:35">entryEquals</name><parameter_list pos:start="3165:36" pos:end="3165:81">(<parameter pos:start="3165:37" pos:end="3165:43"><decl pos:start="3165:37" pos:end="3165:43"><type pos:start="3165:37" pos:end="3165:43"><name pos:start="3165:37" pos:end="3165:40">File</name></type> <name pos:start="3165:42" pos:end="3165:43">f1</name></decl></parameter>, <parameter pos:start="3165:46" pos:end="3165:52"><decl pos:start="3165:46" pos:end="3165:52"><type pos:start="3165:46" pos:end="3165:52"><name pos:start="3165:46" pos:end="3165:49">File</name></type> <name pos:start="3165:51" pos:end="3165:52">f2</name></decl></parameter>, <parameter pos:start="3165:55" pos:end="3165:66"><decl pos:start="3165:55" pos:end="3165:66"><type pos:start="3165:55" pos:end="3165:66"><name pos:start="3165:55" pos:end="3165:60">String</name></type> <name pos:start="3165:62" pos:end="3165:66">path1</name></decl></parameter>, <parameter pos:start="3165:69" pos:end="3165:80"><decl pos:start="3165:69" pos:end="3165:80"><type pos:start="3165:69" pos:end="3165:80"><name pos:start="3165:69" pos:end="3165:74">String</name></type> <name pos:start="3165:76" pos:end="3165:80">path2</name></decl></parameter>)</parameter_list> <block pos:start="3165:83" pos:end="3182:3">{<block_content pos:start="3166:5" pos:end="3181:5">
    <decl_stmt pos:start="3166:5" pos:end="3166:23"><decl pos:start="3166:5" pos:end="3166:22"><type pos:start="3166:5" pos:end="3166:11"><name pos:start="3166:5" pos:end="3166:11">ZipFile</name></type> <name pos:start="3166:13" pos:end="3166:15">zf1</name> <init pos:start="3166:17" pos:end="3166:22">= <expr pos:start="3166:19" pos:end="3166:22"><literal type="null" pos:start="3166:19" pos:end="3166:22">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3167:5" pos:end="3167:23"><decl pos:start="3167:5" pos:end="3167:22"><type pos:start="3167:5" pos:end="3167:11"><name pos:start="3167:5" pos:end="3167:11">ZipFile</name></type> <name pos:start="3167:13" pos:end="3167:15">zf2</name> <init pos:start="3167:17" pos:end="3167:22">= <expr pos:start="3167:19" pos:end="3167:22"><literal type="null" pos:start="3167:19" pos:end="3167:22">null</literal></expr></init></decl>;</decl_stmt>

    <try pos:start="3169:5" pos:end="3181:5">try <block pos:start="3169:9" pos:end="3174:5">{<block_content pos:start="3170:7" pos:end="3173:51">
      <expr_stmt pos:start="3170:7" pos:end="3170:28"><expr pos:start="3170:7" pos:end="3170:27"><name pos:start="3170:7" pos:end="3170:9">zf1</name> <operator pos:start="3170:11" pos:end="3170:11">=</operator> <operator pos:start="3170:13" pos:end="3170:15">new</operator> <call pos:start="3170:17" pos:end="3170:27"><name pos:start="3170:17" pos:end="3170:23">ZipFile</name><argument_list pos:start="3170:24" pos:end="3170:27">(<argument pos:start="3170:25" pos:end="3170:26"><expr pos:start="3170:25" pos:end="3170:26"><name pos:start="3170:25" pos:end="3170:26">f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="3171:7" pos:end="3171:28"><expr pos:start="3171:7" pos:end="3171:27"><name pos:start="3171:7" pos:end="3171:9">zf2</name> <operator pos:start="3171:11" pos:end="3171:11">=</operator> <operator pos:start="3171:13" pos:end="3171:15">new</operator> <call pos:start="3171:17" pos:end="3171:27"><name pos:start="3171:17" pos:end="3171:23">ZipFile</name><argument_list pos:start="3171:24" pos:end="3171:27">(<argument pos:start="3171:25" pos:end="3171:26"><expr pos:start="3171:25" pos:end="3171:26"><name pos:start="3171:25" pos:end="3171:26">f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return pos:start="3173:7" pos:end="3173:51">return <expr pos:start="3173:14" pos:end="3173:50"><call pos:start="3173:14" pos:end="3173:50"><name pos:start="3173:14" pos:end="3173:26">doEntryEquals</name><argument_list pos:start="3173:27" pos:end="3173:50">(<argument pos:start="3173:28" pos:end="3173:30"><expr pos:start="3173:28" pos:end="3173:30"><name pos:start="3173:28" pos:end="3173:30">zf1</name></expr></argument>, <argument pos:start="3173:33" pos:end="3173:35"><expr pos:start="3173:33" pos:end="3173:35"><name pos:start="3173:33" pos:end="3173:35">zf2</name></expr></argument>, <argument pos:start="3173:38" pos:end="3173:42"><expr pos:start="3173:38" pos:end="3173:42"><name pos:start="3173:38" pos:end="3173:42">path1</name></expr></argument>, <argument pos:start="3173:45" pos:end="3173:49"><expr pos:start="3173:45" pos:end="3173:49"><name pos:start="3173:45" pos:end="3173:49">path2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="3175:5" pos:end="3177:5">catch <parameter_list pos:start="3175:11" pos:end="3175:25">(<parameter pos:start="3175:12" pos:end="3175:24"><decl pos:start="3175:12" pos:end="3175:24"><type pos:start="3175:12" pos:end="3175:24"><name pos:start="3175:12" pos:end="3175:22">IOException</name></type> <name pos:start="3175:24" pos:end="3175:24">e</name></decl></parameter>)</parameter_list> <block pos:start="3175:27" pos:end="3177:5">{<block_content pos:start="3176:7" pos:end="3176:40">
      <throw pos:start="3176:7" pos:end="3176:40">throw <expr pos:start="3176:13" pos:end="3176:39"><call pos:start="3176:13" pos:end="3176:39"><name pos:start="3176:13" pos:end="3176:36"><name pos:start="3176:13" pos:end="3176:28">ZipExceptionUtil</name><operator pos:start="3176:29" pos:end="3176:29">.</operator><name pos:start="3176:30" pos:end="3176:36">rethrow</name></name><argument_list pos:start="3176:37" pos:end="3176:39">(<argument pos:start="3176:38" pos:end="3176:38"><expr pos:start="3176:38" pos:end="3176:38"><name pos:start="3176:38" pos:end="3176:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="3178:5" pos:end="3181:5">finally <block pos:start="3178:13" pos:end="3181:5">{<block_content pos:start="3179:7" pos:end="3180:24">
      <expr_stmt pos:start="3179:7" pos:end="3179:24"><expr pos:start="3179:7" pos:end="3179:23"><call pos:start="3179:7" pos:end="3179:23"><name pos:start="3179:7" pos:end="3179:18">closeQuietly</name><argument_list pos:start="3179:19" pos:end="3179:23">(<argument pos:start="3179:20" pos:end="3179:22"><expr pos:start="3179:20" pos:end="3179:22"><name pos:start="3179:20" pos:end="3179:22">zf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="3180:7" pos:end="3180:24"><expr pos:start="3180:7" pos:end="3180:23"><call pos:start="3180:7" pos:end="3180:23"><name pos:start="3180:7" pos:end="3180:18">closeQuietly</name><argument_list pos:start="3180:19" pos:end="3180:23">(<argument pos:start="3180:20" pos:end="3180:22"><expr pos:start="3180:20" pos:end="3180:22"><name pos:start="3180:20" pos:end="3180:22">zf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3184:3" pos:end="3196:5">/**
   * Compares two ZIP entries (byte-by-byte). .
   *
   * @param zf1
   *          first ZIP file.
   * @param zf2
   *          second ZIP file.
   * @param path1
   *          name of the first entry.
   * @param path2
   *          name of the second entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the contents of the entries were same.
   */</comment>
  <function pos:start="3197:3" pos:end="3204:3"><type pos:start="3197:3" pos:end="3197:23"><specifier pos:start="3197:3" pos:end="3197:8">public</specifier> <specifier pos:start="3197:10" pos:end="3197:15">static</specifier> <name pos:start="3197:17" pos:end="3197:23">boolean</name></type> <name pos:start="3197:25" pos:end="3197:35">entryEquals</name><parameter_list pos:start="3197:36" pos:end="3197:89">(<parameter pos:start="3197:37" pos:end="3197:47"><decl pos:start="3197:37" pos:end="3197:47"><type pos:start="3197:37" pos:end="3197:47"><name pos:start="3197:37" pos:end="3197:43">ZipFile</name></type> <name pos:start="3197:45" pos:end="3197:47">zf1</name></decl></parameter>, <parameter pos:start="3197:50" pos:end="3197:60"><decl pos:start="3197:50" pos:end="3197:60"><type pos:start="3197:50" pos:end="3197:60"><name pos:start="3197:50" pos:end="3197:56">ZipFile</name></type> <name pos:start="3197:58" pos:end="3197:60">zf2</name></decl></parameter>, <parameter pos:start="3197:63" pos:end="3197:74"><decl pos:start="3197:63" pos:end="3197:74"><type pos:start="3197:63" pos:end="3197:74"><name pos:start="3197:63" pos:end="3197:68">String</name></type> <name pos:start="3197:70" pos:end="3197:74">path1</name></decl></parameter>, <parameter pos:start="3197:77" pos:end="3197:88"><decl pos:start="3197:77" pos:end="3197:88"><type pos:start="3197:77" pos:end="3197:88"><name pos:start="3197:77" pos:end="3197:82">String</name></type> <name pos:start="3197:84" pos:end="3197:88">path2</name></decl></parameter>)</parameter_list> <block pos:start="3197:91" pos:end="3204:3">{<block_content pos:start="3198:5" pos:end="3203:5">
    <try pos:start="3198:5" pos:end="3203:5">try <block pos:start="3198:9" pos:end="3200:5">{<block_content pos:start="3199:7" pos:end="3199:51">
      <return pos:start="3199:7" pos:end="3199:51">return <expr pos:start="3199:14" pos:end="3199:50"><call pos:start="3199:14" pos:end="3199:50"><name pos:start="3199:14" pos:end="3199:26">doEntryEquals</name><argument_list pos:start="3199:27" pos:end="3199:50">(<argument pos:start="3199:28" pos:end="3199:30"><expr pos:start="3199:28" pos:end="3199:30"><name pos:start="3199:28" pos:end="3199:30">zf1</name></expr></argument>, <argument pos:start="3199:33" pos:end="3199:35"><expr pos:start="3199:33" pos:end="3199:35"><name pos:start="3199:33" pos:end="3199:35">zf2</name></expr></argument>, <argument pos:start="3199:38" pos:end="3199:42"><expr pos:start="3199:38" pos:end="3199:42"><name pos:start="3199:38" pos:end="3199:42">path1</name></expr></argument>, <argument pos:start="3199:45" pos:end="3199:49"><expr pos:start="3199:45" pos:end="3199:49"><name pos:start="3199:45" pos:end="3199:49">path2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <catch pos:start="3201:5" pos:end="3203:5">catch <parameter_list pos:start="3201:11" pos:end="3201:25">(<parameter pos:start="3201:12" pos:end="3201:24"><decl pos:start="3201:12" pos:end="3201:24"><type pos:start="3201:12" pos:end="3201:24"><name pos:start="3201:12" pos:end="3201:22">IOException</name></type> <name pos:start="3201:24" pos:end="3201:24">e</name></decl></parameter>)</parameter_list> <block pos:start="3201:27" pos:end="3203:5">{<block_content pos:start="3202:7" pos:end="3202:40">
      <throw pos:start="3202:7" pos:end="3202:40">throw <expr pos:start="3202:13" pos:end="3202:39"><call pos:start="3202:13" pos:end="3202:39"><name pos:start="3202:13" pos:end="3202:36"><name pos:start="3202:13" pos:end="3202:28">ZipExceptionUtil</name><operator pos:start="3202:29" pos:end="3202:29">.</operator><name pos:start="3202:30" pos:end="3202:36">rethrow</name></name><argument_list pos:start="3202:37" pos:end="3202:39">(<argument pos:start="3202:38" pos:end="3202:38"><expr pos:start="3202:38" pos:end="3202:38"><name pos:start="3202:38" pos:end="3202:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3206:3" pos:end="3218:5">/**
   * Compares two ZIP entries (byte-by-byte). .
   *
   * @param zf1
   *          first ZIP file.
   * @param zf2
   *          second ZIP file.
   * @param path1
   *          name of the first entry.
   * @param path2
   *          name of the second entry.
   * @return &lt;code&gt;true&lt;/code&gt; if the contents of the entries were same.
   */</comment>
  <function pos:start="3219:3" pos:end="3249:3"><type pos:start="3219:3" pos:end="3219:24"><specifier pos:start="3219:3" pos:end="3219:9">private</specifier> <specifier pos:start="3219:11" pos:end="3219:16">static</specifier> <name pos:start="3219:18" pos:end="3219:24">boolean</name></type> <name pos:start="3219:26" pos:end="3219:38">doEntryEquals</name><parameter_list pos:start="3219:39" pos:end="3219:92">(<parameter pos:start="3219:40" pos:end="3219:50"><decl pos:start="3219:40" pos:end="3219:50"><type pos:start="3219:40" pos:end="3219:50"><name pos:start="3219:40" pos:end="3219:46">ZipFile</name></type> <name pos:start="3219:48" pos:end="3219:50">zf1</name></decl></parameter>, <parameter pos:start="3219:53" pos:end="3219:63"><decl pos:start="3219:53" pos:end="3219:63"><type pos:start="3219:53" pos:end="3219:63"><name pos:start="3219:53" pos:end="3219:59">ZipFile</name></type> <name pos:start="3219:61" pos:end="3219:63">zf2</name></decl></parameter>, <parameter pos:start="3219:66" pos:end="3219:77"><decl pos:start="3219:66" pos:end="3219:77"><type pos:start="3219:66" pos:end="3219:77"><name pos:start="3219:66" pos:end="3219:71">String</name></type> <name pos:start="3219:73" pos:end="3219:77">path1</name></decl></parameter>, <parameter pos:start="3219:80" pos:end="3219:91"><decl pos:start="3219:80" pos:end="3219:91"><type pos:start="3219:80" pos:end="3219:91"><name pos:start="3219:80" pos:end="3219:85">String</name></type> <name pos:start="3219:87" pos:end="3219:91">path2</name></decl></parameter>)</parameter_list> <throws pos:start="3219:94" pos:end="3219:111">throws <argument pos:start="3219:101" pos:end="3219:111"><expr pos:start="3219:101" pos:end="3219:111"><name pos:start="3219:101" pos:end="3219:111">IOException</name></expr></argument></throws> <block pos:start="3219:113" pos:end="3249:3">{<block_content pos:start="3220:5" pos:end="3248:5">
    <decl_stmt pos:start="3220:5" pos:end="3220:27"><decl pos:start="3220:5" pos:end="3220:26"><type pos:start="3220:5" pos:end="3220:15"><name pos:start="3220:5" pos:end="3220:15">InputStream</name></type> <name pos:start="3220:17" pos:end="3220:19">is1</name> <init pos:start="3220:21" pos:end="3220:26">= <expr pos:start="3220:23" pos:end="3220:26"><literal type="null" pos:start="3220:23" pos:end="3220:26">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3221:5" pos:end="3221:27"><decl pos:start="3221:5" pos:end="3221:26"><type pos:start="3221:5" pos:end="3221:15"><name pos:start="3221:5" pos:end="3221:15">InputStream</name></type> <name pos:start="3221:17" pos:end="3221:19">is2</name> <init pos:start="3221:21" pos:end="3221:26">= <expr pos:start="3221:23" pos:end="3221:26"><literal type="null" pos:start="3221:23" pos:end="3221:26">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="3222:5" pos:end="3248:5">try <block pos:start="3222:9" pos:end="3244:5">{<block_content pos:start="3223:7" pos:end="3243:45">
      <decl_stmt pos:start="3223:7" pos:end="3223:40"><decl pos:start="3223:7" pos:end="3223:39"><type pos:start="3223:7" pos:end="3223:14"><name pos:start="3223:7" pos:end="3223:14">ZipEntry</name></type> <name pos:start="3223:16" pos:end="3223:17">e1</name> <init pos:start="3223:19" pos:end="3223:39">= <expr pos:start="3223:21" pos:end="3223:39"><call pos:start="3223:21" pos:end="3223:39"><name pos:start="3223:21" pos:end="3223:32"><name pos:start="3223:21" pos:end="3223:23">zf1</name><operator pos:start="3223:24" pos:end="3223:24">.</operator><name pos:start="3223:25" pos:end="3223:32">getEntry</name></name><argument_list pos:start="3223:33" pos:end="3223:39">(<argument pos:start="3223:34" pos:end="3223:38"><expr pos:start="3223:34" pos:end="3223:38"><name pos:start="3223:34" pos:end="3223:38">path1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="3224:7" pos:end="3224:40"><decl pos:start="3224:7" pos:end="3224:39"><type pos:start="3224:7" pos:end="3224:14"><name pos:start="3224:7" pos:end="3224:14">ZipEntry</name></type> <name pos:start="3224:16" pos:end="3224:17">e2</name> <init pos:start="3224:19" pos:end="3224:39">= <expr pos:start="3224:21" pos:end="3224:39"><call pos:start="3224:21" pos:end="3224:39"><name pos:start="3224:21" pos:end="3224:32"><name pos:start="3224:21" pos:end="3224:23">zf2</name><operator pos:start="3224:24" pos:end="3224:24">.</operator><name pos:start="3224:25" pos:end="3224:32">getEntry</name></name><argument_list pos:start="3224:33" pos:end="3224:39">(<argument pos:start="3224:34" pos:end="3224:38"><expr pos:start="3224:34" pos:end="3224:38"><name pos:start="3224:34" pos:end="3224:38">path2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt pos:start="3226:7" pos:end="3228:7"><if pos:start="3226:7" pos:end="3228:7">if <condition pos:start="3226:10" pos:end="3226:35">(<expr pos:start="3226:11" pos:end="3226:34"><name pos:start="3226:11" pos:end="3226:12">e1</name> <operator pos:start="3226:14" pos:end="3226:15">==</operator> <literal type="null" pos:start="3226:17" pos:end="3226:20">null</literal> <operator pos:start="3226:22" pos:end="3226:23">&amp;&amp;</operator> <name pos:start="3226:25" pos:end="3226:26">e2</name> <operator pos:start="3226:28" pos:end="3226:29">==</operator> <literal type="null" pos:start="3226:31" pos:end="3226:34">null</literal></expr>)</condition> <block pos:start="3226:37" pos:end="3228:7">{<block_content pos:start="3227:9" pos:end="3227:20">
        <return pos:start="3227:9" pos:end="3227:20">return <expr pos:start="3227:16" pos:end="3227:19"><literal type="boolean" pos:start="3227:16" pos:end="3227:19">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt pos:start="3230:7" pos:end="3232:7"><if pos:start="3230:7" pos:end="3232:7">if <condition pos:start="3230:10" pos:end="3230:35">(<expr pos:start="3230:11" pos:end="3230:34"><name pos:start="3230:11" pos:end="3230:12">e1</name> <operator pos:start="3230:14" pos:end="3230:15">==</operator> <literal type="null" pos:start="3230:17" pos:end="3230:20">null</literal> <operator pos:start="3230:22" pos:end="3230:23">||</operator> <name pos:start="3230:25" pos:end="3230:26">e2</name> <operator pos:start="3230:28" pos:end="3230:29">==</operator> <literal type="null" pos:start="3230:31" pos:end="3230:34">null</literal></expr>)</condition> <block pos:start="3230:37" pos:end="3232:7">{<block_content pos:start="3231:9" pos:end="3231:21">
        <return pos:start="3231:9" pos:end="3231:21">return <expr pos:start="3231:16" pos:end="3231:20"><literal type="boolean" pos:start="3231:16" pos:end="3231:20">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt pos:start="3234:7" pos:end="3234:35"><expr pos:start="3234:7" pos:end="3234:34"><name pos:start="3234:7" pos:end="3234:9">is1</name> <operator pos:start="3234:11" pos:end="3234:11">=</operator> <call pos:start="3234:13" pos:end="3234:34"><name pos:start="3234:13" pos:end="3234:30"><name pos:start="3234:13" pos:end="3234:15">zf1</name><operator pos:start="3234:16" pos:end="3234:16">.</operator><name pos:start="3234:17" pos:end="3234:30">getInputStream</name></name><argument_list pos:start="3234:31" pos:end="3234:34">(<argument pos:start="3234:32" pos:end="3234:33"><expr pos:start="3234:32" pos:end="3234:33"><name pos:start="3234:32" pos:end="3234:33">e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="3235:7" pos:end="3235:35"><expr pos:start="3235:7" pos:end="3235:34"><name pos:start="3235:7" pos:end="3235:9">is2</name> <operator pos:start="3235:11" pos:end="3235:11">=</operator> <call pos:start="3235:13" pos:end="3235:34"><name pos:start="3235:13" pos:end="3235:30"><name pos:start="3235:13" pos:end="3235:15">zf2</name><operator pos:start="3235:16" pos:end="3235:16">.</operator><name pos:start="3235:17" pos:end="3235:30">getInputStream</name></name><argument_list pos:start="3235:31" pos:end="3235:34">(<argument pos:start="3235:32" pos:end="3235:33"><expr pos:start="3235:32" pos:end="3235:33"><name pos:start="3235:32" pos:end="3235:33">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="3236:7" pos:end="3238:7"><if pos:start="3236:7" pos:end="3238:7">if <condition pos:start="3236:10" pos:end="3236:37">(<expr pos:start="3236:11" pos:end="3236:36"><name pos:start="3236:11" pos:end="3236:13">is1</name> <operator pos:start="3236:15" pos:end="3236:16">==</operator> <literal type="null" pos:start="3236:18" pos:end="3236:21">null</literal> <operator pos:start="3236:23" pos:end="3236:24">&amp;&amp;</operator> <name pos:start="3236:26" pos:end="3236:28">is2</name> <operator pos:start="3236:30" pos:end="3236:31">==</operator> <literal type="null" pos:start="3236:33" pos:end="3236:36">null</literal></expr>)</condition> <block pos:start="3236:39" pos:end="3238:7">{<block_content pos:start="3237:9" pos:end="3237:20">
        <return pos:start="3237:9" pos:end="3237:20">return <expr pos:start="3237:16" pos:end="3237:19"><literal type="boolean" pos:start="3237:16" pos:end="3237:19">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt pos:start="3239:7" pos:end="3241:7"><if pos:start="3239:7" pos:end="3241:7">if <condition pos:start="3239:10" pos:end="3239:37">(<expr pos:start="3239:11" pos:end="3239:36"><name pos:start="3239:11" pos:end="3239:13">is1</name> <operator pos:start="3239:15" pos:end="3239:16">==</operator> <literal type="null" pos:start="3239:18" pos:end="3239:21">null</literal> <operator pos:start="3239:23" pos:end="3239:24">||</operator> <name pos:start="3239:26" pos:end="3239:28">is2</name> <operator pos:start="3239:30" pos:end="3239:31">==</operator> <literal type="null" pos:start="3239:33" pos:end="3239:36">null</literal></expr>)</condition> <block pos:start="3239:39" pos:end="3241:7">{<block_content pos:start="3240:9" pos:end="3240:21">
        <return pos:start="3240:9" pos:end="3240:21">return <expr pos:start="3240:16" pos:end="3240:20"><literal type="boolean" pos:start="3240:16" pos:end="3240:20">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return pos:start="3243:7" pos:end="3243:45">return <expr pos:start="3243:14" pos:end="3243:44"><call pos:start="3243:14" pos:end="3243:44"><name pos:start="3243:14" pos:end="3243:34"><name pos:start="3243:14" pos:end="3243:20">IOUtils</name><operator pos:start="3243:21" pos:end="3243:21">.</operator><name pos:start="3243:22" pos:end="3243:34">contentEquals</name></name><argument_list pos:start="3243:35" pos:end="3243:44">(<argument pos:start="3243:36" pos:end="3243:38"><expr pos:start="3243:36" pos:end="3243:38"><name pos:start="3243:36" pos:end="3243:38">is1</name></expr></argument>, <argument pos:start="3243:41" pos:end="3243:43"><expr pos:start="3243:41" pos:end="3243:43"><name pos:start="3243:41" pos:end="3243:43">is2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <finally pos:start="3245:5" pos:end="3248:5">finally <block pos:start="3245:13" pos:end="3248:5">{<block_content pos:start="3246:7" pos:end="3247:32">
      <expr_stmt pos:start="3246:7" pos:end="3246:32"><expr pos:start="3246:7" pos:end="3246:31"><call pos:start="3246:7" pos:end="3246:31"><name pos:start="3246:7" pos:end="3246:26"><name pos:start="3246:7" pos:end="3246:13">IOUtils</name><operator pos:start="3246:14" pos:end="3246:14">.</operator><name pos:start="3246:15" pos:end="3246:26">closeQuietly</name></name><argument_list pos:start="3246:27" pos:end="3246:31">(<argument pos:start="3246:28" pos:end="3246:30"><expr pos:start="3246:28" pos:end="3246:30"><name pos:start="3246:28" pos:end="3246:30">is1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="3247:7" pos:end="3247:32"><expr pos:start="3247:7" pos:end="3247:31"><call pos:start="3247:7" pos:end="3247:31"><name pos:start="3247:7" pos:end="3247:26"><name pos:start="3247:7" pos:end="3247:13">IOUtils</name><operator pos:start="3247:14" pos:end="3247:14">.</operator><name pos:start="3247:15" pos:end="3247:26">closeQuietly</name></name><argument_list pos:start="3247:27" pos:end="3247:31">(<argument pos:start="3247:28" pos:end="3247:30"><expr pos:start="3247:28" pos:end="3247:30"><name pos:start="3247:28" pos:end="3247:30">is2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3251:3" pos:end="3256:5">/**
   * Closes the ZIP file while ignoring any errors.
   *
   * @param zf
   *          ZIP file to be closed.
   */</comment>
  <function pos:start="3257:3" pos:end="3265:3"><type pos:start="3257:3" pos:end="3257:20"><specifier pos:start="3257:3" pos:end="3257:8">public</specifier> <specifier pos:start="3257:10" pos:end="3257:15">static</specifier> <name pos:start="3257:17" pos:end="3257:20">void</name></type> <name pos:start="3257:22" pos:end="3257:33">closeQuietly</name><parameter_list pos:start="3257:34" pos:end="3257:45">(<parameter pos:start="3257:35" pos:end="3257:44"><decl pos:start="3257:35" pos:end="3257:44"><type pos:start="3257:35" pos:end="3257:41"><name pos:start="3257:35" pos:end="3257:41">ZipFile</name></type> <name pos:start="3257:43" pos:end="3257:44">zf</name></decl></parameter>)</parameter_list> <block pos:start="3257:47" pos:end="3265:3">{<block_content pos:start="3258:5" pos:end="3264:5">
    <try pos:start="3258:5" pos:end="3264:5">try <block pos:start="3258:9" pos:end="3262:5">{<block_content pos:start="3259:7" pos:end="3261:7">
      <if_stmt pos:start="3259:7" pos:end="3261:7"><if pos:start="3259:7" pos:end="3261:7">if <condition pos:start="3259:10" pos:end="3259:21">(<expr pos:start="3259:11" pos:end="3259:20"><name pos:start="3259:11" pos:end="3259:12">zf</name> <operator pos:start="3259:14" pos:end="3259:15">!=</operator> <literal type="null" pos:start="3259:17" pos:end="3259:20">null</literal></expr>)</condition> <block pos:start="3259:23" pos:end="3261:7">{<block_content pos:start="3260:9" pos:end="3260:19">
        <expr_stmt pos:start="3260:9" pos:end="3260:19"><expr pos:start="3260:9" pos:end="3260:18"><call pos:start="3260:9" pos:end="3260:18"><name pos:start="3260:9" pos:end="3260:16"><name pos:start="3260:9" pos:end="3260:10">zf</name><operator pos:start="3260:11" pos:end="3260:11">.</operator><name pos:start="3260:12" pos:end="3260:16">close</name></name><argument_list pos:start="3260:17" pos:end="3260:18">()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <catch pos:start="3263:5" pos:end="3264:5">catch <parameter_list pos:start="3263:11" pos:end="3263:25">(<parameter pos:start="3263:12" pos:end="3263:24"><decl pos:start="3263:12" pos:end="3263:24"><type pos:start="3263:12" pos:end="3263:24"><name pos:start="3263:12" pos:end="3263:22">IOException</name></type> <name pos:start="3263:24" pos:end="3263:24">e</name></decl></parameter>)</parameter_list> <block pos:start="3263:27" pos:end="3264:5">{<block_content>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc" pos:start="3267:3" pos:end="3271:5">/**
   * Simple helper to make inplace operation easier
   *
   * @author shelajev
   */</comment>
  <class pos:start="3272:3" pos:end="3278:3"><specifier pos:start="3272:3" pos:end="3272:9">private</specifier> <specifier pos:start="3272:11" pos:end="3272:18">abstract</specifier> <specifier pos:start="3272:20" pos:end="3272:25">static</specifier> class <name pos:start="3272:33" pos:end="3272:45">InPlaceAction</name> <block pos:start="3272:47" pos:end="3278:3">{

    <comment type="block" format="javadoc" pos:start="3274:5" pos:end="3276:7">/**
     * @return true if something has been changed during the action.
     */</comment>
    <function_decl pos:start="3277:5" pos:end="3277:39"><type pos:start="3277:5" pos:end="3277:20"><specifier pos:start="3277:5" pos:end="3277:12">abstract</specifier> <name pos:start="3277:14" pos:end="3277:20">boolean</name></type> <name pos:start="3277:22" pos:end="3277:24">act</name><parameter_list pos:start="3277:25" pos:end="3277:38">(<parameter pos:start="3277:26" pos:end="3277:37"><decl pos:start="3277:26" pos:end="3277:37"><type pos:start="3277:26" pos:end="3277:29"><name pos:start="3277:26" pos:end="3277:29">File</name></type> <name pos:start="3277:31" pos:end="3277:37">tmpFile</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></class>

  <comment type="block" format="javadoc" pos:start="3280:3" pos:end="3290:5">/**
   *
   * This method provides a general infrastructure for in-place operations.
   * It creates temp file as a destination, then invokes the action on source and destination.
   * Then it copies the result back into src file.
   *
   * @param src - source zip file we want to modify
   * @param action - action which actually modifies the archives
   *
   * @return result of the action
   */</comment>
  <function pos:start="3291:3" pos:end="3308:3"><type pos:start="3291:3" pos:end="3291:24"><specifier pos:start="3291:3" pos:end="3291:9">private</specifier> <specifier pos:start="3291:11" pos:end="3291:16">static</specifier> <name pos:start="3291:18" pos:end="3291:24">boolean</name></type> <name pos:start="3291:26" pos:end="3291:39">operateInPlace</name><parameter_list pos:start="3291:40" pos:end="3291:71">(<parameter pos:start="3291:41" pos:end="3291:48"><decl pos:start="3291:41" pos:end="3291:48"><type pos:start="3291:41" pos:end="3291:48"><name pos:start="3291:41" pos:end="3291:44">File</name></type> <name pos:start="3291:46" pos:end="3291:48">src</name></decl></parameter>, <parameter pos:start="3291:51" pos:end="3291:70"><decl pos:start="3291:51" pos:end="3291:70"><type pos:start="3291:51" pos:end="3291:70"><name pos:start="3291:51" pos:end="3291:63">InPlaceAction</name></type> <name pos:start="3291:65" pos:end="3291:70">action</name></decl></parameter>)</parameter_list> <block pos:start="3291:73" pos:end="3308:3">{<block_content pos:start="3292:5" pos:end="3307:5">
    <decl_stmt pos:start="3292:5" pos:end="3292:20"><decl pos:start="3292:5" pos:end="3292:19"><type pos:start="3292:5" pos:end="3292:8"><name pos:start="3292:5" pos:end="3292:8">File</name></type> <name pos:start="3292:10" pos:end="3292:12">tmp</name> <init pos:start="3292:14" pos:end="3292:19">= <expr pos:start="3292:16" pos:end="3292:19"><literal type="null" pos:start="3292:16" pos:end="3292:19">null</literal></expr></init></decl>;</decl_stmt>
    <try pos:start="3293:5" pos:end="3307:5">try <block pos:start="3293:9" pos:end="3301:5">{<block_content pos:start="3294:7" pos:end="3300:20">
      <expr_stmt pos:start="3294:7" pos:end="3294:54"><expr pos:start="3294:7" pos:end="3294:53"><name pos:start="3294:7" pos:end="3294:9">tmp</name> <operator pos:start="3294:11" pos:end="3294:11">=</operator> <call pos:start="3294:13" pos:end="3294:53"><name pos:start="3294:13" pos:end="3294:31"><name pos:start="3294:13" pos:end="3294:16">File</name><operator pos:start="3294:17" pos:end="3294:17">.</operator><name pos:start="3294:18" pos:end="3294:31">createTempFile</name></name><argument_list pos:start="3294:32" pos:end="3294:53">(<argument pos:start="3294:33" pos:end="3294:44"><expr pos:start="3294:33" pos:end="3294:44"><literal type="string" pos:start="3294:33" pos:end="3294:44">"zt-zip-tmp"</literal></expr></argument>, <argument pos:start="3294:47" pos:end="3294:52"><expr pos:start="3294:47" pos:end="3294:52"><literal type="string" pos:start="3294:47" pos:end="3294:52">".zip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt pos:start="3295:7" pos:end="3295:39"><decl pos:start="3295:7" pos:end="3295:38"><type pos:start="3295:7" pos:end="3295:13"><name pos:start="3295:7" pos:end="3295:13">boolean</name></type> <name pos:start="3295:15" pos:end="3295:20">result</name> <init pos:start="3295:22" pos:end="3295:38">= <expr pos:start="3295:24" pos:end="3295:38"><call pos:start="3295:24" pos:end="3295:38"><name pos:start="3295:24" pos:end="3295:33"><name pos:start="3295:24" pos:end="3295:29">action</name><operator pos:start="3295:30" pos:end="3295:30">.</operator><name pos:start="3295:31" pos:end="3295:33">act</name></name><argument_list pos:start="3295:34" pos:end="3295:38">(<argument pos:start="3295:35" pos:end="3295:37"><expr pos:start="3295:35" pos:end="3295:37"><name pos:start="3295:35" pos:end="3295:37">tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt pos:start="3296:7" pos:end="3299:7"><if pos:start="3296:7" pos:end="3299:7">if <condition pos:start="3296:10" pos:end="3296:17">(<expr pos:start="3296:11" pos:end="3296:16"><name pos:start="3296:11" pos:end="3296:16">result</name></expr>)</condition> <block pos:start="3296:19" pos:end="3299:7">{<block_content pos:start="3297:9" pos:end="3298:37"> <comment type="line" pos:start="3296:21" pos:end="3296:43">// else nothing changes</comment>
        <expr_stmt pos:start="3297:9" pos:end="3297:35"><expr pos:start="3297:9" pos:end="3297:34"><call pos:start="3297:9" pos:end="3297:34"><name pos:start="3297:9" pos:end="3297:29"><name pos:start="3297:9" pos:end="3297:17">FileUtils</name><operator pos:start="3297:18" pos:end="3297:18">.</operator><name pos:start="3297:19" pos:end="3297:29">forceDelete</name></name><argument_list pos:start="3297:30" pos:end="3297:34">(<argument pos:start="3297:31" pos:end="3297:33"><expr pos:start="3297:31" pos:end="3297:33"><name pos:start="3297:31" pos:end="3297:33">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3298:9" pos:end="3298:37"><expr pos:start="3298:9" pos:end="3298:36"><call pos:start="3298:9" pos:end="3298:36"><name pos:start="3298:9" pos:end="3298:26"><name pos:start="3298:9" pos:end="3298:17">FileUtils</name><operator pos:start="3298:18" pos:end="3298:18">.</operator><name pos:start="3298:19" pos:end="3298:26">moveFile</name></name><argument_list pos:start="3298:27" pos:end="3298:36">(<argument pos:start="3298:28" pos:end="3298:30"><expr pos:start="3298:28" pos:end="3298:30"><name pos:start="3298:28" pos:end="3298:30">tmp</name></expr></argument>, <argument pos:start="3298:33" pos:end="3298:35"><expr pos:start="3298:33" pos:end="3298:35"><name pos:start="3298:33" pos:end="3298:35">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return pos:start="3300:7" pos:end="3300:20">return <expr pos:start="3300:14" pos:end="3300:19"><name pos:start="3300:14" pos:end="3300:19">result</name></expr>;</return>
    </block_content>}</block>
    <catch pos:start="3302:5" pos:end="3304:5">catch <parameter_list pos:start="3302:11" pos:end="3302:25">(<parameter pos:start="3302:12" pos:end="3302:24"><decl pos:start="3302:12" pos:end="3302:24"><type pos:start="3302:12" pos:end="3302:24"><name pos:start="3302:12" pos:end="3302:22">IOException</name></type> <name pos:start="3302:24" pos:end="3302:24">e</name></decl></parameter>)</parameter_list> <block pos:start="3302:27" pos:end="3304:5">{<block_content pos:start="3303:7" pos:end="3303:40">
      <throw pos:start="3303:7" pos:end="3303:40">throw <expr pos:start="3303:13" pos:end="3303:39"><call pos:start="3303:13" pos:end="3303:39"><name pos:start="3303:13" pos:end="3303:36"><name pos:start="3303:13" pos:end="3303:28">ZipExceptionUtil</name><operator pos:start="3303:29" pos:end="3303:29">.</operator><name pos:start="3303:30" pos:end="3303:36">rethrow</name></name><argument_list pos:start="3303:37" pos:end="3303:39">(<argument pos:start="3303:38" pos:end="3303:38"><expr pos:start="3303:38" pos:end="3303:38"><name pos:start="3303:38" pos:end="3303:38">e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch>
    <finally pos:start="3305:5" pos:end="3307:5">finally <block pos:start="3305:13" pos:end="3307:5">{<block_content pos:start="3306:7" pos:end="3306:35">
      <expr_stmt pos:start="3306:7" pos:end="3306:35"><expr pos:start="3306:7" pos:end="3306:34"><call pos:start="3306:7" pos:end="3306:34"><name pos:start="3306:7" pos:end="3306:29"><name pos:start="3306:7" pos:end="3306:15">FileUtils</name><operator pos:start="3306:16" pos:end="3306:16">.</operator><name pos:start="3306:17" pos:end="3306:29">deleteQuietly</name></name><argument_list pos:start="3306:30" pos:end="3306:34">(<argument pos:start="3306:31" pos:end="3306:33"><expr pos:start="3306:31" pos:end="3306:33"><name pos:start="3306:31" pos:end="3306:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

}</block></class>
</unit>

