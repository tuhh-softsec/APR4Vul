private transient boolean var2 ; final XStream var1 ; <START_VUL> if ( var1 . var2 ) { var1 . addPermission ( NoTypePermission . NONE ) ; var1 . addPermission ( NullPermission . NULL ) ; var1 . addPermission ( PrimitiveTypePermission . PRIMITIVES ) ; var1 . addPermission ( ArrayTypePermission . ARRAYS ) ; var1 . addPermission ( InterfaceTypePermission . INTERFACES ) ; var1 . allowTypeHierarchy ( Calendar . class ) ; var1 . allowTypeHierarchy ( Collection . class ) ; var1 . allowTypeHierarchy ( Map . class ) ; var1 . allowTypeHierarchy ( Map . Entry . class ) ; var1 . allowTypeHierarchy ( Member . class ) ; var1 . allowTypeHierarchy ( Number . class ) ; var1 . allowTypeHierarchy ( Throwable . class ) ; var1 . allowTypeHierarchy ( TimeZone . class ) ; Class type = JVM . loadClassForName ( str ) ; if ( type != null ) { var1 . allowTypeHierarchy ( type ) ; } type = JVM . loadClassForName ( str ) ; if ( type != null ) { var1 . allowTypeHierarchy ( type ) ; } final Set types = new HashSet ( ) ; types . add ( BitSet . class ) ; types . add ( Charset . class ) ; types . add ( Class . class ) ; types . add ( Currency . class ) ; types . add ( Date . class ) ; types . add ( DecimalFormatSymbols . class ) ; types . add ( File . class ) ; types . add ( Locale . class ) ; types . add ( Object . class ) ; types . add ( Pattern . class ) ; types . add ( StackTraceElement . class ) ; types . add ( String . class ) ; types . add ( StringBuffer . class ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( URL . class ) ; types . add ( URI . class ) ; types . add ( JVM . loadClassForName ( str ) ) ; if ( JVM . isSQLAvailable ( ) ) { types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; } if ( JVM . isVersion ( num1 ) ) { var1 . allowTypeHierarchy ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; var1 . allowTypeHierarchy ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; var1 . allowTypeHierarchy ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; types . add ( JVM . loadClassForName ( str ) ) ; } types . remove ( null ) ; final Iterator iter = types . iterator ( ) ; final Class [ ] classes = new Class [ types . size ( ) ] ; for ( int i = num2 ; i < classes . length ; ++ i ) { classes [ i ] = ( Class ) iter . next ( ) ; } var1 . allowTypes ( classes ) ; } else   > <END_VUL>
