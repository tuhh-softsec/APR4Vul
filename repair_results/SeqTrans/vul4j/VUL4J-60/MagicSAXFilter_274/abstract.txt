Tag var1 = policy . getTagByLowercaseName ( tagNameLowerCase ) ; <START_VUL> } else if ( var1 . isAction ( str ) ) { boolean isStyle = str . endsWith ( element . localpart ) ; if ( isStyle ) { this . operations . push ( Ops . CSS ) ; cssContent = new StringBuffer ( ) ; cssAttributes = attributes ; } else { boolean removeTag = false ; boolean filterTag = false ; for ( int i = num1 ; i < attributes . getLength ( ) ; i ++ ) { String name = attributes . getQName ( i ) ; String value = attributes . getValue ( i ) ; String nameLower = name . toLowerCase ( ) ; Attribute attribute = var1 . getAttributeByName ( nameLower ) ; if ( attribute == null ) { attribute = policy . getGlobalAttributeByName ( nameLower ) ; } if ( str . equalsIgnoreCase ( name ) ) { CssScanner styleScanner = makeCssScanner ( ) ; try { CleanResults cr = styleScanner . scanInlineStyle ( value , element . localpart , maxInputSize ) ; attributes . setValue ( i , cr . getCleanHTML ( ) ) ; validattributes . addAttribute ( makeSimpleQname ( name ) , str , cr . getCleanHTML ( ) ) ; errorMessages . addAll ( cr . getErrorMessages ( ) ) ; } catch ( ScanException e ) { addError ( ErrorMessageUtil . ERROR_CSS_ATTRIBUTE_MALFORMED , new Object [ ] { element . localpart , HTMLEntityEncoder . htmlEntityEncode ( value ) } ) ; } } else if ( attribute != null ) { boolean isValid = false ; if ( attribute . containsAllowedValue ( value . toLowerCase ( ) ) ) { validattributes . addAttribute ( makeSimpleQname ( name ) , str , value ) ; isValid = true ; } if ( ! isValid ) { isValid = attribute . matchesAllowedExpression ( value ) ; if ( isValid ) { validattributes . addAttribute ( makeSimpleQname ( name ) , str , value ) ; } } if ( ! isValid && str . equals ( attribute . getOnInvalid ( ) ) ) { addError ( ErrorMessageUtil . ERROR_ATTRIBUTE_INVALID_REMOVED , new Object [ ] { var1 . getName ( ) , HTMLEntityEncoder . htmlEntityEncode ( name ) , HTMLEntityEncoder . htmlEntityEncode ( value ) } ) ; removeTag = true ; } else if ( ! isValid && ( str . equals ( attribute . getOnInvalid ( ) ) || masqueradingParam ) ) { addError ( ErrorMessageUtil . ERROR_ATTRIBUTE_CAUSE_FILTER , new Object [ ] { var1 . getName ( ) , HTMLEntityEncoder . htmlEntityEncode ( name ) , HTMLEntityEncoder . htmlEntityEncode ( value ) } ) ; filterTag = true ; } else if ( ! isValid ) { addError ( ErrorMessageUtil . ERROR_ATTRIBUTE_INVALID , new Object [ ] { var1 . getName ( ) , HTMLEntityEncoder . htmlEntityEncode ( name ) , HTMLEntityEncoder . htmlEntityEncode ( value ) } ) ; } } else { addError ( ErrorMessageUtil . ERROR_ATTRIBUTE_NOT_IN_POLICY , new Object [ ] { element . localpart , HTMLEntityEncoder . htmlEntityEncode ( name ) , HTMLEntityEncoder . htmlEntityEncode ( value ) } ) ; if ( masqueradingParam ) { filterTag = true ; } } } if ( removeTag ) { this . operations . push ( Ops . REMOVE ) ; } else if ( filterTag ) { this . operations . push ( Ops . FILTER ) ; } else { if ( isNofollowAnchors && str . equals ( element . localpart ) ) { validattributes . addAttribute ( makeSimpleQname ( str ) , str , str ) ; } if ( masqueradingParam ) { validattributes = new XMLAttributesImpl ( ) ; validattributes . addAttribute ( makeSimpleQname ( str ) , str , embedName ) ; validattributes . addAttribute ( makeSimpleQname ( str ) , str , embedValue ) ; } this . operations . push ( Ops . KEEP ) ; } }  else if ( var1 . isAction ( str ) )   > <END_VUL>
boolean var1 = str . endsWith ( element . localpart ) ; <START_VUL> if ( var1 ) { this . operations . push ( Ops . CSS ) ; cssContent = new StringBuffer ( ) ; cssAttributes = attributes ; } else <END_VUL>
