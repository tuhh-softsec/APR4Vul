cd /workdir/GenProg_vul4j_apereo_java-cas-client_VUL4J-38;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	GenProg \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/GenProg_vul4j_apereo_java-cas-client_VUL4J-38 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -pl cas-client-core -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/GenProg_vul4j_apereo_java-cas-client_VUL4J-38/cas-client-core/src/main/java \
	-DbinJavaDir /workdir/GenProg_vul4j_apereo_java-cas-client_VUL4J-38/cas-client-core/target/classes \
	-DbinTestDir /workdir/GenProg_vul4j_apereo_java-cas-client_VUL4J-38/cas-client-core/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-38 \
	-Ddependences /root/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/root/.m2/repository/org/opensaml/xmltooling/1.3.2-1/xmltooling-1.3.2-1.jar:/root/.m2/repository/org/opensaml/openws/1.4.2-1/openws-1.4.2-1.jar:/root/.m2/repository/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar:/root/.m2/repository/joda-time/joda-time/1.6.2/joda-time-1.6.2.jar:/root/.m2/repository/org/springframework/spring-beans/3.1.3.RELEASE/spring-beans-3.1.3.RELEASE.jar:/root/.m2/repository/xalan/xalan/2.7.1/xalan-2.7.1.jar:/root/.m2/repository/org/slf4j/jul-to-slf4j/1.6.1/jul-to-slf4j-1.6.1.jar:/root/.m2/repository/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45.jar:/root/.m2/repository/org/slf4j/log4j-over-slf4j/1.6.1/log4j-over-slf4j-1.6.1.jar:/root/.m2/repository/commons-collections/commons-collections/3.1/commons-collections-3.1.jar:/root/.m2/repository/org/slf4j/slf4j-api/1.7.1/slf4j-api-1.7.1.jar:/root/.m2/repository/ca/juliusdavies/not-yet-commons-ssl/0.3.9/not-yet-commons-ssl-0.3.9.jar:/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/root/.m2/repository/org/springframework/spring-expression/3.1.3.RELEASE/spring-expression-3.1.3.RELEASE.jar:/root/.m2/repository/xalan/serializer/2.7.1/serializer-2.7.1.jar:/root/.m2/repository/velocity/velocity/1.5/velocity-1.5.jar:/root/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/root/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar:/root/.m2/repository/org/springframework/spring-core/3.1.3.RELEASE/spring-core-3.1.3.RELEASE.jar:/root/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/root/.m2/repository/log4j/log4j/1.2.15/log4j-1.2.15.jar:/root/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/root/.m2/repository/commons-lang/commons-lang/2.1/commons-lang-2.1.jar:/root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.1/jcl-over-slf4j-1.7.1.jar:/root/.m2/repository/org/springframework/spring-asm/3.1.3.RELEASE/spring-asm-3.1.3.RELEASE.jar:/root/.m2/repository/org/apache/santuario/xmlsec/1.4.4/xmlsec-1.4.4.jar:/root/.m2/repository/org/owasp/esapi/esapi/2.0GA/esapi-2.0GA.jar:/root/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/root/.m2/repository/xml-security/xmlsec/1.3.0/xmlsec-1.3.0.jar:/root/.m2/repository/org/slf4j/slf4j-simple/1.7.1/slf4j-simple-1.7.1.jar:/root/.m2/repository/org/springframework/spring-aop/3.1.3.RELEASE/spring-aop-3.1.3.RELEASE.jar:/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar:/root/.m2/repository/org/springframework/spring-test/3.1.3.RELEASE/spring-test-3.1.3.RELEASE.jar:/root/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/root/.m2/repository/javax/mail/mail/1.4/mail-1.4.jar:/root/.m2/repository/org/opensaml/opensaml/2.5.1-1/opensaml-2.5.1-1.jar:/root/.m2/repository/org/springframework/spring-context/3.1.3.RELEASE/spring-context-3.1.3.RELEASE.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
Fault localization starts...
Number of positive tests: 84
Number of negative tests: 1
Negative tests: [org.jasig.cas.client.validation.Cas10TicketValidatorTests#urlEncodedValues]
Faulty Lines: 
org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator#147:1.0
org.jasig.cas.client.validation.Cas20ServiceTicketValidator#73:1.0
org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator#113:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 84
Filtering of the tests is finished!
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Retrieving response from server.");

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                urlParameters.put("renew", "true");
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(suffix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Properties properties = new Properties();
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        int i = 0;
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,9 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        CommonUtils.assertNotNull(this.proxyGrantingTicketStorage,
+				"proxyGrantingTicketStorage cannot be null.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 13
Fitness: 14.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.encoding = encoding;
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.renew = renew;
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.customParameters = customParameters;
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                urlParameters.put("renew", "true");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1073e486e434 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 11
Fitness: 12.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                urlParameters.put("renew", "true");
}
}

Number of failed tests: 10
Fitness: 11.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        int i = 0;
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        int i = 0;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(suffix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(suffix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.encoding = encoding;
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Cas10TicketValidator validator = new Cas10TicketValidator(
+				casServerUrlPrefix);

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.encoding = encoding;
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return "validate";
}
}

Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(suffix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(suffix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.customParameters = customParameters;

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return buffer.toString();
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..e641c9f07bc3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..464a5da41142 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -111,6 +111,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
urlParameters.put("service", encodeUrl(serviceUrl));
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 9
Fitness: 10.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return buffer.toString();
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return buffer.toString();
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                final Map<String, String> additionalParameters = new HashMap<String, String>();
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..464a5da41142 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..464a5da41142 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..464a5da41142 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f2ac63ec7df1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        if (this.customParameters != null) {
+			urlParameters.putAll(this.customParameters);
+		}

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Placing URL parameters in map.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d070e147c74e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return null;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                populateUrlAttributeMap(urlParameters);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..cd4b6d7955bb 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                populateUrlAttributeMap(urlParameters);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        if (this.renew) {
+			urlParameters.put("renew", "true");
+		}

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +146,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                populateUrlAttributeMap(urlParameters);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..e641c9f07bc3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.encoding = encoding;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.encoding = encoding;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                urlParameters.put("ticket", ticket);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				urlParameters.put("service", encodeUrl(serviceUrl));
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 14
Fitness: 15.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                urlParameters.put("renew", "true");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,13 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 10
Fitness: 11.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		logger.debug("Retrieving response from server.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..52e6bda5e466 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return "proxyValidate";
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("ticket", ticket);
+		urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +146,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				return this.encoding;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				if (this.renew) {
+					urlParameters.put("renew", "true");
+				}
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Retrieving response from server.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1d3b6ce7264b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8fc86c808308 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..e641c9f07bc3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1d3b6ce7264b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1d3b6ce7264b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.renew = renew;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1d3b6ce7264b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1d3b6ce7264b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (value != null) {
+					buffer.append(i++ == 0 ? "?" : "&");
+					buffer.append(key);
+					buffer.append("=");
+					buffer.append(value);
+				}
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8fc86c808308 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8fc86c808308 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8fc86c808308 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8fc86c808308 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8fc86c808308 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..c6118f3d4bfe 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        populateUrlAttributeMap(urlParameters);
}

protected String getUrlSuffix() {
Number of failed tests: 14
Fitness: 15.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..c6118f3d4bfe 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        populateUrlAttributeMap(urlParameters);
}

protected String getUrlSuffix() {
Number of failed tests: 14
Fitness: 15.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Placing URL parameters in map.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3b93c1517cb9 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,9 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		final CustomAttributeHandler handler = new CustomAttributeHandler();
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..d235b4357521 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final CustomAttributeHandler handler = new CustomAttributeHandler();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				urlParameters.put("service", encodeUrl(serviceUrl));
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 14
Fitness: 15.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..e641c9f07bc3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..68a7574882d4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        CommonUtils.assertNotNull(this.proxyGrantingTicketStorage,
+				"proxyGrantingTicketStorage cannot be null.");
}

protected String getUrlSuffix() {
Number of failed tests: 9
Fitness: 10.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..9fa1fe0a18fa 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..9fa1fe0a18fa 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 9
Fitness: 10.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..9fa1fe0a18fa 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..7eaa7b73aa9b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1d3b6ce7264b 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1df029f16334 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
+		logger.debug("Placing URL parameters in map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Calling template URL attribute map.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        this.urlConnectionFactory = urlConnectionFactory;

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
+				if (!this.casServerUrlPrefix.endsWith("/")) {
+					buffer.append("/");
+				}
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Calling template URL attribute map.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				this.encoding = encoding;
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..12d6e19bd553 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,9 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        CommonUtils.assertNotNull(this.proxyGrantingTicketStorage,
+				"proxyGrantingTicketStorage cannot be null.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..12d6e19bd553 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,9 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        CommonUtils.assertNotNull(this.proxyGrantingTicketStorage,
+				"proxyGrantingTicketStorage cannot be null.");
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 11
Fitness: 12.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Calling template URL attribute map.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Calling template URL attribute map.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,13 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
+				buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				this.encoding = encoding;
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 10
Fitness: 11.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,14 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
+				this.encoding = encoding;
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				return "proxyValidate";
}
}

Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				CommonUtils.assertNotNull(this.casServerUrlPrefix,
+						"casServerUrlPrefix cannot be null.");
+				buffer.append(this.casServerUrlPrefix);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..fa3f3ea131b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        urlParameters.put("renew", "true");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (!this.casServerUrlPrefix.endsWith("/")) {
+					buffer.append("/");
+				}
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,12 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
+				buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (!this.casServerUrlPrefix.endsWith("/")) {
+					buffer.append("/");
+				}
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (!this.casServerUrlPrefix.endsWith("/")) {
+					buffer.append("/");
+				}
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.renew = renew;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                this.encoding = encoding;
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (!this.casServerUrlPrefix.endsWith("/")) {
+					buffer.append("/");
+				}
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                if (!this.casServerUrlPrefix.endsWith("/")) {
+					buffer.append("/");
+				}
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 9
Fitness: 10.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..50ab9d25e3b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..4e72b43c8aa1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		final Map<String, String> additionalParameters = new HashMap<String, String>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1073e486e434 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 9
Fitness: 10.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(this.casServerUrlPrefix);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..ed0883d2d954 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1073e486e434 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				logger.debug("Loading custom parameters from configuration.");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..1073e486e434 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Placing URL parameters in map.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("=");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				urlParameters.put("ticket", ticket);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..63cffcd0e039 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Placing URL parameters in map.");
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..9f73d7c05777 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		int i = 0;
+		urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Placing URL parameters in map.");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                logger.debug("Placing URL parameters in map.");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(key);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return "proxyValidate";
}
}

Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("renew", "true");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f4e3baf0be3f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..8dd375db81e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		CommonUtils.assertNotNull(this.proxyGrantingTicketStorage,
+				"proxyGrantingTicketStorage cannot be null.");
}

protected String getUrlSuffix() {
Number of failed tests: 13
Fitness: 14.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f4e3baf0be3f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f4e3baf0be3f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..9ff4333d59a3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
+		final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                return "proxyValidate";
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Calling template URL attribute map.");

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..f4e3baf0be3f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3f91f28cfc5f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyCallbackUrl = proxyCallbackUrl;
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        urlParameters.put("ticket", ticket);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,10 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		CommonUtils.assertNotNull(this.casServerUrlPrefix,
+				"casServerUrlPrefix cannot be null.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
+			urlParameters.put("renew", "true");
+		}
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..eb9bcb0290b0 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -71,6 +71,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+		logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +145,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.renew = renew;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a03bd12d1e5e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyGrantingTicketStorage = proxyGrantingTicketStorage;
+		logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
+			urlParameters.put("renew", "true");
+		}
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,11 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
+			urlParameters.put("renew", "true");
+		}
+		if (this.renew) {
urlParameters.put("renew", "true");
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.renew = renew;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.renew = renew;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        populateUrlAttributeMap(urlParameters);

if (this.renew) {
urlParameters.put("renew", "true");
@@ -144,7 +144,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..6e538f6cc37e 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final SAXParserFactory spf = SAXParserFactory.newInstance();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..68a7574882d4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,8 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        CommonUtils.assertNotNull(this.proxyGrantingTicketStorage,
+				"proxyGrantingTicketStorage cannot be null.");
}

protected String getUrlSuffix() {
Number of failed tests: 12
Fitness: 13.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
+				buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..dfb948eb0831 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final List<String[]> proxyChains = new ArrayList<String[]>();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append("/");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
+				buffer.append(value);
}
}

Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        logger.debug("Loading custom parameters from configuration.");
+		if (this.renew) {
urlParameters.put("renew", "true");
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..fa3f3ea131b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        urlParameters.put("renew", "true");
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..fa3f3ea131b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        urlParameters.put("renew", "true");
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        this.renew = renew;
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(i++ == 0 ? "?" : "&");
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..fa3f3ea131b1 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        urlParameters.put("renew", "true");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 5
Fitness: 6.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,7 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
+        logger.debug("Loading custom parameters from configuration.");
+		urlParameters.put("service", encodeUrl(serviceUrl));

if (this.renew) {
urlParameters.put("renew", "true");
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,9 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        final Cas10TicketValidator validator = new Cas10TicketValidator(
+				casServerUrlPrefix);
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +144,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..a5e7533121e4 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Calling template URL attribute map.");
}

protected String getUrlSuffix() {
Number of failed tests: 10
Fitness: 11.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        populateUrlAttributeMap(urlParameters);
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..e641c9f07bc3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..3e25e4136102 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        logger.debug("Retrieving response from server.");
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
@@ -144,7 +142,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -144,7 +144,7 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
+                buffer.append(key);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..b2e18fb8486f 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,6 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
}

protected String getUrlSuffix() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,8 +110,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
if (this.renew) {
urlParameters.put("renew", "true");
}
diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..43d24ca52721 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        final String suffix = getUrlSuffix();
}

protected String getUrlSuffix() {
Number of failed tests: 7
Fitness: 8.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -110,9 +110,8 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator

logger.debug("Placing URL parameters in map.");
urlParameters.put("ticket", ticket);
-        urlParameters.put("service", encodeUrl(serviceUrl));
-
-        if (this.renew) {
+        populateUrlAttributeMap(urlParameters);
+		if (this.renew) {
urlParameters.put("renew", "true");
}

@@ -144,7 +143,6 @@ public abstract class AbstractUrlBasedTicketValidator implements TicketValidator
buffer.append(i++ == 0 ? "?" : "&");
buffer.append(key);
buffer.append("=");
-                buffer.append(value);
}
}

diff --git a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
index 4380348b29c1..e641c9f07bc3 100644
--- a/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
+++ b/cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java
@@ -70,7 +70,7 @@ public class Cas20ServiceTicketValidator extends AbstractCasProtocolUrlBasedTick
* @param urlParameters the Map containing the existing parameters to send to the server.
*/
protected final void populateUrlAttributeMap(final Map<String, String> urlParameters) {
-        urlParameters.put("pgtUrl", encodeUrl(this.proxyCallbackUrl));
+        this.proxyRetriever = proxyRetriever;
}

protected String getUrlSuffix() {


Node: 2c8178711f7b



Date: Sat Oct  1 16:17:01 EDT 2022

