cd /workdir/Arja_vul4j_ESAPI_esapi-java-legacy_VUL4J-44;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/jdk1.7.0_80/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/jdk1.7.0_80";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	Arja \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/Arja_vul4j_ESAPI_esapi-java-legacy_VUL4J-44 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/Arja_vul4j_ESAPI_esapi-java-legacy_VUL4J-44/src/main/java \
	-DbinJavaDir /workdir/Arja_vul4j_ESAPI_esapi-java-legacy_VUL4J-44/target/classes \
	-DbinTestDir /workdir/Arja_vul4j_ESAPI_esapi-java-legacy_VUL4J-44/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-44 \
	-Ddependences /root/.m2/repository/org/beanshell/bsh-core/2.0b4/bsh-core-2.0b4.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/.m2/repository/xom/xom/1.2.5/xom-1.2.5.jar:/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-util/1.8/batik-util-1.8.jar:/root/.m2/repository/net/sourceforge/nekohtml/nekohtml/1.9.16/nekohtml-1.9.16.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-css/1.8/batik-css-1.8.jar:/root/.m2/repository/xml-apis/xml-apis-ext/1.3.04/xml-apis-ext-1.3.04.jar:/root/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/root/.m2/repository/xerces/xercesImpl/2.8.0/xercesImpl-2.8.0.jar:/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/root/.m2/repository/org/owasp/antisamy/antisamy/1.5.3/antisamy-1.5.3.jar:/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/root/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar:/root/.m2/repository/xalan/xalan/2.7.0/xalan-2.7.0.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-ext/1.8/batik-ext-1.8.jar:/root/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/root/.m2/repository/commons-fileupload/commons-fileupload/1.3.1/commons-fileupload-1.3.1.jar:/root/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar:/root/.m2/repository/xml-apis/xml-apis/1.3.03/xml-apis-1.3.03.jar:/root/.m2/repository/commons-configuration/commons-configuration/1.10/commons-configuration-1.10.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar:/root/.m2/repository/commons-beanutils/commons-beanutils-core/1.8.3/commons-beanutils-core-1.8.3.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Fault localization starts...
Number of positive tests: 553
Number of negative tests: 15
Negative tests: [org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (.)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (!)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (=)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (^)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS ($)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (*)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (~)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (+)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (?)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (_)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (-)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (|)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec IMMUNE_PERCENT (%)], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec %De], org.owasp.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (@)]]
Faulty Lines: 
org.owasp.esapi.codecs.PercentCodec#98:1.0
org.owasp.esapi.codecs.PercentCodec#100:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 553
Filtering of the tests is finished!
----------------------------------
Patch Candidate:
@@ -95,6 +95,9 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == '\'')
+			return "\'\'";
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == ';')
+			return ".";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,9 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (UNENCODED_SET.contains(c))
+			return c.toString();
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == null)
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		bytes = toUtf8Bytes(cStr);
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,9 +95,11 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == ';')
+			return ".";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		bytes = toUtf8Bytes(cStr);
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c == '\"')
+			return "";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == '\'')
+			return "\'\'";
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,8 +95,13 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (UNENCODED_SET.contains(c))
+			return c.toString();
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (UNENCODED_SET.contains(c))
+			return cStr;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,9 +95,11 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (!Character.isDigit(c.charValue()))
+			return null;
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 70
Weighted failure rate: 0.12995780590717299
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == '\'')
+			return "\'\'";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == '\"')
+			return "";
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c == '\"')
+			return "";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c == '\"')
+			return "";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == null)
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		bytes = toUtf8Bytes(cStr);
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == null)
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune))
+			return c.toString();
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (UNENCODED_SET.contains(c))
+			return cStr;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,9 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,8 +95,13 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == null)
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (!Character.isDigit(c.charValue()))
+			return null;
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 1, 70
Weighted failure rate: 0.12995780590717299
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (!Character.isDigit(c.charValue()))
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 70
Weighted failure rate: 0.12995780590717299
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune))
+			return c.toString();
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (UNENCODED_SET.contains(c))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,9 +95,11 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c == '\'')
+			return "\'\'";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c.charValue() == ';')
+			return ".";
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == '\'')
+			return "\'\'";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,9 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == ';')
+			return ".";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == null)
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c == '\"')
+			return "";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == '\"')
+			return "";
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,9 +95,11 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == '\'')
+			return "\'\'";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,8 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		bytes = toUtf8Bytes(cStr);
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,8 +95,13 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -95,9 +95,12 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,8 +95,13 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (containsCharacter(c, immune)) {
+			return "" + c;
+		}
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (containsCharacter(c, immune))
+			return c.toString();
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 0, 0
Weighted failure rate: 0.0
----------------------------------
Patch Candidate:
@@ -95,6 +95,8 @@ public class PercentCodec extends Codec
*/
public String encodeCharacter( char[] immune, Character c )
{
+		if (c.charValue() == '\'')
+			return "\'\'";
String cStr = String.valueOf(c.charValue());
byte[] bytes;
StringBuilder sb;
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,6 +97,8 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
+		if (c == null)
+			return null;
StringBuilder sb;

if(UNENCODED_SET.contains(c))
Number of failed tests: 1, 14
Weighted failure rate: 0.07932489451476793
----------------------------------
Patch Candidate:
@@ -97,7 +97,7 @@ public class PercentCodec extends Codec
{
String cStr = String.valueOf(c.charValue());
byte[] bytes;
-		StringBuilder sb;
+		StringBuilder sb = new StringBuilder();

if(UNENCODED_SET.contains(c))
return cStr;


Node: 2c8178711f7b



Date: Wed Nov 16 08:05:17 EST 2022

