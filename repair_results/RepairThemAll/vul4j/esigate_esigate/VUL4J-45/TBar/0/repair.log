cd /workdir/TBar_vul4j_esigate_esigate_VUL4J-45;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m \
    -cp /script/../libs/tbar_external/com.gzoltar-0.1.1-jdk7.jar:/script/../repair_tools/tbar.jar edu.lu.uni.serval.tbar.main.Main \
    "/workdir/TBar_vul4j_esigate_esigate_VUL4J-45" "org.esigate.xml.XsltRendererTest#testSecureRendering" "/esigate-core/src/main/java/" "/esigate-core/src/test/java/" "/esigate-core/target/classes/" "/esigate-core/target/test-classes/" "/script/../data/benchmarks/vul4j/perfectfl/VUL4J-45/spectra.txt" "mvn test -pl esigate-core -Dtest=org.esigate.xml.XsltRendererTest#testSecureRendering -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" "mvn test -pl esigate-core -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" "/root/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar:/root/.m2/repository/net/sf/ehcache/ehcache-core/2.2.0/ehcache-core-2.2.0.jar:/root/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar:/root/.m2/repository/commons-io/commons-io/2.0.1/commons-io-2.0.1.jar:/root/.m2/repository/org/slf4j/slf4j-simple/1.7.7/slf4j-simple-1.7.7.jar:/root/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/root/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/root/.m2/repository/net/spy/spymemcached/2.10.3/spymemcached-2.10.3.jar:/root/.m2/repository/org/apache/httpcomponents/httpclient-cache/4.5.4/httpclient-cache-4.5.4.jar:/root/.m2/repository/org/apache/httpcomponents/httpcore/4.4.7/httpcore-4.4.7.jar:/root/.m2/repository/com/codahale/metrics/metrics-core/3.0.2/metrics-core-3.0.2.jar:/root/.m2/repository/nu/validator/htmlparser/htmlparser/1.4/htmlparser-1.4.jar:/root/.m2/repository/org/apache/httpcomponents/httpclient/4.5.4/httpclient-4.5.4.jar:/root/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar:/root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.7/jcl-over-slf4j-1.7.7.jar:/root/.m2/repository/org/mockito/mockito-core/2.16.0/mockito-core-2.16.0.jar:/root/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar";
echo "\n\nNode: `hostname`\n";
echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
13:21:15,082 |-INFO in ch.qos.logback.classic.LoggerContext[TBar] - Could NOT find resource [logback-test.xml]
13:21:15,082 |-INFO in ch.qos.logback.classic.LoggerContext[TBar] - Could NOT find resource [logback.groovy]
13:21:15,082 |-INFO in ch.qos.logback.classic.LoggerContext[TBar] - Found resource [logback.xml] at [jar:file:/repair_tools/tbar.jar!/logback.xml]
13:21:15,091 |-INFO in ch.qos.logback.core.joran.spi.ConfigurationWatchList@5a42bbf4 - URL [jar:file:/repair_tools/tbar.jar!/logback.xml] is not of type file
13:21:15,126 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
13:21:15,127 |-INFO in ch.qos.logback.classic.joran.action.ContextNameAction - Setting logger context name as [TBar]
13:21:15,128 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
13:21:15,130 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
13:21:15,173 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.hibernate.engine.query.HQLQueryPlan] to DEBUG
13:21:15,173 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [org.hibernate.engine.query.HQLQueryPlan] to false
13:21:15,174 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.piedra.logback] to DEBUG
13:21:15,174 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [FILE]. Did you define it below instead of above in the configuration file?
13:21:15,174 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See http://logback.qos.ch/codes.html#appender_order for more details.
13:21:15,174 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to DEBUG
13:21:15,174 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]
13:21:15,174 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [ROLLINGFILE]. Did you define it below instead of above in the configuration file?
13:21:15,174 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See http://logback.qos.ch/codes.html#appender_order for more details.
13:21:15,174 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
13:21:15,176 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@270421f5 - Registering current configuration as safe fallback point

2022-09-14 13:21:15.302 [main] INFO  edu.lu.uni.serval.tbar.AbstractFixer - TBar_vul4j_esigate_esigate_VUL4J-45 Failed Tests: 1
2022-09-14 13:21:15.305 [main] INFO  edu.lu.uni.serval.tbar.TBarFixer - =======StaticBugFixer: Start to fix suspicious code======
2022-09-14 13:21:15.305 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - org.esigate.xml.XsltRenderer ===57
2022-09-14 13:21:15.658 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
private static final TransformerFactory TRANSFORMER_FACTORY = TransformerFactory.newInstance();
2022-09-14 13:21:16.473 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -54,7 +54,7 @@ import org.xml.sax.SAXException;
-    private static final TransformerFactory TRANSFORMER_FACTORY = TransformerFactory.newInstance();
+
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:16.473 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:17.016 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:21:17.024 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - org.esigate.xml.XsltRenderer ===91
2022-09-14 13:21:17.035 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
2022-09-14 13:21:17.081 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,7 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(this.transformer, templateStream));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:17.081 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:17.722 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:21:17.741 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,7 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream, this.transformer));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:17.741 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:18.377 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:21:18.400 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,7 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            return TRANSFORMER_FACTORY.newTransformer(new StreamSource());
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:18.400 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:18.924 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
2022-09-14 13:21:25.719 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test the whole test suite.
2022-09-14 13:21:46.709 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,10 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            if (templateStream != null) {
+	return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+	}
+
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:46.709 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:47.255 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:21:47.271 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,10 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            if (templateStream == null) {
+	    throw new IllegalArgumentException("Null 'templateStream' argument.");
+	}
+return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:47.271 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:47.851 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
2022-09-14 13:21:54.659 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,10 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            if (templateStream == null) {
+	    return null;
+	}
+return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:21:54.659 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:21:55.284 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
2022-09-14 13:22:01.939 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,8 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            if (templateStream == null) templateStream = new InputStream();
+ return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:22:01.939 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:22:02.518 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:22:02.542 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,8 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            if (templateStream == null) return new Transformer();
+	 return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:22:02.542 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:22:03.169 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:22:03.186 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -88,7 +88,8 @@ public class XsltRenderer implements Renderer {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
+            if (templateStream == null) return this.transformer;
+	 return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:22:03.187 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:22:03.777 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:22:03.806 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -86,15 +86,7 @@ public class XsltRenderer implements Renderer {
-    private static Transformer createTransformer(InputStream templateStream) throws IOException {
-        try {
-            return TRANSFORMER_FACTORY.newTransformer(new StreamSource(templateStream));
-        } catch (TransformerConfigurationException e) {
-            throw new ProcessingFailedException("Failed to create XSLT template", e);
-        } finally {
-            templateStream.close();
-        }
-    }
+
--- a/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
+++ b/esigate-core/src/test/java/org/esigate/xml/XsltRendererTest.java
@@ -60,26 +60,28 @@ public class XsltRendererTest {
-	private String renderExtensionStyleSheet(String src) throws IOException {
-		String template = "<?xml version=\"1.0\"?>";
-		template += "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
-				+ "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
-		template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
-		template += "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
+    private String renderExtensionStyleSheet(String src) throws IOException {
+        String template = "<?xml version=\"1.0\"?>";
+        template +=
+                "<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:html=\"http://www.w3.org/1999/xhtml\" "
+                        + "xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">";
+        template += "<xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/>";
+        template +=
+                "<xsl:template match=\"/\"  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">";
-		template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
-		template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
-		template += "Process: <xsl:value-of select=\"$process\"/>\n";
+        template += "<xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>";
+        template += "<xsl:variable name=\"process\" select=\"rt:totalMemory($rtObj)\"/>";
+        template += "Process: <xsl:value-of select=\"$process\"/>\n";
-		template += "</xsl:template>";
+        template += "</xsl:template>";
-		template += "</xsl:stylesheet>";
-		StringBuilderWriter out = new StringBuilderWriter();
-		XsltRenderer tested = new XsltRenderer(template);
-		tested.render(null, src, out);
-		return out.toString();
-	}
+        template += "</xsl:stylesheet>";
+        StringBuilderWriter out = new StringBuilderWriter();
+        XsltRenderer tested = new XsltRenderer(template);
+        tested.render(null, src, out);
+        return out.toString();
+    }
--- a/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
+++ b/esigate-server/src/test/java/org/esigate/server/AbstractEsigateServerTest.java
@@ -91,7 +91,7 @@ public class AbstractEsigateServerTest {
-	    // Esigate server
+        // Esigate server
@@ -100,65 +100,64 @@ public class AbstractEsigateServerTest {
-			if (EsigateServer.isStarted()) {
-				LOG.error("Esigate server is started, testing connection...");
-				try {
-					WebConversation webConversation = new WebConversation();
-					WebRequest req = new GetMethodWebRequest(
-							"http://localhost:" + this.esigateControlPort + "/server-status");
-					WebResponse resp = webConversation.getResponse(req);
-
-					if (resp.getResponseCode() == 200 /* OK */) {
-						LOG.info("Esigate server started & connection success");
-						break;
-					}
-				} catch (IOException | SAXException e2) {
-					// Errors are expected here, will retry
-				}
-			}
-
-			try {
-				Thread.sleep(WAIT_SLEEP);
-			} catch (InterruptedException e) {
-				// Ignore
-			}
-		}
-		if (!EsigateServer.isStarted()) {
-			LOG.error("Esigate server failed to start");
-		}
-
-		// Backend server
-		if (this.backendHandler != null) {
-			this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
-			this.backendExecutor = Executors.newSingleThreadExecutor();
-			this.backendExecutor.execute(this.backendServerRunnable);
-			for (int i = 0; i < WAIT_RETRIES; i++) {
-				if (this.backendServerRunnable.isStarted()) {
-					LOG.error("Backend server is started, testing connection...");
-					try {
-						WebConversation webConversation = new WebConversation();
-						WebRequest req = new GetMethodWebRequest(
-								"http://localhost:" + this.backendPort + "/");
-						WebResponse resp = webConversation.getResponse(req);
-
-						if (resp.getResponseCode() == 200 /* OK */) {
-							LOG.info("Backend server started & connection success");
-							break;
-						}
-					} catch (IOException | SAXException e2) {
-						// Errors are expected here, will retry
-					}
-				}
-				try {
-					Thread.sleep(WAIT_SLEEP);
-				} catch (InterruptedException e) {
-					// Ignore
-				}
-			}
-			if (!backendServerRunnable.isStarted()) {
-				LOG.error("Backend server failed to start");
-			}
-		}
+            if (EsigateServer.isStarted()) {
+                LOG.error("Esigate server is started, testing connection...");
+                try {
+                    WebConversation webConversation = new WebConversation();
+                    WebRequest req =
+                            new GetMethodWebRequest("http://localhost:" + this.esigateControlPort + "/server-status");
+                    WebResponse resp = webConversation.getResponse(req);
+
+                    if (resp.getResponseCode() == 200 /* OK */) {
+                        LOG.info("Esigate server started & connection success");
+                        break;
+                    }
+                } catch (IOException | SAXException e2) {
+                    // Errors are expected here, will retry
+                }
+            }
+
+            try {
+                Thread.sleep(WAIT_SLEEP);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
+        if (!EsigateServer.isStarted()) {
+            LOG.error("Esigate server failed to start");
+        }
+
+        // Backend server
+        if (this.backendHandler != null) {
+            this.backendServerRunnable = new BackendServerRunnable(this.backendPort, this.backendHandler);
+            this.backendExecutor = Executors.newSingleThreadExecutor();
+            this.backendExecutor.execute(this.backendServerRunnable);
+            for (int i = 0; i < WAIT_RETRIES; i++) {
+                if (this.backendServerRunnable.isStarted()) {
+                    LOG.error("Backend server is started, testing connection...");
+                    try {
+                        WebConversation webConversation = new WebConversation();
+                        WebRequest req = new GetMethodWebRequest("http://localhost:" + this.backendPort + "/");
+                        WebResponse resp = webConversation.getResponse(req);
+
+                        if (resp.getResponseCode() == 200 /* OK */) {
+                            LOG.info("Backend server started & connection success");
+                            break;
+                        }
+                    } catch (IOException | SAXException e2) {
+                        // Errors are expected here, will retry
+                    }
+                }
+                try {
+                    Thread.sleep(WAIT_SLEEP);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+            }
+            if (!backendServerRunnable.isStarted()) {
+                LOG.error("Backend server failed to start");
+            }
+        }
@@ -168,10 +167,10 @@ public class AbstractEsigateServerTest {
-			this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
-		} catch (InterruptedException e) {
-			LOG.warn("Esigate server failed to stop");
-		}
+            this.esigateExecutor.awaitTermination(10, TimeUnit.SECONDS);
+        } catch (InterruptedException e) {
+            LOG.warn("Esigate server failed to stop");
+        }
2022-09-14 13:22:03.807 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 13:22:04.417 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 13:22:04.425 [main] INFO  edu.lu.uni.serval.tbar.TBarFixer - =======StaticBugFixer: Finish off fixing======
Failed to fix bug


Node: ee2bf67284b9



Date: Wed Sep 14 13:22:04 EDT 2022

