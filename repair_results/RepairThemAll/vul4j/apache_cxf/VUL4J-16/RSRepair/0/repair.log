cd /workdir/RSRepair_vul4j_apache_cxf_VUL4J-16;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	RSRepair \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/RSRepair_vul4j_apache_cxf_VUL4J-16 \
    -DtestFiltered false \
    -DrunTestCommand "mvn -pl rt/rs/security/sso/saml -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/RSRepair_vul4j_apache_cxf_VUL4J-16/rt/rs/security/sso/saml/src/main/java \
	-DbinJavaDir /workdir/RSRepair_vul4j_apache_cxf_VUL4J-16/rt/rs/security/sso/saml/target/classes \
	-DbinTestDir /workdir/RSRepair_vul4j_apache_cxf_VUL4J-16/rt/rs/security/sso/saml/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-16 \
	-Ddependences /workdir/RSRepair_vul4j_apache_cxf_VUL4J-16/rt/rs/security/sso/saml/target/classes:/root/.m2/repository/org/apache/geronimo/specs/geronimo-javamail_1.4_spec/1.7.1/geronimo-javamail_1.4_spec-1.7.1.jar:/root/.m2/repository/org/apache/wss4j/wss4j-ws-security-common/2.1.2/wss4j-ws-security-common-2.1.2.jar:/root/.m2/repository/org/apache/cxf/cxf-rt-security/3.1.3-SNAPSHOT/cxf-rt-security-3.1.3-SNAPSHOT.jar:/root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.1.1/opensaml-xmlsec-api-3.1.1.jar:/root/.m2/repository/org/codehaus/woodstox/woodstox-core-asl/4.4.1/woodstox-core-asl-4.4.1.jar:/root/.m2/repository/org/opensaml/opensaml-soap-api/3.1.1/opensaml-soap-api-3.1.1.jar:/root/.m2/repository/org/apache/geronimo/specs/geronimo-servlet_3.0_spec/1.0/geronimo-servlet_3.0_spec-1.0.jar:/root/.m2/repository/org/slf4j/slf4j-api/1.7.12/slf4j-api-1.7.12.jar:/root/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/.m2/repository/org/cryptacular/cryptacular/1.0/cryptacular-1.0.jar:/root/.m2/repository/org/apache/wss4j/wss4j-ws-security-dom/2.1.2/wss4j-ws-security-dom-2.1.2.jar:/root/.m2/repository/org/apache/cxf/cxf-core/3.1.3-SNAPSHOT/cxf-core-3.1.3-SNAPSHOT.jar:/root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.1.1/opensaml-xmlsec-impl-3.1.1.jar:/root/.m2/repository/org/apache/cxf/cxf-rt-rs-security-xml/3.1.3-SNAPSHOT/cxf-rt-rs-security-xml-3.1.3-SNAPSHOT.jar:/root/.m2/repository/org/opensaml/opensaml-saml-api/3.1.1/opensaml-saml-api-3.1.1.jar:/root/.m2/repository/net/shibboleth/utilities/java-support/7.1.1/java-support-7.1.1.jar:/root/.m2/repository/org/apache/santuario/xmlsec/2.0.5/xmlsec-2.0.5.jar:/root/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar:/root/.m2/repository/org/jasypt/jasypt/1.9.2/jasypt-1.9.2.jar:/root/.m2/repository/net/sf/ehcache/ehcache/2.9.0/ehcache-2.9.0.jar:/root/.m2/repository/org/opensaml/opensaml-security-api/3.1.1/opensaml-security-api-3.1.1.jar:/root/.m2/repository/org/apache/cxf/cxf-rt-transports-http/3.1.3-SNAPSHOT/cxf-rt-transports-http-3.1.3-SNAPSHOT.jar:/root/.m2/repository/org/opensaml/opensaml-security-impl/3.1.1/opensaml-security-impl-3.1.1.jar:/root/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar:/root/.m2/repository/org/opensaml/opensaml-xacml-saml-impl/3.1.1/opensaml-xacml-saml-impl-3.1.1.jar:/root/.m2/repository/org/opensaml/opensaml-core/3.1.1/opensaml-core-3.1.1.jar:/root/.m2/repository/org/opensaml/opensaml-xacml-impl/3.1.1/opensaml-xacml-impl-3.1.1.jar:/root/.m2/repository/joda-time/joda-time/2.7/joda-time-2.7.jar:/root/.m2/repository/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar:/root/.m2/repository/org/apache/cxf/cxf-rt-security-saml/3.1.3-SNAPSHOT/cxf-rt-security-saml-3.1.3-SNAPSHOT.jar:/root/.m2/repository/org/opensaml/opensaml-xacml-saml-api/3.1.1/opensaml-xacml-saml-api-3.1.1.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/org/apache/ws/xmlschema/xmlschema-core/2.2.1/xmlschema-core-2.2.1.jar:/root/.m2/repository/org/apache/cxf/cxf-rt-frontend-jaxrs/3.1.3-SNAPSHOT/cxf-rt-frontend-jaxrs-3.1.3-SNAPSHOT.jar:/root/.m2/repository/org/opensaml/opensaml-xacml-api/3.1.1/opensaml-xacml-api-3.1.1.jar:/root/.m2/repository/org/opensaml/opensaml-profile-api/3.1.1/opensaml-profile-api-3.1.1.jar:/root/.m2/repository/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar:/root/.m2/repository/org/opensaml/opensaml-saml-impl/3.1.1/opensaml-saml-impl-3.1.1.jar:/root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.52/bcprov-jdk15on-1.52.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
Fault localization starts...
Number of positive tests: 34
Number of negative tests: 1
Negative tests: [org.apache.cxf.rs.security.saml.sso.CombinedValidatorTest#testWrappingAttack3]
Faulty Lines: 
org.apache.cxf.rs.security.saml.sso.SAMLSSOResponseValidator#143:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 34
Filtering of the tests is finished!
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Assertion does not contain unique subject provider identifier "
+				+ spIdentifier + " in the audience restriction conditions");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Assertion does not contain unique subject provider identifier "
+				+ spIdentifier + " in the audience restriction conditions");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Assertion does not contain unique subject provider identifier "
+				+ spIdentifier + " in the audience restriction conditions");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Assertion does not contain unique subject provider identifier "
+				+ spIdentifier + " in the audience restriction conditions");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.clientAddress = clientAddress;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setResponseId(samlResponse.getID());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.issuerIDP = issuerIDP;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean matchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        foundValidSubject = true;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Conf Data does not contain NotOnOrAfter or it has expired");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean oneMatchFound = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.spIdentifier = spIdentifier;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.requestId = requestId;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validateIssuer(samlResponse.getIssuer());
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (!foundValidSubject) {
+			LOG.fine("The Response did not contain any Authentication Statement that matched "
+					+ "the Subject Confirmation criteria");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getStatus() == null
+				|| samlResponse.getStatus().getStatusCode() == null) {
+			LOG.fine("Either the SAML Response Status or StatusCode is null");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Response did not contain any Authentication Statement that matched "
+				+ "the Subject Confirmation criteria");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Assertion does not contain unique subject provider identifier "
+				+ spIdentifier + " in the audience restriction conditions");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,43 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        for (org.opensaml.saml.saml2.core.Assertion assertion : samlResponse
+				.getAssertions()) {
+			if (assertion.getIssuer() == null) {
+				LOG.fine("Assertion Issuer must not be null");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			validateIssuer(assertion.getIssuer());
+			if (enforceAssertionsSigned && postBinding
+					&& assertion.getSignature() == null) {
+				LOG.fine("If the HTTP Post binding is used to deliver the Response, "
+						+ "the enclosed assertions must be signed");
+				throw new WSSecurityException(
+						WSSecurityException.ErrorCode.FAILURE,
+						"invalidSAMLsecurity");
+			}
+			if (assertion.getAuthnStatements() != null
+					&& !assertion.getAuthnStatements().isEmpty()) {
+				org.opensaml.saml.saml2.core.Subject subject = assertion
+						.getSubject();
+				if (validateAuthenticationSubject(subject, assertion.getID(),
+						postBinding)) {
+					validateAudienceRestrictionCondition(assertion
+							.getConditions());
+					foundValidSubject = true;
+					for (AuthnStatement authnStatment : assertion
+							.getAuthnStatements()) {
+						if (authnStatment.getSessionNotOnOrAfter() != null) {
+							sessionNotOnOrAfter = authnStatment
+									.getSessionNotOnOrAfter().toDate();
+						}
+					}
+				}
+			}
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,14 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getAssertions() == null
+				|| samlResponse.getAssertions().isEmpty()) {
+			LOG.fine("The Response must contain at least one Assertion");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,6 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        validatorResponse.setSessionNotOnOrAfter(sessionNotOnOrAfter);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        this.assertionConsumerURL = assertionConsumerURL;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("SAML Response IssueInstant not met");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,15 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.isSigned()
+				&& (destination == null || !destination
+						.equals(assertionConsumerURL))) {
+			LOG.fine("The Response must contain a destination that matches the assertion consumer URL");
+			throw new WSSecurityException(
+					WSSecurityException.ErrorCode.FAILURE,
+					"invalidSAMLsecurity");
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,11 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        if (samlResponse.getIssueInstant() != null) {
+			validatorResponse.setCreated(samlResponse.getIssueInstant()
+					.toDate());
+		}
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        boolean foundBearerSubjectConf = false;
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The Subject Conf Data must not contain a NotBefore timestamp");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Assertion does not contain unique subject provider identifier "
+				+ spIdentifier + " in the audience restriction conditions");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,9 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("The InResponseTo String does match the original request id "
+				+ requestId);
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -139,7 +139,8 @@ public class SAMLSSOResponseValidator {
validatorResponse.setCreated(samlResponse.getIssueInstant().toDate());
}

-        // the assumption for now is that SAMLResponse will contain only a single assertion
+        LOG.fine("Subject Confirmation Data of a Bearer Subject Confirmation is null");
+		// the assumption for now is that SAMLResponse will contain only a single assertion
Element assertionElement = samlResponse.getAssertions().get(0).getDOM();
Element clonedAssertionElement = (Element)assertionElement.cloneNode(true);
validatorResponse.setAssertionElement(clonedAssertionElement);
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...


Node: 158fac6bc2aa



Date: Wed Oct 12 13:36:08 EDT 2022

