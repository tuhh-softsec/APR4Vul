cd /workdir/GenProg_vul4j_nahsra_antisamy_VUL4J-60;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	GenProg \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/GenProg_vul4j_nahsra_antisamy_VUL4J-60 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/GenProg_vul4j_nahsra_antisamy_VUL4J-60/src/main/java \
	-DbinJavaDir /workdir/GenProg_vul4j_nahsra_antisamy_VUL4J-60/target/classes \
	-DbinTestDir /workdir/GenProg_vul4j_nahsra_antisamy_VUL4J-60/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-60 \
	-Ddependences /root/.m2/repository/org/apache/xmlgraphics/batik-ext/1.8/batik-ext-1.8.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-util/1.8/batik-util-1.8.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-css/1.8/batik-css-1.8.jar:/root/.m2/repository/xml-apis/xml-apis-ext/1.3.04/xml-apis-ext-1.3.04.jar:/root/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/root/.m2/repository/xerces/xercesImpl/2.11.0/xercesImpl-2.11.0.jar:/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/root/.m2/repository/net/sourceforge/nekohtml/nekohtml/1.9.22/nekohtml-1.9.22.jar:/root/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
Fault localization starts...
Number of positive tests: 56
Number of negative tests: 1
Negative tests: [org.owasp.validator.html.test.AntiSamyTest#testIssue2]
Faulty Lines: 
org.owasp.validator.html.scan.MagicSAXFilter#274:1.0
org.owasp.validator.html.scan.MagicSAXFilter#353:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 56
Filtering of the tests is finished!
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			this.operations.push(Ops.TRUNCATE);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 18
Fitness: 18.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,38 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				if (Ops.FILTER == topOp) {
+					operations.pop();
+				} else if (Ops.CSS == topOp) {
+					operations.pop();
+					CssScanner cssScanner = makeCssScanner();
+					try {
+						CleanResults results = cssScanner.scanStyleSheet(
+								cssContent.toString(), maxInputSize);
+						errorMessages.addAll(results.getErrorMessages());
+						if (results.getCleanHTML() == null
+								|| results.getCleanHTML().equals("")) {
+						} else {
+							super.startElement(element, cssAttributes,
+									new AugmentationsImpl());
+							super.characters(
+									new XMLStringBuffer(results.getCleanHTML()),
+									new AugmentationsImpl());
+							super.endElement(element, augs);
+						}
+					} catch (ScanException e) {
+						addError(
+								ErrorMessageUtil.ERROR_CSS_TAG_MALFORMED,
+								new Object[] { HTMLEntityEncoder
+										.htmlEntityEncode(cssContent.toString()) });
+					} finally {
+						cssContent = null;
+						cssAttributes = null;
+					}
+				} else {
+					operations.pop();
+					super.endElement(element, augs);
+				}
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			embedValue = attributes.getValue("value");
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (Ops.FILTER == topOp) {
+				operations.pop();
+			} else if (Ops.CSS == topOp) {
+				operations.pop();
+				CssScanner cssScanner = makeCssScanner();
+				try {
+					CleanResults results = cssScanner.scanStyleSheet(
+							cssContent.toString(), maxInputSize);
+					errorMessages.addAll(results.getErrorMessages());
+					if (results.getCleanHTML() == null
+							|| results.getCleanHTML().equals("")) {
+					} else {
+						super.startElement(element, cssAttributes,
+								new AugmentationsImpl());
+						super.characters(
+								new XMLStringBuffer(results.getCleanHTML()),
+								new AugmentationsImpl());
+						super.endElement(element, augs);
+					}
+				} catch (ScanException e) {
+					addError(ErrorMessageUtil.ERROR_CSS_TAG_MALFORMED,
+							new Object[] { HTMLEntityEncoder
+									.htmlEntityEncode(cssContent.toString()) });
+				} finally {
+					cssContent = null;
+					cssAttributes = null;
+				}
+			} else {
+				operations.pop();
+				super.endElement(element, augs);
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				operations.pop();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				super.endCDATA(augs);
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,103 +271,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+			if (Ops.KEEP.equals(operations.peek())) {
+				super.startElement(element, validattributes, augs);
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			embedValue = attributes.getValue("value");
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			boolean useXhtml = policy.isUseXhtml();
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				cssScanner = externalCssScanner ? new ExternalCssScanner(
+						policy, messages) : new CssScanner(policy, messages);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			super.startElement(element, validattributes, augs);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 15
Fitness: 16.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,9 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			addError(ErrorMessageUtil.ERROR_TAG_FILTERED,
+					new Object[] { HTMLEntityEncoder
+							.htmlEntityEncode(element.localpart) });
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				CssScanner cssScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			embedName = attributes.getValue("name");
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				cssScanner = externalCssScanner ? new ExternalCssScanner(
+						policy, messages) : new CssScanner(policy, messages);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				int i = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				cssScanner = externalCssScanner ? new ExternalCssScanner(
+						policy, messages) : new CssScanner(policy, messages);
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			this.operations.push(Ops.TRUNCATE);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 18
Fitness: 18.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			this.operations.push(Ops.TRUNCATE);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 18
Fitness: 18.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				cssScanner = externalCssScanner ? new ExternalCssScanner(
+						policy, messages) : new CssScanner(policy, messages);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				cssScanner = externalCssScanner ? new ExternalCssScanner(
+						policy, messages) : new CssScanner(policy, messages);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			boolean useXhtml = policy.isUseXhtml();
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				CssScanner cssScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			super.startElement(element, validattributes, augs);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 15
Fitness: 16.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			super.startElement(element, validattributes, augs);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 15
Fitness: 16.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				this.operations.push(Ops.FILTER);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				boolean useXhtml = policy.isUseXhtml();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				super.endElement(element, augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+				if (masqueradingParam) {
+					filterTag = true;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,24 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			addError(ErrorMessageUtil.ERROR_TAG_NOT_IN_POLICY,
+					new Object[] { HTMLEntityEncoder
+							.htmlEntityEncode(element.localpart) });
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				cssContent = new StringBuffer();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,10 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				addError(ErrorMessageUtil.ERROR_TAG_DISALLOWED,
+						new Object[] { HTMLEntityEncoder
+								.htmlEntityEncode(element.localpart) });
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 6
Fitness: 7.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			String nameValue = null;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			operations.pop();
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			this.endElement(element, augs);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,9 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			addError(ErrorMessageUtil.ERROR_TAG_NOT_IN_POLICY,
+					new Object[] { HTMLEntityEncoder
+							.htmlEntityEncode(element.localpart) });
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,9 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			addError(ErrorMessageUtil.ERROR_TAG_NOT_IN_POLICY,
+					new Object[] { HTMLEntityEncoder
+							.htmlEntityEncode(element.localpart) });
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
+				removeTag = true;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 21
Fitness: 22.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,9 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			Attribute paramNameAttr = new Attribute("name",
+					Arrays.asList(Policy.ANYTHING_REGEXP),
+					Collections.<String> emptyList(), null, null);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
+				embedName = attributes.getValue("name");
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 2
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				CssScanner cssScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,9 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			addError(ErrorMessageUtil.ERROR_TAG_FILTERED,
+					new Object[] { HTMLEntityEncoder
+							.htmlEntityEncode(element.localpart) });
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				int j = 0;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag embedTag = policy.getEmbedTag();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				int j = 0;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				int j = 0;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				int j = 0;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				int j = 0;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				int j = 0;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,25 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (isNofollowAnchors && "a".equals(element.localpart)) {
+				validattributes.addAttribute(makeSimpleQname("rel"), "CDATA",
+						"nofollow");
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				validattributes = new XMLAttributesImpl();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag embedTag = policy.getEmbedTag();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +365,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag embedTag = policy.getEmbedTag();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			boolean isAttributeValid = false;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag embedTag = policy.getEmbedTag();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag embedTag = policy.getEmbedTag();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			boolean isAttributeValid = false;
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +351,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			boolean isAttributeValid = false;
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
+			boolean removeTag = false;
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				CssScanner cssScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			this.operations.push(Ops.FILTER);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 4
Fitness: 5.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
+				int i = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = new CssScanner(policy, messages);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = new CssScanner(policy, messages);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				int i = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,118 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (isStyle) {
+				this.operations.push(Ops.CSS);
+				cssContent = new StringBuffer();
+				cssAttributes = attributes;
+			} else {
+				boolean removeTag = false;
+				boolean filterTag = false;
+				for (int i = 0; i < attributes.getLength(); i++) {
+					String name = attributes.getQName(i);
+					String value = attributes.getValue(i);
+					String nameLower = name.toLowerCase();
+					Attribute attribute = tag.getAttributeByName(nameLower);
+					if (attribute == null) {
+						attribute = policy.getGlobalAttributeByName(nameLower);
+					}
+					if ("style".equalsIgnoreCase(name)) {
+						CssScanner styleScanner = makeCssScanner();
+						try {
+							CleanResults cr = styleScanner.scanInlineStyle(
+									value, element.localpart, maxInputSize);
+							attributes.setValue(i, cr.getCleanHTML());
+							validattributes.addAttribute(makeSimpleQname(name),
+									"CDATA", cr.getCleanHTML());
+							errorMessages.addAll(cr.getErrorMessages());
+						} catch (ScanException e) {
+							addError(
+									ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED,
+									new Object[] {
+											element.localpart,
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+						}
+					} else if (attribute != null) {
+						boolean isValid = false;
+						if (attribute.containsAllowedValue(value.toLowerCase())) {
+							validattributes.addAttribute(makeSimpleQname(name),
+									"CDATA", value);
+							isValid = true;
+						}
+						if (!isValid) {
+							isValid = attribute.matchesAllowedExpression(value);
+							if (isValid) {
+								validattributes.addAttribute(
+										makeSimpleQname(name), "CDATA", value);
+							}
+						}
+						if (!isValid
+								&& "removeTag".equals(attribute.getOnInvalid())) {
+							addError(
+									ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
+									new Object[] {
+											tag.getName(),
+											HTMLEntityEncoder
+													.htmlEntityEncode(name),
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+							removeTag = true;
+						} else if (!isValid
+								&& ("filterTag"
+										.equals(attribute.getOnInvalid()) || masqueradingParam)) {
+							addError(
+									ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
+									new Object[] {
+											tag.getName(),
+											HTMLEntityEncoder
+													.htmlEntityEncode(name),
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+							filterTag = true;
+						} else if (!isValid) {
+							addError(
+									ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID,
+									new Object[] {
+											tag.getName(),
+											HTMLEntityEncoder
+													.htmlEntityEncode(name),
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+						}
+					} else {
+						addError(
+								ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY,
+								new Object[] {
+										element.localpart,
+										HTMLEntityEncoder
+												.htmlEntityEncode(name),
+										HTMLEntityEncoder
+												.htmlEntityEncode(value) });
+						if (masqueradingParam) {
+							filterTag = true;
+						}
+					}
+				}
+				if (removeTag) {
+					this.operations.push(Ops.REMOVE);
+				} else if (filterTag) {
+					this.operations.push(Ops.FILTER);
+				} else {
+					if (isNofollowAnchors && "a".equals(element.localpart)) {
+						validattributes.addAttribute(makeSimpleQname("rel"),
+								"CDATA", "nofollow");
+					}
+					if (masqueradingParam) {
+						validattributes = new XMLAttributesImpl();
+						validattributes.addAttribute(makeSimpleQname("name"),
+								"CDATA", embedName);
+						validattributes.addAttribute(makeSimpleQname("value"),
+								"CDATA", embedValue);
+					}
+					this.operations.push(Ops.KEEP);
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +462,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner cssScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,24 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			Attribute paramValueAttr = new Attribute("value",
+					Arrays.asList(Policy.ANYTHING_REGEXP),
+					Collections.<String> emptyList(), null, null);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
+				this.policy = (InternalPolicy) policy;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +364,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +380,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				CssScanner styleScanner = makeCssScanner();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String name = "<" + element.localpart + ">";
+				isNofollowAnchors = policy.isNofollowAnchors();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,23 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
+			super.startElement(element, validattributes, augs);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				validattributes.addAttribute(makeSimpleQname("value"), "CDATA",
+						embedValue);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 15
Fitness: 16.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +380,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,51 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			cssScanner = null;
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,51 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			this.operations.push(Ops.KEEP);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 18
Fitness: 18.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startElement(element, cssAttributes,
+						new AugmentationsImpl());
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				long startOfScan = System.currentTimeMillis();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,34 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			operations.clear();
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			long startOfScan = System.currentTimeMillis();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
+				CssScanner styleScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
+				CssScanner styleScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				isNofollowAnchors = policy.isNofollowAnchors();
+				CssScanner styleScanner = makeCssScanner();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +380,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +380,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,9 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
+				String name = "<" + element.localpart + ">";
+				Tag embedTag = policy.getEmbedTag();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			long startOfScan = System.currentTimeMillis();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			long startOfScan = System.currentTimeMillis();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,23 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			long startOfScan = System.currentTimeMillis();
+			CssScanner cssScanner = makeCssScanner();
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,133 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (isStyle) {
+				this.operations.push(Ops.CSS);
+				cssContent = new StringBuffer();
+				cssAttributes = attributes;
+			} else {
+				boolean removeTag = false;
+				boolean filterTag = false;
+				for (int i = 0; i < attributes.getLength(); i++) {
+					String name = attributes.getQName(i);
+					String value = attributes.getValue(i);
+					String nameLower = name.toLowerCase();
+					Attribute attribute = tag.getAttributeByName(nameLower);
+					if (attribute == null) {
+						attribute = policy.getGlobalAttributeByName(nameLower);
+					}
+					if ("style".equalsIgnoreCase(name)) {
+						CssScanner styleScanner = makeCssScanner();
+						try {
+							CleanResults cr = styleScanner.scanInlineStyle(
+									value, element.localpart, maxInputSize);
+							attributes.setValue(i, cr.getCleanHTML());
+							validattributes.addAttribute(makeSimpleQname(name),
+									"CDATA", cr.getCleanHTML());
+							errorMessages.addAll(cr.getErrorMessages());
+						} catch (ScanException e) {
+							addError(
+									ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED,
+									new Object[] {
+											element.localpart,
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+						}
+					} else if (attribute != null) {
+						boolean isValid = false;
+						if (attribute.containsAllowedValue(value.toLowerCase())) {
+							validattributes.addAttribute(makeSimpleQname(name),
+									"CDATA", value);
+							isValid = true;
+						}
+						if (!isValid) {
+							isValid = attribute.matchesAllowedExpression(value);
+							if (isValid) {
+								validattributes.addAttribute(
+										makeSimpleQname(name), "CDATA", value);
+							}
+						}
+						if (!isValid
+								&& "removeTag".equals(attribute.getOnInvalid())) {
+							addError(
+									ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
+									new Object[] {
+											tag.getName(),
+											HTMLEntityEncoder
+													.htmlEntityEncode(name),
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+							removeTag = true;
+						} else if (!isValid
+								&& ("filterTag"
+										.equals(attribute.getOnInvalid()) || masqueradingParam)) {
+							addError(
+									ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
+									new Object[] {
+											tag.getName(),
+											HTMLEntityEncoder
+													.htmlEntityEncode(name),
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+							filterTag = true;
+						} else if (!isValid) {
+							addError(
+									ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID,
+									new Object[] {
+											tag.getName(),
+											HTMLEntityEncoder
+													.htmlEntityEncode(name),
+											HTMLEntityEncoder
+													.htmlEntityEncode(value) });
+						}
+					} else {
+						addError(
+								ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY,
+								new Object[] {
+										element.localpart,
+										HTMLEntityEncoder
+												.htmlEntityEncode(name),
+										HTMLEntityEncoder
+												.htmlEntityEncode(value) });
+						if (masqueradingParam) {
+							filterTag = true;
+						}
+					}
+				}
+				if (removeTag) {
+					this.operations.push(Ops.REMOVE);
+				} else if (filterTag) {
+					this.operations.push(Ops.FILTER);
+				} else {
+					if (isNofollowAnchors && "a".equals(element.localpart)) {
+						validattributes.addAttribute(makeSimpleQname("rel"),
+								"CDATA", "nofollow");
+					}
+					if (masqueradingParam) {
+						validattributes = new XMLAttributesImpl();
+						validattributes.addAttribute(makeSimpleQname("name"),
+								"CDATA", embedName);
+						validattributes.addAttribute(makeSimpleQname("value"),
+								"CDATA", embedValue);
+					}
+					this.operations.push(Ops.KEEP);
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 8
Fitness: 9.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			long startOfScan = System.currentTimeMillis();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			Tag tagRule = policy.getTagByLowercaseName(tagNameLowerCase);
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -349,25 +379,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				operations.pop();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,37 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			long startOfScan = System.currentTimeMillis();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			long startOfScan = System.currentTimeMillis();
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+				int j = 0;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,22 +350,23 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
this.operations.push(Ops.FILTER);
} else {
-
if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
+						validattributes.addAttribute(makeSimpleQname("rel"),
+								"CDATA", "nofollow");
}
-
if (masqueradingParam) {
validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
+						validattributes.addAttribute(makeSimpleQname("name"),
+								"CDATA", embedName);
+						validattributes.addAttribute(makeSimpleQname("value"),
+								"CDATA", embedValue);
}
-
this.operations.push(Ops.KEEP);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +380,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				boolean formatOutput = policy.isFormatOutput();
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,23 +350,40 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
+				String name = "<" + element.localpart + ">";
+				if (Ops.REMOVE == topOp) {
+					operations.pop();
+				} else if (Ops.FILTER == topOp) {
+					operations.pop();
+				} else if (Ops.CSS == topOp) {
+					operations.pop();
+					CssScanner cssScanner = makeCssScanner();
+					try {
+						CleanResults results = cssScanner.scanStyleSheet(
+								cssContent.toString(), maxInputSize);
+						errorMessages.addAll(results.getErrorMessages());
+						if (results.getCleanHTML() == null
+								|| results.getCleanHTML().equals("")) {
+						} else {
+							super.startElement(element, cssAttributes,
+									new AugmentationsImpl());
+							super.characters(
+									new XMLStringBuffer(results.getCleanHTML()),
+									new AugmentationsImpl());
+							super.endElement(element, augs);
+						}
+					} catch (ScanException e) {
+						addError(
+								ErrorMessageUtil.ERROR_CSS_TAG_MALFORMED,
+								new Object[] { HTMLEntityEncoder
+										.htmlEntityEncode(cssContent.toString()) });
+					} finally {
+						cssContent = null;
+						cssAttributes = null;
}
-
-					this.operations.push(Ops.KEEP);
+				} else {
+					operations.pop();
+					super.endElement(element, augs);
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String nameValue = null;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,24 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			Attribute paramValueAttr = new Attribute("value",
+					Arrays.asList(Policy.ANYTHING_REGEXP),
+					Collections.<String> emptyList(), null, null);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				super.startCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				super.startCDATA(augs);
+				this.endElement(element, augs);
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String nameValue = null;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String nameValue = null;
+				boolean isValid = false;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,24 +365,10 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String name = "<" + element.localpart + ">";
+				Attribute paramValueAttr = new Attribute("value",
+						Arrays.asList(Policy.ANYTHING_REGEXP),
+						Collections.<String> emptyList(), null, null);
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
+				super.endCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
@@ -350,6 +365,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,36 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String name = "<" + element.localpart + ">";
+				filterTag = true;
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
+				super.endCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
+				super.endCDATA(augs);
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,24 +350,10 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
+				String name = "<" + element.localpart + ">";
+				addError(ErrorMessageUtil.ERROR_CSS_TAG_MALFORMED,
+						new Object[] { HTMLEntityEncoder
+								.htmlEntityEncode(cssContent.toString()) });
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 35
Fitness: 36.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				isNofollowAnchors = policy.isNofollowAnchors();
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,104 +271,24 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
+			Attribute paramValueAttr = new Attribute("value",
+					Arrays.asList(Policy.ANYTHING_REGEXP),
+					Collections.<String> emptyList(), null, null);
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String name = "<" + element.localpart + ">";
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,102 +271,19 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
}
}
} else if (tag.isAction( "truncate")) {
Number of failed tests: 36
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -271,6 +271,21 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {

boolean isStyle = "style".endsWith(element.localpart);

+			if (tag == null && isValidateParamAsEmbed
+					&& "param".equals(tagNameLowerCase)) {
+				Tag embedPolicy = policy.getEmbedTag();
+				if (embedPolicy != null
+						&& embedPolicy.isAction(Policy.ACTION_VALIDATE)) {
+					tag = embedPolicy;
+					masqueradingParam = true;
+					embedName = attributes.getValue("name");
+					embedValue = attributes.getValue("value");
+					XMLAttributes masqueradingAttrs = new XMLAttributesImpl();
+					masqueradingAttrs.addAttribute(makeSimpleQname(embedName),
+							"CDATA", embedValue);
+					attributes = masqueradingAttrs;
+				}
+			}
if (isStyle) {
this.operations.push(Ops.CSS);
cssContent = new StringBuffer();
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -350,6 +350,7 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}

+				String nameValue = null;
if (removeTag) {
this.operations.push(Ops.REMOVE);
} else if (filterTag) {


Node: 2c8178711f7b



Date: Tue Oct  4 16:12:58 EDT 2022

