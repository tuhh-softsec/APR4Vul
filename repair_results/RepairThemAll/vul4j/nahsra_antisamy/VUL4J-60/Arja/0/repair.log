cd /workdir/Arja_vul4j_nahsra_antisamy_VUL4J-60;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	Arja \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/Arja_vul4j_nahsra_antisamy_VUL4J-60 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/Arja_vul4j_nahsra_antisamy_VUL4J-60/src/main/java \
	-DbinJavaDir /workdir/Arja_vul4j_nahsra_antisamy_VUL4J-60/target/classes \
	-DbinTestDir /workdir/Arja_vul4j_nahsra_antisamy_VUL4J-60/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-60 \
	-Ddependences /root/.m2/repository/org/apache/xmlgraphics/batik-ext/1.8/batik-ext-1.8.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-util/1.8/batik-util-1.8.jar:/root/.m2/repository/org/apache/xmlgraphics/batik-css/1.8/batik-css-1.8.jar:/root/.m2/repository/xml-apis/xml-apis-ext/1.3.04/xml-apis-ext-1.3.04.jar:/root/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/root/.m2/repository/xerces/xercesImpl/2.11.0/xercesImpl-2.11.0.jar:/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/root/.m2/repository/net/sourceforge/nekohtml/nekohtml/1.9.22/nekohtml-1.9.22.jar:/root/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
Fault localization starts...
Number of positive tests: 56
Number of negative tests: 1
Negative tests: [org.owasp.validator.html.test.AntiSamyTest#testIssue2]
Faulty Lines: 
org.owasp.validator.html.scan.MagicSAXFilter#274:1.0
org.owasp.validator.html.scan.MagicSAXFilter#353:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 56
Filtering of the tests is finished!
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:122)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.ArjaProblem.invokeTestExecutor(ArjaProblem.java:248)
	at us.msu.cse.repair.ec.problems.ArjaProblem.evaluate(ArjaProblem.java:177)
	at jmetal.metaheuristics.nsgaII.NSGAII.execute(NSGAII.java:124)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.ArjaMain.main(ArjaMain.java:66)
	at us.msu.cse.repair.Main.main(Main.java:8)
java.lang.NullPointerException
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
Number of failed tests: 1, 34
Weighted failure rate: 1.3035714285714286
----------------------------------
Patch Candidate:
@@ -270,105 +270,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
} else if (tag.isAction( "validate")) {

boolean isStyle = "style".endsWith(element.localpart);
-
-			if (isStyle) {
-				this.operations.push(Ops.CSS);
-				cssContent = new StringBuffer();
-				cssAttributes = attributes;
-			} else {
-				// validate all attributes, we need to do this now to find out
-				// how to deal with the element
-				boolean removeTag = false;
-				boolean filterTag = false;
-				for (int i = 0; i < attributes.getLength(); i++) {
-					String name = attributes.getQName(i);
-					String value = attributes.getValue(i);
-					String nameLower = name.toLowerCase();
-					Attribute attribute = tag.getAttributeByName(nameLower);
-					if (attribute == null) {
-						// no policy defined, perhaps it is a global attribute
-						attribute = policy.getGlobalAttributeByName(nameLower);
-					}
-					// boolean isAttributeValid = false;
-					if ("style".equalsIgnoreCase(name)) {
-						CssScanner styleScanner = makeCssScanner();
-						try {
-							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
-							attributes.setValue(i, cr.getCleanHTML());
-							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
-							errorMessages.addAll(cr.getErrorMessages());
-						} catch (ScanException e) {
-							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
-									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
-							});
-						}
-					} else if (attribute != null) {
-						// validate the values against the policy
-						boolean isValid = false;
-                        if (attribute.containsAllowedValue(value.toLowerCase())) {
-                            validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            isValid = true;
-                        }
-
-
-                        if (!isValid) {
-                            isValid = attribute.matchesAllowedExpression(value);
-                            if (isValid) {
-                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-                            }
-                        }
-
-
-                        // if value or regexp matched, attribute is already
-						// copied, but what happens if not
-						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							removeTag = true;
-
-						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
-
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-
-							filterTag = true;
-
-						} else if (!isValid) {
-							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
-						}
-
-					} else { // attribute == null
-						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
-								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
-						});
-
-						if (masqueradingParam) {
-							filterTag = true;
-						}
-					}
-				}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
-			}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);
} else {
Number of failed tests: 1, 35
Weighted failure rate: 1.3125
----------------------------------
Patch Candidate:
@@ -349,25 +349,6 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
}
}
}
-
-				if (removeTag) {
-					this.operations.push(Ops.REMOVE);
-				} else if (filterTag) {
-					this.operations.push(Ops.FILTER);
-				} else {
-
-					if (isNofollowAnchors && "a".equals(element.localpart)) {
-						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
-					}
-
-					if (masqueradingParam) {
-						validattributes = new XMLAttributesImpl();
-						validattributes.addAttribute(makeSimpleQname("name"), "CDATA", embedName);
-						validattributes.addAttribute(makeSimpleQname("value"), "CDATA", embedValue);
-					}
-
-					this.operations.push(Ops.KEEP);
-				}
}
} else if (tag.isAction( "truncate")) {
this.operations.push(Ops.TRUNCATE);


Node: b97f25038321



Date: Fri Sep 16 23:45:57 EDT 2022

