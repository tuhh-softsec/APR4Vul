cd /workdir/TBar_vul4j_jenkinsci_subversion-plugin_VUL4J-58;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m \
    -cp /script/../libs/tbar_external/com.gzoltar-0.1.1-jdk7.jar:/script/../repair_tools/tbar.jar edu.lu.uni.serval.tbar.main.Main \
    "/workdir/TBar_vul4j_jenkinsci_subversion-plugin_VUL4J-58" "hudson.scm.SubversionStatusTest#canStillProvideTheCommitNotifyAction,hudson.scm.SubversionStatusTest#shouldNotBeAbleToSearchUsingDynamic,hudson.scm.SubversionStatusTest#shouldNotBeAbleToSearch" "/src/main/java/" "/src/test/java/" "/target/classes/" "/target/test-classes/" "/script/../data/benchmarks/vul4j/perfectfl/VUL4J-58/spectra.txt" "mvn test -Dtest=hudson.scm.SubversionStatusTest -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" "mvn test -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" "/root/.m2/repository/org/tmatesoft/svnkit/svnkit/1.8.14/svnkit-1.8.14.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.usocket-jna/0.0.7/jsch.agentproxy.usocket-jna-0.0.7.jar:/root/.m2/repository/org/jvnet/localizer/localizer/1.23/localizer-1.23.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.sshagent/0.0.7/jsch.agentproxy.sshagent-0.0.7.jar:/root/.m2/repository/com/cloudbees/groovy-cps/1.6/groovy-cps-1.6.jar:/root/.m2/repository/org/ow2/asm/asm-tree/4.0/asm-tree-4.0.jar:/root/.m2/repository/xerces/xercesImpl/2.11.0/xercesImpl-2.11.0.jar:/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/root/.m2/repository/jfree/jfreechart/1.0.9/jfreechart-1.0.9.jar:/root/.m2/repository/org/jenkins-ci/ui/handlebars/1.1.1/handlebars-1.1.1-core-assets.jar:/root/.m2/repository/org/jenkins-ci/ui/ace-editor/1.0.1/ace-editor-1.0.1.jar:/root/.m2/repository/org/powermock/powermock-core/1.5/powermock-core-1.5.jar:/root/.m2/repository/org/ow2/asm/asm-commons/4.0/asm-commons-4.0.jar:/root/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/root/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/root/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.25/log4j-over-slf4j-1.7.25.jar:/root/.m2/repository/org/antlr/antlr4-runtime/4.5/antlr4-runtime-4.5.jar:/root/.m2/repository/com/trilead/trilead-ssh2/1.0.0-build221/trilead-ssh2-1.0.0-build221.jar:/root/.m2/repository/org/jenkins-ci/plugins/envinject/1.92/envinject-1.92.jar:/root/.m2/repository/javax/mail/mail/1.4.4/mail-1.4.4.jar:/root/.m2/repository/org/jenkins-ci/plugins/git-client/1.19.0/git-client-1.19.0.jar:/root/.m2/repository/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar:/root/.m2/repository/org/kohsuke/windows-package-checker/1.2/windows-package-checker-1.2.jar:/root/.m2/repository/org/jenkins-ci/dom4j/dom4j/1.6.1-jenkins-4/dom4j-1.6.1-jenkins-4.jar:/root/.m2/repository/org/jenkins-ci/main/jenkins-war/2.7.3/jenkins-war-2.7.3.war:/root/.m2/repository/org/tmatesoft/svnkit/svnkit-cli/1.8.14/svnkit-cli-1.8.14.jar:/root/.m2/repository/org/apache/commons/commons-compress/1.10/commons-compress-1.10.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-support/1.14.2/workflow-support-1.14.2.jar:/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/root/.m2/repository/org/jenkins-ci/main/remoting/2.60/remoting-2.60.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.pageant/0.0.7/jsch.agentproxy.pageant-0.0.7.jar:/root/.m2/repository/org/objenesis/objenesis/1.2/objenesis-1.2.jar:/root/.m2/repository/org/kohsuke/stapler/stapler-groovy/1.243/stapler-groovy-1.243.jar:/root/.m2/repository/org/springframework/spring-web/2.5.6.SEC03/spring-web-2.5.6.SEC03.jar:/root/.m2/repository/org/jenkins-ci/modules/upstart-slave-installer/1.1/upstart-slave-installer-1.1.jar:/root/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar:/root/.m2/repository/org/javassist/javassist/3.17.1-GA/javassist-3.17.1-GA.jar:/root/.m2/repository/org/jboss/marshalling/jboss-marshalling/1.4.9.Final/jboss-marshalling-1.4.9.Final.jar:/root/.m2/repository/org/kohsuke/stapler/stapler/1.243/stapler-1.243.jar:/root/.m2/repository/jline/jline/2.12/jline-2.12.jar:/root/.m2/repository/org/kohsuke/stapler/stapler-jrebel/1.243/stapler-jrebel-1.243.jar:/root/.m2/repository/org/jenkins-ci/modules/ssh-cli-auth/1.2/ssh-cli-auth-1.2.jar:/root/.m2/repository/org/powermock/powermock-module-junit4/1.5/powermock-module-junit4-1.5.jar:/root/.m2/repository/org/kohsuke/stapler/stapler-adjunct-codemirror/1.3/stapler-adjunct-codemirror-1.3.jar:/root/.m2/repository/org/jenkins-ci/plugins/durable-task/1.5/durable-task-1.5.jar:/root/.m2/repository/org/jenkins-ci/constant-pool-scanner/1.2/constant-pool-scanner-1.2.jar:/root/.m2/repository/commons-discovery/commons-discovery/0.4/commons-discovery-0.4.jar:/root/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar:/root/.m2/repository/org/apache/sshd/sshd-core/0.8.0/sshd-core-0.8.0.jar:/root/.m2/repository/org/apache/ant/ant/1.8.4/ant-1.8.4.jar:/root/.m2/repository/org/jenkins-ci/modules/sshd/1.6/sshd-1.6.jar:/root/.m2/repository/org/jvnet/hudson/xstream/1.4.7-jenkins-1/xstream-1.4.7-jenkins-1.jar:/root/.m2/repository/org/eclipse/jetty/jetty-servlet/9.4.5.v20170502/jetty-servlet-9.4.5.v20170502.jar:/root/.m2/repository/org/jenkins-ci/main/jenkins-test-harness-htmlunit/2.18-1/jenkins-test-harness-htmlunit-2.18-1.jar:/root/.m2/repository/org/samba/jcifs/jcifs/1.2.19/jcifs-1.2.19.jar:/root/.m2/repository/xalan/xalan/2.7.2/xalan-2.7.2.jar:/root/.m2/repository/org/jenkins-ci/modules/systemd-slave-installer/1.1/systemd-slave-installer-1.1.jar:/root/.m2/repository/org/abego/treelayout/org.abego.treelayout.core/1.0.1/org.abego.treelayout.core-1.0.1.jar:/root/.m2/repository/net/sf/ezmorph/ezmorph/1.0.6/ezmorph-1.0.6.jar:/root/.m2/repository/org/jenkins-ci/plugins/scm-api/2.0.8/scm-api-2.0.8-tests.jar:/root/.m2/repository/org/apache/mina/mina-core/2.0.5/mina-core-2.0.5.jar:/root/.m2/repository/org/jboss/marshalling/jboss-marshalling-river/1.4.9.Final/jboss-marshalling-river-1.4.9.Final.jar:/root/.m2/repository/org/jenkins-ci/crypto-util/1.1/crypto-util-1.1.jar:/root/.m2/repository/org/powermock/powermock-module-junit4-common/1.5/powermock-module-junit4-common-1.5.jar:/root/.m2/repository/org/kohsuke/jinterop/j-interop/2.0.6-kohsuke-1/j-interop-2.0.6-kohsuke-1.jar:/root/.m2/repository/org/jenkins-ci/main/jenkins-test-harness/2.32/jenkins-test-harness-2.32.jar:/root/.m2/repository/org/kohsuke/stapler/json-lib/2.4-jenkins-2/json-lib-2.4-jenkins-2.jar:/root/.m2/repository/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/root/.m2/repository/org/springframework/spring-jdbc/1.2.9/spring-jdbc-1.2.9.jar:/root/.m2/repository/org/springframework/spring-context-support/2.5.6.SEC03/spring-context-support-2.5.6.SEC03.jar:/root/.m2/repository/com/github/jnr/jffi/1.2.7/jffi-1.2.7.jar:/root/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar:/root/.m2/repository/commons-codec/commons-codec/1.8/commons-codec-1.8.jar:/root/.m2/repository/org/mockito/mockito-core/1.9.5/mockito-core-1.9.5.jar:/root/.m2/repository/org/jenkins-ci/plugins/script-security/1.16/script-security-1.16.jar:/root/.m2/repository/org/jenkins-ci/trilead-ssh2/build217-jenkins-8/trilead-ssh2-build217-jenkins-8.jar:/root/.m2/repository/org/eclipse/jetty/jetty-xml/9.4.5.v20170502/jetty-xml-9.4.5.v20170502.jar:/root/.m2/repository/org/jenkins-ci/version-number/1.1/version-number-1.1.jar:/root/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/root/.m2/repository/javax/servlet/jstl/1.1.0/jstl-1.1.0.jar:/root/.m2/repository/org/jenkins-ci/symbol-annotation/1.1/symbol-annotation-1.1.jar:/root/.m2/repository/org/kohsuke/trilead-putty-extension/1.2/trilead-putty-extension-1.2.jar:/root/.m2/repository/jaxen/jaxen/1.1-beta-11/jaxen-1.1-beta-11.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/.m2/repository/org/kohsuke/stapler/stapler-adjunct-zeroclipboard/1.3.5-1/stapler-adjunct-zeroclipboard-1.3.5-1.jar:/root/.m2/repository/jfree/jcommon/1.0.12/jcommon-1.0.12.jar:/root/.m2/repository/org/springframework/spring-webmvc/2.5.6.SEC03/spring-webmvc-2.5.6.SEC03.jar:/root/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/root/.m2/repository/org/jenkins-ci/modules/launchd-slave-installer/1.2/launchd-slave-installer-1.2.jar:/root/.m2/repository/org/jenkins-ci/modules/windows-slave-installer/1.6/windows-slave-installer-1.6.jar:/root/.m2/repository/org/jenkins-ci/plugins/matrix-auth/1.7/matrix-auth-1.7.jar:/root/.m2/repository/org/jenkins-ci/main/jenkins-core/2.7.3/jenkins-core-2.7.3.jar:/root/.m2/repository/com/github/jnr/jnr-posix/3.0.1/jnr-posix-3.0.1.jar:/root/.m2/repository/commons-jelly/commons-jelly-tags-xml/1.1/commons-jelly-tags-xml-1.1.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.svnkit-trilead-ssh2/0.0.7/jsch.agentproxy.svnkit-trilead-ssh2-0.0.7.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-scm-step/1.14.2/workflow-scm-step-1.14.2.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-cps/1.14.2/workflow-cps-1.14.2.jar:/root/.m2/repository/org/jenkins-ci/annotation-indexer/1.11/annotation-indexer-1.11.jar:/root/.m2/repository/org/apache/ant/ant-launcher/1.8.4/ant-launcher-1.8.4.jar:/root/.m2/repository/org/jenkins-ci/plugins/git-server/1.5/git-server-1.5.jar:/root/.m2/repository/com/sun/solaris/embedded_su4j/1.1/embedded_su4j-1.1.jar:/root/.m2/repository/org/ow2/asm/asm-util/4.0/asm-util-4.0.jar:/root/.m2/repository/org/jenkins-ci/plugins/ssh-credentials/1.11/ssh-credentials-1.11.jar:/root/.m2/repository/org/springframework/spring-dao/1.2.9/spring-dao-1.2.9.jar:/root/.m2/repository/org/mindrot/jbcrypt/0.3m/jbcrypt-0.3m.jar:/root/.m2/repository/org/mapdb/mapdb/1.0.1/mapdb-1.0.1.jar:/root/.m2/repository/org/codehaus/groovy/groovy-all/2.4.7/groovy-all-2.4.7.jar:/root/.m2/repository/org/kohsuke/libpam4j/1.8/libpam4j-1.8.jar:/root/.m2/repository/com/googlecode/javaewah/JavaEWAH/0.7.9/JavaEWAH-0.7.9.jar:/root/.m2/repository/org/jenkins-ci/plugins/mapdb-api/1.0.1.0/mapdb-api-1.0.1.0.jar:/root/.m2/repository/org/jenkins-ci/ui/jquery-detached/1.1.1/jquery-detached-1.1.1.jar:/root/.m2/repository/com/github/stephenc/findbugs/findbugs-annotations/1.3.9-1/findbugs-annotations-1.3.9-1.jar:/root/.m2/repository/org/ow2/asm/asm-analysis/4.0/asm-analysis-4.0.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.usocket-nc/0.0.7/jsch.agentproxy.usocket-nc-0.0.7.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-durable-task-step/1.14.2/workflow-durable-task-step-1.14.2.jar:/root/.m2/repository/net/java/dev/jna/platform/3.4.0/platform-3.4.0.jar:/root/.m2/repository/org/powermock/powermock-api-mockito/1.5/powermock-api-mockito-1.5.jar:/root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:/root/.m2/repository/antlr/antlr/2.7.6/antlr-2.7.6.jar:/root/.m2/repository/org/jenkins-ci/jmdns/3.4.0-jenkins-3/jmdns-3.4.0-jenkins-3.jar:/root/.m2/repository/org/eclipse/jetty/websocket/websocket-client/9.2.12.v20150709/websocket-client-9.2.12.v20150709.jar:/root/.m2/repository/com/google/inject/guice/4.0-beta/guice-4.0-beta.jar:/root/.m2/repository/com/sun/xml/txw2/txw2/20110809/txw2-20110809.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.core/0.0.7/jsch.agentproxy.core-0.0.7.jar:/root/.m2/repository/net/java/sezpoz/sezpoz/1.11/sezpoz-1.11.jar:/root/.m2/repository/org/kohsuke/jinterop/j-interopdeps/2.0.6-kohsuke-1/j-interopdeps-2.0.6-kohsuke-1.jar:/root/.m2/repository/org/jenkins-ci/modules/slave-installer/1.5/slave-installer-1.5.jar:/root/.m2/repository/org/jenkins-ci/plugins/matrix-project/1.0/matrix-project-1.0.jar:/root/.m2/repository/xalan/serializer/2.7.2/serializer-2.7.2.jar:/root/.m2/repository/org/kohsuke/access-modifier-annotation/1.4/access-modifier-annotation-1.4.jar:/root/.m2/repository/org/jvnet/libzfs/libzfs/0.5/libzfs-0.5.jar:/root/.m2/repository/org/ow2/asm/asm/4.0/asm-4.0.jar:/root/.m2/repository/org/jenkins-ci/plugins/mailer/1.13/mailer-1.13.jar:/root/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.54/bcpkix-jdk15on-1.54.jar:/root/.m2/repository/org/jenkins-ci/modules/instance-identity/1.5.1/instance-identity-1.5.1.jar:/root/.m2/repository/org/eclipse/jetty/websocket/websocket-api/9.2.12.v20150709/websocket-api-9.2.12.v20150709.jar:/root/.m2/repository/com/jcraft/jsch.agentproxy.connector-factory/0.0.7/jsch.agentproxy.connector-factory-0.0.7.jar:/root/.m2/repository/com/jcraft/jzlib/1.1.3-kohsuke-1/jzlib-1.1.3-kohsuke-1.jar:/root/.m2/repository/org/jenkins-ci/commons-jexl/1.1-jenkins-20111212/commons-jexl-1.1-jenkins-20111212.jar:/root/.m2/repository/com/github/jnr/jnr-constants/0.8.5/jnr-constants-0.8.5.jar:/root/.m2/repository/org/eclipse/jgit/org.eclipse.jgit/3.7.1.201504261725-r/org.eclipse.jgit-3.7.1.201504261725-r.jar:/root/.m2/repository/org/codehaus/woodstox/wstx-asl/3.2.9/wstx-asl-3.2.9.jar:/root/.m2/repository/org/fusesource/jansi/jansi/1.11/jansi-1.11.jar:/root/.m2/repository/relaxngDatatype/relaxngDatatype/20020414/relaxngDatatype-20020414.jar:/root/.m2/repository/com/cloudbees/diff4j/1.2/diff4j-1.2.jar:/root/.m2/repository/org/eclipse/jetty/jetty-server/9.4.5.v20170502/jetty-server-9.4.5.v20170502.jar:/root/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/root/.m2/repository/args4j/args4j/2.0.31/args4j-2.0.31.jar:/root/.m2/repository/org/eclipse/jetty/websocket/websocket-common/9.2.12.v20150709/websocket-common-9.2.12.v20150709.jar:/root/.m2/repository/org/jenkins-ci/lib/envinject-lib/1.23/envinject-lib-1.23.jar:/root/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/root/.m2/repository/org/kohsuke/stapler/stapler-adjunct-timeline/1.4/stapler-adjunct-timeline-1.4.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-aggregator/1.14.2/workflow-aggregator-1.14.2-tests.jar:/root/.m2/repository/net/sourceforge/nekohtml/nekohtml/1.9.22/nekohtml-1.9.22.jar:/root/.m2/repository/com/github/jnr/jnr-x86asm/1.0.2/jnr-x86asm-1.0.2.jar:/root/.m2/repository/org/jenkins-ci/main/cli/2.7.3/cli-2.7.3.jar:/root/.m2/repository/org/jvnet/tiger-types/2.2/tiger-types-2.2.jar:/root/.m2/repository/org/jvnet/hudson/jtidy/4aug2000r7-dev-hudson-1/jtidy-4aug2000r7-dev-hudson-1.jar:/root/.m2/repository/org/jruby/ext/posix/jna-posix/1.0.3-jenkins-1/jna-posix-1.0.3-jenkins-1.jar:/root/.m2/repository/net/sourceforge/cssparser/cssparser/0.9.16/cssparser-0.9.16.jar:/root/.m2/repository/org/jvnet/hudson/embedded-rhino-debugger/1.2/embedded-rhino-debugger-1.2.jar:/root/.m2/repository/com/jcraft/jsch/0.1.50/jsch-0.1.50.jar:/root/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.54/bcprov-jdk15on-1.54.jar:/root/.m2/repository/org/slf4j/slf4j-jdk14/1.7.25/slf4j-jdk14-1.7.25.jar:/root/.m2/repository/org/jenkins-ci/bytecode-compatibility-transformer/1.8/bytecode-compatibility-transformer-1.8.jar:/root/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25/jcl-over-slf4j-1.7.25.jar:/root/.m2/repository/org/powermock/powermock-reflect/1.5/powermock-reflect-1.5.jar:/root/.m2/repository/org/kohsuke/groovy-sandbox/1.10/groovy-sandbox-1.10.jar:/root/.m2/repository/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar:/root/.m2/repository/org/jvnet/hudson/commons-jelly-tags-define/1.0.1-hudson-20071021/commons-jelly-tags-define-1.0.1-hudson-20071021.jar:/root/.m2/repository/org/springframework/spring-core/2.5.6.SEC03/spring-core-2.5.6.SEC03.jar:/root/.m2/repository/org/eclipse/jetty/jetty-io/9.4.5.v20170502/jetty-io-9.4.5.v20170502.jar:/root/.m2/repository/org/kohsuke/akuma/1.10/akuma-1.10.jar:/root/.m2/repository/org/jenkins-ci/plugins/icon-shim/icon-set/2.0.3/icon-set-2.0.3.jar:/root/.m2/repository/org/eclipse/jetty/jetty-webapp/9.4.5.v20170502/jetty-webapp-9.4.5.v20170502.jar:/root/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/root/.m2/repository/org/netbeans/modules/org-netbeans-insane/RELEASE72/org-netbeans-insane-RELEASE72.jar:/root/.m2/repository/net/java/dev/jna/jna/4.1.0/jna-4.1.0.jar:/root/.m2/repository/org/eclipse/jetty/jetty-util/9.4.5.v20170502/jetty-util-9.4.5.v20170502.jar:/root/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/root/.m2/repository/commons-fileupload/commons-fileupload/1.3.1-jenkins-1/commons-fileupload-1.3.1-jenkins-1.jar:/root/.m2/repository/com/infradna/tool/bridge-method-annotation/1.13/bridge-method-annotation-1.13.jar:/root/.m2/repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar:/root/.m2/repository/org/jenkins-ci/plugins/structs/1.7/structs-1.7.jar:/root/.m2/repository/org/springframework/spring-beans/2.5.6.SEC03/spring-beans-2.5.6.SEC03.jar:/root/.m2/repository/commons-digester/commons-digester/2.1/commons-digester-2.1.jar:/root/.m2/repository/org/springframework/spring-aop/2.5.6.SEC03/spring-aop-2.5.6.SEC03.jar:/root/.m2/repository/org/jenkins-ci/memory-monitor/1.9/memory-monitor-1.9.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-api/1.14.2/workflow-api-1.14.2.jar:/root/.m2/repository/com/github/jnr/jnr-ffi/1.0.7/jnr-ffi-1.0.7.jar:/root/.m2/repository/org/powermock/powermock-api-support/1.5/powermock-api-support-1.5.jar:/root/.m2/repository/org/jenkins-ci/ui/bootstrap/1.3.2/bootstrap-1.3.2-core-assets.jar:/root/.m2/repository/net/java/dev/jna/jna-platform/4.1.0/jna-platform-4.1.0.jar:/root/.m2/repository/org/jenkins-ci/plugins/icon-shim/icon-shim/2.0.3/icon-shim-2.0.3.jar:/root/.m2/repository/commons-jelly/commons-jelly-tags-fmt/1.0/commons-jelly-tags-fmt-1.0.jar:/root/.m2/repository/org/jenkins-ci/ui/jquery-detached/1.2.1/jquery-detached-1.2.1-core-assets.jar:/root/.m2/repository/org/eclipse/jetty/jetty-security/9.4.5.v20170502/jetty-security-9.4.5.v20170502.jar:/root/.m2/repository/com/google/code/findbugs/annotations/3.0.0/annotations-3.0.0.jar:/root/.m2/repository/com/github/jnr/jffi/1.2.7/jffi-1.2.7-native.jar:/root/.m2/repository/org/jenkins-ci/test-annotations/1.2/test-annotations-1.2.jar:/root/.m2/repository/org/w3c/css/sac/1.3/sac-1.3.jar:/root/.m2/repository/org/jvnet/winp/winp/1.22/winp-1.22.jar:/root/.m2/repository/org/jenkins-ci/commons-jelly/1.1-jenkins-20120928/commons-jelly-1.1-jenkins-20120928.jar:/root/.m2/repository/org/jenkins-ci/plugins/credentials/2.1.15/credentials-2.1.15.jar:/root/.m2/repository/de/regnis/q/sequence/sequence-library/1.0.3/sequence-library-1.0.3.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-cps-global-lib/1.14.2/workflow-cps-global-lib-1.14.2.jar:/root/.m2/repository/org/jvnet/hudson/activation/1.1.1-hudson-1/activation-1.1.1-hudson-1.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-basic-steps/1.14.2/workflow-basic-steps-1.14.2.jar:/root/.m2/repository/org/eclipse/jgit/org.eclipse.jgit.http.server/3.7.1.201504261725-r/org.eclipse.jgit.http.server-3.7.1.201504261725-r.jar:/root/.m2/repository/org/tmatesoft/sqljet/sqljet/1.1.10/sqljet-1.1.10.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-job/1.14.2/workflow-job-1.14.2.jar:/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/root/.m2/repository/org/jenkins-ci/plugins/workflow/workflow-step-api/1.14.2/workflow-step-api-1.14.2.jar:/root/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/root/.m2/repository/org/jenkins-ci/task-reactor/1.4/task-reactor-1.4.jar:/root/.m2/repository/org/jenkins-ci/plugins/scm-api/2.0.8/scm-api-2.0.8.jar:/root/.m2/repository/org/jvnet/robust-http-client/robust-http-client/1.2/robust-http-client-1.2.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/org/acegisecurity/acegi-security/1.0.7/acegi-security-1.0.7.jar:/root/.m2/repository/org/kohsuke/asm5/5.0.1/asm5-5.0.1.jar:/root/.m2/repository/org/eclipse/jetty/jetty-http/9.4.5.v20170502/jetty-http-9.4.5.v20170502.jar:/root/.m2/repository/org/kohsuke/stapler/stapler-jelly/1.243/stapler-jelly-1.243.jar:/root/.m2/repository/com/google/guava/guava/11.0.1/guava-11.0.1.jar:/root/.m2/repository/org/springframework/spring-context/2.5.6.SEC03/spring-context-2.5.6.SEC03.jar";
echo "\n\nNode: `hostname`\n";
echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
17:15:43,138 |-INFO in ch.qos.logback.classic.LoggerContext[TBar] - Could NOT find resource [logback-test.xml]
17:15:43,138 |-INFO in ch.qos.logback.classic.LoggerContext[TBar] - Could NOT find resource [logback.groovy]
17:15:43,138 |-INFO in ch.qos.logback.classic.LoggerContext[TBar] - Found resource [logback.xml] at [jar:file:/repair_tools/tbar.jar!/logback.xml]
17:15:43,156 |-INFO in ch.qos.logback.core.joran.spi.ConfigurationWatchList@5a42bbf4 - URL [jar:file:/repair_tools/tbar.jar!/logback.xml] is not of type file
17:15:43,189 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
17:15:43,191 |-INFO in ch.qos.logback.classic.joran.action.ContextNameAction - Setting logger context name as [TBar]
17:15:43,191 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
17:15:43,193 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
17:15:43,229 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.hibernate.engine.query.HQLQueryPlan] to DEBUG
17:15:43,229 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [org.hibernate.engine.query.HQLQueryPlan] to false
17:15:43,229 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.piedra.logback] to DEBUG
17:15:43,230 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [FILE]. Did you define it below instead of above in the configuration file?
17:15:43,230 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See http://logback.qos.ch/codes.html#appender_order for more details.
17:15:43,230 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to DEBUG
17:15:43,230 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]
17:15:43,230 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [ROLLINGFILE]. Did you define it below instead of above in the configuration file?
17:15:43,230 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See http://logback.qos.ch/codes.html#appender_order for more details.
17:15:43,230 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
17:15:43,231 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@270421f5 - Registering current configuration as safe fallback point

2022-09-14 17:15:43.396 [main] INFO  edu.lu.uni.serval.tbar.AbstractFixer - TBar_vul4j_jenkinsci_subversion-plugin_VUL4J-58 Failed Tests: 3
2022-09-14 17:15:43.400 [main] INFO  edu.lu.uni.serval.tbar.TBarFixer - =======StaticBugFixer: Start to fix suspicious code======
2022-09-14 17:15:43.400 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - hudson.scm.SubversionRepositoryStatus ===63
2022-09-14 17:15:43.798 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
public String getSearchUrl() {
        return uuid.toString();
    }
2022-09-14 17:15:45.270 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
--- a/src/main/java/hudson/scm/SubversionRepositoryStatus.java
+++ b/src/main/java/hudson/scm/SubversionRepositoryStatus.java
@@ -60,9 +60,7 @@ public class SubversionRepositoryStatus extends AbstractModelObject {
-    public String getSearchUrl() {
-        return uuid.toString();
-    }
+
2022-09-14 17:15:45.270 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 17:15:46.679 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 17:15:46.685 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
2022-09-14 17:15:46.685 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 17:15:48.014 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
2022-09-14 17:16:53.023 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - hudson.scm.SubversionStatus ===45
2022-09-14 17:16:53.038 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
public String getSearchUrl() {
        return getUrlName();
    }
2022-09-14 17:16:53.061 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -42,9 +42,7 @@ public class SubversionStatus extends AbstractModelObject implements Unprotected
-    public String getSearchUrl() {
-        return getUrlName();
-    }
+
2022-09-14 17:16:53.062 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 17:16:54.132 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 17:16:54.140 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
2022-09-14 17:16:54.140 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 17:16:55.302 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
2022-09-14 17:22:23.333 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - hudson.scm.SubversionRepositoryStatus ===52
2022-09-14 17:22:23.400 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
public class SubversionRepositoryStatus extends AbstractModelObject {
    public final UUID uuid;

    public SubversionRepositoryStatus(UUID uuid) {
        this.uuid = uuid;
    }

    public String getDisplayName() {
        return uuid.toString();
    }

    public String getSearchUrl() {
        return uuid.toString();
    }
    
    static interface JobProvider {
        @SuppressWarnings("rawtypes")
        List<Job> getAllJobs();
    }

    /**
     * An extension point to allow things other than jobs to listen for repository status updates.
     */
    public static abstract class Listener implements ExtensionPoint {

        /**
         * Called when a post-commit hook notification has been received.
         * @param uuid the UUID of the repository against which the hook was received.
         * @param revision the revision (if known) or {@code -1} if unknown.
         * @return {@code true} if a match for the UUID was found and something was scheduled as a result.
         */
        public abstract boolean onNotify(UUID uuid, long revision, Set<String> affectedPaths);
    }
    
    private static Method IS_IGNORE_POST_COMMIT_HOOKS_METHOD;
    
    /**
     * Notify the commit to this repository.
     *
     * <p>
     * Because this URL is not guarded, we can't really trust the data that's sent to us. But we intentionally
     * don't protect this URL to simplify <tt>post-commit</tt> script set up.
     */
    public void doNotifyCommit(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
        requirePOST();

        // compute the affected paths
        Set<String> affectedPath = new HashSet<String>();
        String line;
        BufferedReader r = new BufferedReader(req.getReader());
        
        try {
	        while((line=r.readLine())!=null) {
	        	if (LOGGER.isLoggable(FINER)) {
	        		LOGGER.finer("Reading line: "+line);
	        	}
	            affectedPath.add(line.substring(4));
	            if (line.startsWith("svnlook changed --revision ")) {
	                String msg = "Expecting the output from the svnlook command but instead you just sent me the svnlook invocation command line: " + line;
	                LOGGER.warning(msg);
	                throw new IllegalArgumentException(msg);
	            }
	        }
        } finally {
        	IOUtils.closeQuietly(r);
        }

        if(LOGGER.isLoggable(FINE))
            LOGGER.fine("Change reported to Subversion repository "+uuid+" on "+affectedPath);

        // we can't reliably use req.getParameter() as it can try to parse the payload, which we've already consumed above.
        // servlet container relies on Content-type to decide if it wants to parse the payload or not, and at least
        // in case of Jetty, it doesn't check if the payload is
        QueryParameterMap query = new QueryParameterMap(req);
        String revParam = query.get("rev");
        if (revParam == null) {
            revParam = req.getHeader("X-Hudson-Subversion-Revision");
        }

        long rev = -1;
        if (revParam != null) {
            rev = Long.parseLong(revParam);
        }

        boolean listenerDidSomething = false;
        for (Listener listener : ExtensionList.lookup(Listener.class)) {
            try {
                if (listener.onNotify(uuid, rev, affectedPath)) {
                    listenerDidSomething = true;
                }
            } catch (Throwable t) {
                LOGGER.log(WARNING, "Listener " + listener.getClass().getName() + " threw an uncaught exception", t);
            }
        }

        if (!listenerDidSomething) LOGGER.log(Level.WARNING, "No interest in change to repository UUID {0} found", uuid);

        rsp.setStatus(SC_OK);
    }

    private static class SubversionRepoUUIDAndRootPath {
        public final UUID uuid;
        public final String rootPath;

        public SubversionRepoUUIDAndRootPath(UUID uuid, String rootPath) {
            this.uuid = uuid;
            this.rootPath = rootPath;
        }
    }

    @Extension
    public static class JobTriggerListenerImpl extends Listener {

        private Map<String, UUID> remoteUUIDCache = new HashMap<String, UUID>();

        private JobProvider jobProvider = new JobProvider() {
            @SuppressWarnings("rawtypes")
            public List<Job> getAllJobs() {
                return Jenkins.getInstance().getAllItems(Job.class);
            }
        };

        // for tests
        void setJobProvider(JobProvider jobProvider) {
            this.jobProvider = jobProvider;
        }

        private SubversionRepoUUIDAndRootPath remoteUUIDAndRootPathFromCacheOrFromSVN(Job job, SCM scm, ModuleLocation moduleLocation, String urlFromConfiguration) throws SVNException {
            SubversionRepoUUIDAndRootPath uuidAndRootPath = null;
            for (Map.Entry<String, UUID> e : remoteUUIDCache.entrySet()) {
                String remoteRepoRootURL = e.getKey();
                String remoteRepoRootURLWithSlash = remoteRepoRootURL + "/";
                if (urlFromConfiguration.startsWith(remoteRepoRootURLWithSlash) || urlFromConfiguration.equals(remoteRepoRootURL)) {
                    UUID uuid = e.getValue();
                    String rootPath = SVNURL.parseURIDecoded(e.getKey()).getPath();
                    uuidAndRootPath = new SubversionRepoUUIDAndRootPath(uuid, rootPath);

                    LOGGER.finer("Using cached uuid for module location " + urlFromConfiguration + " of job "+ job);
                    break;
                }
            }

            if (uuidAndRootPath == null) {
                if (LOGGER.isLoggable(FINER)) {
                    LOGGER.finer("Could not find " + urlFromConfiguration + " in " + remoteUUIDCache.keySet());
                }
                UUID remoteUUID = moduleLocation.getUUID(job, scm);
                SVNURL repositoryRoot = moduleLocation.getRepositoryRoot(job, scm);
                remoteUUIDCache.put(repositoryRoot.toString(), remoteUUID);
                uuidAndRootPath = new SubversionRepoUUIDAndRootPath(remoteUUID, repositoryRoot.getPath());
            }
            return uuidAndRootPath;
        }

        boolean doModuleLocationHasAPathFromAffectedPath(String configuredRepoFullPath, String rootRepoPath, Set<String> affectedPath) {
            boolean containsAnAffectedPath = false;
            if (configuredRepoFullPath.startsWith(rootRepoPath)) {
                String remainingRepoPath = configuredRepoFullPath.substring(rootRepoPath.length());
                if (remainingRepoPath.startsWith("/")) remainingRepoPath=remainingRepoPath.substring(1);
                String remainingRepoPathSlash = remainingRepoPath + '/';

                for (String path : affectedPath) {
                    if (path.equals(remainingRepoPath) /*for files*/ || 
                            path.startsWith(remainingRepoPathSlash) /*for dirs*/ ||
                            remainingRepoPath.length() == 0 /*when someone is checking out the whole repo (that is, configuredRepoFullPath==rootRepoPath)*/) {
                        // this project is possibly changed. poll now.
                        // if any of the data we used was bogus, the trigger will not detect a change
                        containsAnAffectedPath = true;
                        break;
                    }
                }
            }
            return containsAnAffectedPath;
        }

        private void scheduleImediatePollingOfJob(Job job, SCMTrigger trigger, List<SvnInfo> infos) {
            LOGGER.fine("Scheduling the immediate polling of " + job);

            final RevisionParameterAction[] actions;
            if (infos.isEmpty()) {
                actions = new RevisionParameterAction[0];
            } else {
                actions = new RevisionParameterAction[] { new RevisionParameterAction(infos) };
            }

            trigger.run(actions);
        }

        @Override
        public boolean onNotify(UUID uuid, long rev, Set<String> affectedPath) {
            boolean scmFound = false, triggerFound = false, uuidFound = false, pathFound = false;
            LOGGER.fine("Starting subversion locations checks for all jobs");
            for (Job p : this.jobProvider.getAllJobs()) {
                SCMTriggerItem scmTriggerItem = SCMTriggerItem.SCMTriggerItems.asSCMTriggerItem(p);
                if (scmTriggerItem == null) {
                    continue;
                }
                if (p instanceof AbstractProject && ((AbstractProject) p).isDisabled()) {
                    continue;
                }
                String jobName = p.getName();
                SCMS: for (SCM scm : scmTriggerItem.getSCMs()) {
                    if (scm instanceof SubversionSCM) scmFound = true; else continue;

                    SCMTrigger trigger = scmTriggerItem.getSCMTrigger();
                    if (trigger!=null && !doesIgnorePostCommitHooks(trigger)) triggerFound = true; else continue;

                    SubversionSCM sscm = (SubversionSCM) scm;

                    List<SvnInfo> infos = new ArrayList<SvnInfo>();

                    try {
                        boolean projectMatches = false;
                        for (ModuleLocation loc : sscm.getProjectLocations(p)) {
                            String urlFromConfiguration = loc.getURL();
                            //LOGGER.log(WARNING, "Checking uuid for module location + " + loc + " of job "+ p + " (urlFromConfiguration : " + urlFromConfiguration + ")");
                        
                            try {
                                SubversionRepoUUIDAndRootPath uuidAndRootPath = this.remoteUUIDAndRootPathFromCacheOrFromSVN(p, sscm, loc, urlFromConfiguration);
                                UUID remoteUUID = uuidAndRootPath.uuid;
                                if (remoteUUID.equals(uuid)) uuidFound = true; else continue;

                                String configuredRepoFullPath = loc.getSVNURL().getPath();
                                String rootRepoPath = uuidAndRootPath.rootPath;
                                if (this.doModuleLocationHasAPathFromAffectedPath(configuredRepoFullPath, rootRepoPath, affectedPath)) {
                                    projectMatches = true;
                                    pathFound = true;
                                }

                                if ( rev != -1 ) {
                                    infos.add(new SvnInfo(loc.getURL(), rev));
                                }
                            } catch (SVNCancelException e) {
                                LOGGER.log(WARNING, "Failed to handle Subversion commit notification (was trying to access " + urlFromConfiguration + " of job " + jobName + "). If you are using svn:externals feature ensure that the credentials of the externals are added on the Additional Credentials field", e);
                            } catch (SVNException e) {
                                LOGGER.log(WARNING, "Failed to handle Subversion commit notification (was trying to access " + urlFromConfiguration + " of job " + jobName + ")", e);
                            }
                            
                            if (projectMatches) {
                                this.scheduleImediatePollingOfJob(p, trigger, infos);
                                break SCMS;
                            }
                        }
                    } catch(IOException e) {
                        LOGGER.log(WARNING, "Failed to handle Subversion commit notification (getting module locations failed for job " + jobName + ")", e);
                    }
                }
            }
            LOGGER.fine("Ended subversion locations checks for all jobs");

            if (!scmFound)          LOGGER.warning("No subversion jobs found");
            else if (!triggerFound) LOGGER.warning("No subversion jobs using SCM polling or all jobs using SCM polling are ignoring post-commit hooks");
            else if (!uuidFound)    LOGGER.warning("No subversion jobs using repository: " + uuid);
            else if (!pathFound)    LOGGER.fine("No jobs found matching the modified files");

            return scmFound;
        }
    }
    
    private static boolean doesIgnorePostCommitHooks(SCMTrigger trigger) {
        if (IS_IGNORE_POST_COMMIT_HOOKS_METHOD == null)
            return false;
        
        try {
            return (Boolean)IS_IGNORE_POST_COMMIT_HOOKS_METHOD.invoke(trigger, (Object[])null);
        } catch (Exception e) {
            LOGGER.log(WARNING,"Failure when calling isIgnorePostCommitHooks",e);
            return false;
        }
    }

    static {
        try {
            IS_IGNORE_POST_COMMIT_HOOKS_METHOD = SCMTrigger.class.getMethod("isIgnorePostCommitHooks", (Class[])null);
        } catch (Exception e) {
            // we're running in an older Jenkins version which doesn't have this method
        }
    }

    private static final Logger LOGGER = Logger.getLogger(SubversionRepositoryStatus.class.getName());
}
2022-09-14 17:22:23.561 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
--- a/src/main/java/hudson/scm/SubversionRepositoryStatus.java
+++ b/src/main/java/hudson/scm/SubversionRepositoryStatus.java
@@ -49,284 +49,4 @@ import org.tmatesoft.svn.core.SVNException;
-public class SubversionRepositoryStatus extends AbstractModelObject {
-    public final UUID uuid;
-    public SubversionRepositoryStatus(UUID uuid) {
-        this.uuid = uuid;
-    }
-
-    public String getDisplayName() {
-        return uuid.toString();
-    }
-
-    public String getSearchUrl() {
-        return uuid.toString();
-    }
-
-    static interface JobProvider {
-        @SuppressWarnings("rawtypes")
-        List<Job> getAllJobs();
-    }
-
-    /**
-     * An extension point to allow things other than jobs to listen for repository status updates.
-     */
-    public static abstract class Listener implements ExtensionPoint {
-
-        /**
-         * Called when a post-commit hook notification has been received.
-         * @param uuid the UUID of the repository against which the hook was received.
-         * @param revision the revision (if known) or {@code -1} if unknown.
-         * @return {@code true} if a match for the UUID was found and something was scheduled as a result.
-         */
-        public abstract boolean onNotify(UUID uuid, long revision, Set<String> affectedPaths);
-    }
-
-    private static Method IS_IGNORE_POST_COMMIT_HOOKS_METHOD;
-
-    /**
-     * Notify the commit to this repository.
-     *
-     * <p>
-     * Because this URL is not guarded, we can't really trust the data that's sent to us. But we intentionally
-     * don't protect this URL to simplify <tt>post-commit</tt> script set up.
-     */
-    public void doNotifyCommit(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
-        requirePOST();
-
-        // compute the affected paths
-        Set<String> affectedPath = new HashSet<String>();
-        String line;
-        BufferedReader r = new BufferedReader(req.getReader());
-
-        try {
-	        while((line=r.readLine())!=null) {
-	        	if (LOGGER.isLoggable(FINER)) {
-	        		LOGGER.finer("Reading line: "+line);
-	        	}
-	            affectedPath.add(line.substring(4));
-	            if (line.startsWith("svnlook changed --revision ")) {
-	                String msg = "Expecting the output from the svnlook command but instead you just sent me the svnlook invocation command line: " + line;
-	                LOGGER.warning(msg);
-	                throw new IllegalArgumentException(msg);
-	            }
-	        }
-        } finally {
-        	IOUtils.closeQuietly(r);
-        }
-
-        if(LOGGER.isLoggable(FINE))
-            LOGGER.fine("Change reported to Subversion repository "+uuid+" on "+affectedPath);
-
-        // we can't reliably use req.getParameter() as it can try to parse the payload, which we've already consumed above.
-        // servlet container relies on Content-type to decide if it wants to parse the payload or not, and at least
-        // in case of Jetty, it doesn't check if the payload is
-        QueryParameterMap query = new QueryParameterMap(req);
-        String revParam = query.get("rev");
-        if (revParam == null) {
-            revParam = req.getHeader("X-Hudson-Subversion-Revision");
-        }
-
-        long rev = -1;
-        if (revParam != null) {
-            rev = Long.parseLong(revParam);
-        }
-
-        boolean listenerDidSomething = false;
-        for (Listener listener : ExtensionList.lookup(Listener.class)) {
-            try {
-                if (listener.onNotify(uuid, rev, affectedPath)) {
-                    listenerDidSomething = true;
-                }
-            } catch (Throwable t) {
-                LOGGER.log(WARNING, "Listener " + listener.getClass().getName() + " threw an uncaught exception", t);
-            }
-        }
-
-        if (!listenerDidSomething) LOGGER.log(Level.WARNING, "No interest in change to repository UUID {0} found", uuid);
-
-        rsp.setStatus(SC_OK);
-    }
-
-    private static class SubversionRepoUUIDAndRootPath {
-        public final UUID uuid;
-        public final String rootPath;
-
-        public SubversionRepoUUIDAndRootPath(UUID uuid, String rootPath) {
-            this.uuid = uuid;
-            this.rootPath = rootPath;
-        }
-    }
-
-    @Extension
-    public static class JobTriggerListenerImpl extends Listener {
-
-        private Map<String, UUID> remoteUUIDCache = new HashMap<String, UUID>();
-
-        private JobProvider jobProvider = new JobProvider() {
-            @SuppressWarnings("rawtypes")
-            public List<Job> getAllJobs() {
-                return Jenkins.getInstance().getAllItems(Job.class);
-            }
-        };
-
-        // for tests
-        void setJobProvider(JobProvider jobProvider) {
-            this.jobProvider = jobProvider;
-        }
-
-        private SubversionRepoUUIDAndRootPath remoteUUIDAndRootPathFromCacheOrFromSVN(Job job, SCM scm, ModuleLocation moduleLocation, String urlFromConfiguration) throws SVNException {
-            SubversionRepoUUIDAndRootPath uuidAndRootPath = null;
-            for (Map.Entry<String, UUID> e : remoteUUIDCache.entrySet()) {
-                String remoteRepoRootURL = e.getKey();
-                String remoteRepoRootURLWithSlash = remoteRepoRootURL + "/";
-                if (urlFromConfiguration.startsWith(remoteRepoRootURLWithSlash) || urlFromConfiguration.equals(remoteRepoRootURL)) {
-                    UUID uuid = e.getValue();
-                    String rootPath = SVNURL.parseURIDecoded(e.getKey()).getPath();
-                    uuidAndRootPath = new SubversionRepoUUIDAndRootPath(uuid, rootPath);
-
-                    LOGGER.finer("Using cached uuid for module location " + urlFromConfiguration + " of job "+ job);
-                    break;
-                }
-            }
-
-            if (uuidAndRootPath == null) {
-                if (LOGGER.isLoggable(FINER)) {
-                    LOGGER.finer("Could not find " + urlFromConfiguration + " in " + remoteUUIDCache.keySet());
-                }
-                UUID remoteUUID = moduleLocation.getUUID(job, scm);
-                SVNURL repositoryRoot = moduleLocation.getRepositoryRoot(job, scm);
-                remoteUUIDCache.put(repositoryRoot.toString(), remoteUUID);
-                uuidAndRootPath = new SubversionRepoUUIDAndRootPath(remoteUUID, repositoryRoot.getPath());
-            }
-            return uuidAndRootPath;
-        }
-
-        boolean doModuleLocationHasAPathFromAffectedPath(String configuredRepoFullPath, String rootRepoPath, Set<String> affectedPath) {
-            boolean containsAnAffectedPath = false;
-            if (configuredRepoFullPath.startsWith(rootRepoPath)) {
-                String remainingRepoPath = configuredRepoFullPath.substring(rootRepoPath.length());
-                if (remainingRepoPath.startsWith("/")) remainingRepoPath=remainingRepoPath.substring(1);
-                String remainingRepoPathSlash = remainingRepoPath + '/';
-
-                for (String path : affectedPath) {
-                    if (path.equals(remainingRepoPath) /*for files*/ ||
-                            path.startsWith(remainingRepoPathSlash) /*for dirs*/ ||
-                            remainingRepoPath.length() == 0 /*when someone is checking out the whole repo (that is, configuredRepoFullPath==rootRepoPath)*/) {
-                        // this project is possibly changed. poll now.
-                        // if any of the data we used was bogus, the trigger will not detect a change
-                        containsAnAffectedPath = true;
-                        break;
-                    }
-                }
-            }
-            return containsAnAffectedPath;
-        }
-
-        private void scheduleImediatePollingOfJob(Job job, SCMTrigger trigger, List<SvnInfo> infos) {
-            LOGGER.fine("Scheduling the immediate polling of " + job);
-
-            final RevisionParameterAction[] actions;
-            if (infos.isEmpty()) {
-                actions = new RevisionParameterAction[0];
-            } else {
-                actions = new RevisionParameterAction[] { new RevisionParameterAction(infos) };
-            }
-
-            trigger.run(actions);
-        }
-
-        @Override
-        public boolean onNotify(UUID uuid, long rev, Set<String> affectedPath) {
-            boolean scmFound = false, triggerFound = false, uuidFound = false, pathFound = false;
-            LOGGER.fine("Starting subversion locations checks for all jobs");
-            for (Job p : this.jobProvider.getAllJobs()) {
-                SCMTriggerItem scmTriggerItem = SCMTriggerItem.SCMTriggerItems.asSCMTriggerItem(p);
-                if (scmTriggerItem == null) {
-                    continue;
-                }
-                if (p instanceof AbstractProject && ((AbstractProject) p).isDisabled()) {
-                    continue;
-                }
-                String jobName = p.getName();
-                SCMS: for (SCM scm : scmTriggerItem.getSCMs()) {
-                    if (scm instanceof SubversionSCM) scmFound = true; else continue;
-
-                    SCMTrigger trigger = scmTriggerItem.getSCMTrigger();
-                    if (trigger!=null && !doesIgnorePostCommitHooks(trigger)) triggerFound = true; else continue;
-
-                    SubversionSCM sscm = (SubversionSCM) scm;
-
-                    List<SvnInfo> infos = new ArrayList<SvnInfo>();
-
-                    try {
-                        boolean projectMatches = false;
-                        for (ModuleLocation loc : sscm.getProjectLocations(p)) {
-                            String urlFromConfiguration = loc.getURL();
-                            //LOGGER.log(WARNING, "Checking uuid for module location + " + loc + " of job "+ p + " (urlFromConfiguration : " + urlFromConfiguration + ")");
-
-                            try {
-                                SubversionRepoUUIDAndRootPath uuidAndRootPath = this.remoteUUIDAndRootPathFromCacheOrFromSVN(p, sscm, loc, urlFromConfiguration);
-                                UUID remoteUUID = uuidAndRootPath.uuid;
-                                if (remoteUUID.equals(uuid)) uuidFound = true; else continue;
-
-                                String configuredRepoFullPath = loc.getSVNURL().getPath();
-                                String rootRepoPath = uuidAndRootPath.rootPath;
-                                if (this.doModuleLocationHasAPathFromAffectedPath(configuredRepoFullPath, rootRepoPath, affectedPath)) {
-                                    projectMatches = true;
-                                    pathFound = true;
-                                }
-
-                                if ( rev != -1 ) {
-                                    infos.add(new SvnInfo(loc.getURL(), rev));
-                                }
-                            } catch (SVNCancelException e) {
-                                LOGGER.log(WARNING, "Failed to handle Subversion commit notification (was trying to access " + urlFromConfiguration + " of job " + jobName + "). If you are using svn:externals feature ensure that the credentials of the externals are added on the Additional Credentials field", e);
-                            } catch (SVNException e) {
-                                LOGGER.log(WARNING, "Failed to handle Subversion commit notification (was trying to access " + urlFromConfiguration + " of job " + jobName + ")", e);
-                            }
-
-                            if (projectMatches) {
-                                this.scheduleImediatePollingOfJob(p, trigger, infos);
-                                break SCMS;
-                            }
-                        }
-                    } catch(IOException e) {
-                        LOGGER.log(WARNING, "Failed to handle Subversion commit notification (getting module locations failed for job " + jobName + ")", e);
-                    }
-                }
-            }
-            LOGGER.fine("Ended subversion locations checks for all jobs");
-
-            if (!scmFound)          LOGGER.warning("No subversion jobs found");
-            else if (!triggerFound) LOGGER.warning("No subversion jobs using SCM polling or all jobs using SCM polling are ignoring post-commit hooks");
-            else if (!uuidFound)    LOGGER.warning("No subversion jobs using repository: " + uuid);
-            else if (!pathFound)    LOGGER.fine("No jobs found matching the modified files");
-
-            return scmFound;
-        }
-    }
-
-    private static boolean doesIgnorePostCommitHooks(SCMTrigger trigger) {
-        if (IS_IGNORE_POST_COMMIT_HOOKS_METHOD == null)
-            return false;
-
-        try {
-            return (Boolean)IS_IGNORE_POST_COMMIT_HOOKS_METHOD.invoke(trigger, (Object[])null);
-        } catch (Exception e) {
-            LOGGER.log(WARNING,"Failure when calling isIgnorePostCommitHooks",e);
-            return false;
-        }
-    }
-
-    static {
-        try {
-            IS_IGNORE_POST_COMMIT_HOOKS_METHOD = SCMTrigger.class.getMethod("isIgnorePostCommitHooks", (Class[])null);
-        } catch (Exception e) {
-            // we're running in an older Jenkins version which doesn't have this method
-        }
-    }
-
-    private static final Logger LOGGER = Logger.getLogger(SubversionRepositoryStatus.class.getName());
-}
2022-09-14 17:22:23.561 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 17:22:24.809 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 17:22:24.832 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - hudson.scm.SubversionStatus ===40
2022-09-14 17:22:24.836 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
@Extension
public class SubversionStatus extends AbstractModelObject implements UnprotectedRootAction {
    public String getDisplayName() {
        return "Subversion";
    }

    public String getSearchUrl() {
        return getUrlName();
    }

    public String getIconFileName() {
        // TODO
        return null;
    }

    public String getUrlName() {
        return "subversion";
    }

    public SubversionRepositoryStatus getDynamic(String uuid) {
        if(UUID_PATTERN.matcher(uuid).matches())
            return new SubversionRepositoryStatus(UUID.fromString(uuid));
        return null;
    }

    private static final Pattern UUID_PATTERN = Pattern.compile("\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{12}");
}
2022-09-14 17:22:24.856 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Patch Candidate:
@@ -36,30 +36,4 @@ import java.util.UUID;
-@Extension
-public class SubversionStatus extends AbstractModelObject implements UnprotectedRootAction {
-    public String getDisplayName() {
-        return "Subversion";
-    }
-    public String getSearchUrl() {
-        return getUrlName();
-    }
-
-    public String getIconFileName() {
-        // TODO
-        return null;
-    }
-
-    public String getUrlName() {
-        return "subversion";
-    }
-
-    public SubversionRepositoryStatus getDynamic(String uuid) {
-        if(UUID_PATTERN.matcher(uuid).matches())
-            return new SubversionRepositoryStatus(UUID.fromString(uuid));
-        return null;
-    }
-
-    private static final Pattern UUID_PATTERN = Pattern.compile("\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{12}");
-}
2022-09-14 17:22:24.856 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
2022-09-14 17:22:25.840 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - BuggyProject ---Fixer: fix fail because of failed compiling! 
2022-09-14 17:22:25.843 [main] INFO  edu.lu.uni.serval.tbar.TBarFixer - =======StaticBugFixer: Finish off fixing======
Failed to fix bug


Node: ee2bf67284b9



Date: Wed Sep 14 17:22:25 EDT 2022

