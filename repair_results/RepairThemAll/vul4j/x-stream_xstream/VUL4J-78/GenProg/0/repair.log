cd /workdir/GenProg_vul4j_x-stream_xstream_VUL4J-78;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/jdk1.7.0_80/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/jdk1.7.0_80";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	GenProg \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/GenProg_vul4j_x-stream_xstream_VUL4J-78 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -pl xstream -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/GenProg_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java \
	-DbinJavaDir /workdir/GenProg_vul4j_x-stream_xstream_VUL4J-78/xstream/target/classes \
	-DbinTestDir /workdir/GenProg_vul4j_x-stream_xstream_VUL4J-78/xstream/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-78 \
	-Ddependences /root/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/root/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar:/root/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/root/.m2/repository/cglib/cglib-nodep/2.2/cglib-nodep-2.2.jar:/root/.m2/repository/org/jdom/jdom2/2.0.5/jdom2-2.0.5.jar:/root/.m2/repository/org/codehaus/woodstox/wstx-asl/3.2.7/wstx-asl-3.2.7.jar:/root/.m2/repository/org/json/json/20080701/json-20080701.jar:/root/.m2/repository/org/jdom/jdom/1.1.3/jdom-1.1.3.jar:/root/.m2/repository/javax/activation/activation/1.1.1/activation-1.1.1.jar:/root/.m2/repository/stax/stax/1.2.0/stax-1.2.0.jar:/root/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/root/.m2/repository/com/megginson/sax/xml-writer/0.2/xml-writer-0.2.jar:/root/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/root/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar:/root/.m2/repository/org/codehaus/jettison/jettison/1.2/jettison-1.2.jar:/root/.m2/repository/net/sf/kxml/kxml2/2.3.0/kxml2-2.3.0.jar:/root/.m2/repository/jmock/jmock/1.0.1/jmock-1.0.1.jar:/root/.m2/repository/joda-time/joda-time/1.6/joda-time-1.6.jar:/root/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar:/root/.m2/repository/xom/xom/1.1/xom-1.1.jar:/root/.m2/repository/net/sf/kxml/kxml2-min/2.3.0/kxml2-min-2.3.0.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Fault localization starts...
Number of positive tests: 1816
Number of negative tests: 1
Negative tests: [com.thoughtworks.acceptance.SecurityVulnerabilityTest#testCannotInjectEventHandlerWithUnconfiguredSecurityFramework]
Faulty Lines: 
com.thoughtworks.xstream.XStream#2362:1.0
com.thoughtworks.xstream.XStream#1482:1.0
com.thoughtworks.xstream.XStream#1483:1.0
com.thoughtworks.xstream.XStream#714:1.0
com.thoughtworks.xstream.XStream#2540:1.0
com.thoughtworks.xstream.XStream#341:1.0
com.thoughtworks.xstream.XStream#699:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 1816
Filtering of the tests is finished!
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,7 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        this.converterRegistry = converterRegistry;
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,7 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
+        xstream.addPermission(NoTypePermission.NONE);
}

protected void setupAliases() {
Number of failed tests: 71
Fitness: 72.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,7 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        addImmutableTypeDynamically("java.util.Currency", true);
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,8 +1479,10 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            registerConverter(new JavaMethodConverter(classLoaderReference),
+					PRIORITY_NORMAL);
+			if (insecureWarning) {
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 2
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,27 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        if (JVM.isVersion(7)) {
+			Class type = JVM.loadClassForName("java.nio.file.Paths");
+			if (type != null) {
+				Method methodGet;
+				try {
+					methodGet = type.getDeclaredMethod("get", new Class[] {
+							String.class, String[].class });
+					if (methodGet != null) {
+						Object path = methodGet.invoke(null, new Object[] {
+								".", new String[0] });
+						if (path != null) {
+							addImmutableType(path.getClass(), false);
+						}
+					}
+				} catch (NoSuchMethodException e) {
+				} catch (SecurityException e) {
+				} catch (IllegalAccessException e) {
+				} catch (InvocationTargetException e) {
+				}
+			}
+		}
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,10 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (securityMapper != null) {
+				insecureWarning &= permission != NoTypePermission.NONE;
+				securityMapper.addPermission(permission);
+			}
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            setupConverters();
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,50 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            if (JVM.isVersion(8)) {
+				addImmutableTypeDynamically("java.time.Duration", false);
+				addImmutableTypeDynamically("java.time.Instant", false);
+				addImmutableTypeDynamically("java.time.LocalDate", false);
+				addImmutableTypeDynamically("java.time.LocalDateTime", false);
+				addImmutableTypeDynamically("java.time.LocalTime", false);
+				addImmutableTypeDynamically("java.time.MonthDay", false);
+				addImmutableTypeDynamically("java.time.OffsetDateTime", false);
+				addImmutableTypeDynamically("java.time.OffsetTime", false);
+				addImmutableTypeDynamically("java.time.Period", false);
+				addImmutableTypeDynamically("java.time.Year", false);
+				addImmutableTypeDynamically("java.time.YearMonth", false);
+				addImmutableTypeDynamically("java.time.ZonedDateTime", false);
+				addImmutableTypeDynamically("java.time.ZoneId", false);
+				addImmutableTypeDynamically("java.time.ZoneOffset", false);
+				addImmutableTypeDynamically("java.time.ZoneRegion", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.HijrahChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.HijrahDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.IsoChronology",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.JapaneseChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseEra",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.MinguoChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.MinguoDate",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistChronology", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistDate", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Field", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Unit", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.JulianFields$Field", false);
+			}
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,85 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (JVM.isVersion(8)) {
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.ChronologyConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.DurationConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.HijrahDateConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.JapaneseDateConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.JapaneseEraConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.InstantConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.LocalDateConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.LocalDateTimeConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.LocalTimeConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.MinguoDateConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.MonthDayConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.OffsetDateTimeConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.OffsetTimeConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.PeriodConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.SystemClockConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.ThaiBuddhistDateConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.ValueRangeConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.WeekFieldsConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.YearConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.YearMonthConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.ZonedDateTimeConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.time.ZoneIdConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.reflection.LambdaConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class,
+								ReflectionProvider.class,
+								ClassLoaderReference.class }, new Object[] {
+								mapper, reflectionProvider,
+								classLoaderReference });
+			}
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        Class type = JVM
+				.loadClassForName("javax.activation.ActivationDataFlavor");
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        setupImmutableTypes();
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        alias("null", Mapper.Null.class);
+		insecureWarning = true;
}

/**
@@ -1479,7 +1480,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            setupSecurity();
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
Number of failed tests: 3
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,30 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            if (JVM.isVersion(5)) {
+				if (JVM.loadClassForName("javax.xml.datatype.Duration") != null) {
+					registerConverterDynamically(
+							"com.thoughtworks.xstream.converters.extended.DurationConverter",
+							PRIORITY_NORMAL, null, null);
+				}
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumSetConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumMapConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.StringBuilderConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.UUIDConverter",
+						PRIORITY_NORMAL, null, null);
+			}
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 3
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,7 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter((Converter) new CharConverter(), PRIORITY_NORMAL);
}

/**
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:162)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:325)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:162)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:325)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,11 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                if (attributeMapper == null) {
+					throw new com.thoughtworks.xstream.InitializationException(
+							"No " + AttributeMapper.class.getName()
+									+ " available");
+				}
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            alias("boolean", Boolean.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:162)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:325)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            alias("field", Field.class);
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2360,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            alias("field", Field.class);
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2360,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,50 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            if (JVM.isVersion(8)) {
+				addImmutableTypeDynamically("java.time.Duration", false);
+				addImmutableTypeDynamically("java.time.Instant", false);
+				addImmutableTypeDynamically("java.time.LocalDate", false);
+				addImmutableTypeDynamically("java.time.LocalDateTime", false);
+				addImmutableTypeDynamically("java.time.LocalTime", false);
+				addImmutableTypeDynamically("java.time.MonthDay", false);
+				addImmutableTypeDynamically("java.time.OffsetDateTime", false);
+				addImmutableTypeDynamically("java.time.OffsetTime", false);
+				addImmutableTypeDynamically("java.time.Period", false);
+				addImmutableTypeDynamically("java.time.Year", false);
+				addImmutableTypeDynamically("java.time.YearMonth", false);
+				addImmutableTypeDynamically("java.time.ZonedDateTime", false);
+				addImmutableTypeDynamically("java.time.ZoneId", false);
+				addImmutableTypeDynamically("java.time.ZoneOffset", false);
+				addImmutableTypeDynamically("java.time.ZoneRegion", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.HijrahChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.HijrahDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.IsoChronology",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.JapaneseChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseEra",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.MinguoChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.MinguoDate",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistChronology", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistDate", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Field", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Unit", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.JulianFields$Field", false);
+			}
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,30 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            if (JVM.isVersion(5)) {
+				if (JVM.loadClassForName("javax.xml.datatype.Duration") != null) {
+					registerConverterDynamically(
+							"com.thoughtworks.xstream.converters.extended.DurationConverter",
+							PRIORITY_NORMAL, null, null);
+				}
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumSetConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumMapConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.StringBuilderConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.UUIDConverter",
+						PRIORITY_NORMAL, null, null);
+			}
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 3
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,6 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,30 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            if (JVM.isVersion(5)) {
+				if (JVM.loadClassForName("javax.xml.datatype.Duration") != null) {
+					registerConverterDynamically(
+							"com.thoughtworks.xstream.converters.extended.DurationConverter",
+							PRIORITY_NORMAL, null, null);
+				}
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumSetConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumMapConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.StringBuilderConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.UUIDConverter",
+						PRIORITY_NORMAL, null, null);
+			}
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 3
Fitness: 3.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        setupImmutableTypes();
+		insecureWarning = true;
}

/**
@@ -2359,7 +2360,11 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (JVM.isVersion(8)) {
+				mapper = buildMapperDynamically(
+						"com.thoughtworks.xstream.mapper.LambdaMapper",
+						new Class[] { Mapper.class }, new Object[] { mapper });
+			}
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        setupImmutableTypes();
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,6 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,50 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            if (JVM.isVersion(8)) {
+				addImmutableTypeDynamically("java.time.Duration", false);
+				addImmutableTypeDynamically("java.time.Instant", false);
+				addImmutableTypeDynamically("java.time.LocalDate", false);
+				addImmutableTypeDynamically("java.time.LocalDateTime", false);
+				addImmutableTypeDynamically("java.time.LocalTime", false);
+				addImmutableTypeDynamically("java.time.MonthDay", false);
+				addImmutableTypeDynamically("java.time.OffsetDateTime", false);
+				addImmutableTypeDynamically("java.time.OffsetTime", false);
+				addImmutableTypeDynamically("java.time.Period", false);
+				addImmutableTypeDynamically("java.time.Year", false);
+				addImmutableTypeDynamically("java.time.YearMonth", false);
+				addImmutableTypeDynamically("java.time.ZonedDateTime", false);
+				addImmutableTypeDynamically("java.time.ZoneId", false);
+				addImmutableTypeDynamically("java.time.ZoneOffset", false);
+				addImmutableTypeDynamically("java.time.ZoneRegion", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.HijrahChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.HijrahDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.IsoChronology",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.JapaneseChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseEra",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.MinguoChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.MinguoDate",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistChronology", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistDate", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Field", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Unit", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.JulianFields$Field", false);
+			}
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2402,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            insecureWarning = true;
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,50 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            if (JVM.isVersion(8)) {
+				addImmutableTypeDynamically("java.time.Duration", false);
+				addImmutableTypeDynamically("java.time.Instant", false);
+				addImmutableTypeDynamically("java.time.LocalDate", false);
+				addImmutableTypeDynamically("java.time.LocalDateTime", false);
+				addImmutableTypeDynamically("java.time.LocalTime", false);
+				addImmutableTypeDynamically("java.time.MonthDay", false);
+				addImmutableTypeDynamically("java.time.OffsetDateTime", false);
+				addImmutableTypeDynamically("java.time.OffsetTime", false);
+				addImmutableTypeDynamically("java.time.Period", false);
+				addImmutableTypeDynamically("java.time.Year", false);
+				addImmutableTypeDynamically("java.time.YearMonth", false);
+				addImmutableTypeDynamically("java.time.ZonedDateTime", false);
+				addImmutableTypeDynamically("java.time.ZoneId", false);
+				addImmutableTypeDynamically("java.time.ZoneOffset", false);
+				addImmutableTypeDynamically("java.time.ZoneRegion", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.HijrahChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.HijrahDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.IsoChronology",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.JapaneseChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseEra",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.MinguoChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.MinguoDate",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistChronology", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistDate", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Field", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Unit", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.JulianFields$Field", false);
+			}
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new JavaMethodConverter(classLoaderReference),
+				PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
@@ -1479,10 +1481,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,8 +1479,10 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            registerConverter(new JavaMethodConverter(classLoaderReference),
+					PRIORITY_NORMAL);
+			if (insecureWarning) {
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 2
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new ExternalizableConverter(mapper,
+				classLoaderReference), PRIORITY_LOW);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new ExternalizableConverter(mapper,
+				classLoaderReference), PRIORITY_LOW);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,8 +1479,10 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            registerConverter(new JavaMethodConverter(classLoaderReference),
+					PRIORITY_NORMAL);
+			if (insecureWarning) {
+                registerConverter(new BigIntegerConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 2
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,8 +1479,10 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            registerConverter(new JavaMethodConverter(classLoaderReference),
+					PRIORITY_NORMAL);
+			if (insecureWarning) {
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 2
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,11 +1479,9 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
-            return marshallingStrategy.unmarshal(
+            registerConverter(new JavaMethodConverter(classLoaderReference),
+					PRIORITY_NORMAL);
+			return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

} catch (ConversionException e) {
Number of failed tests: 2
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new ExternalizableConverter(mapper,
+				classLoaderReference), PRIORITY_LOW);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new ExternalizableConverter(mapper,
+				classLoaderReference), PRIORITY_LOW);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,50 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            if (JVM.isVersion(8)) {
+				addImmutableTypeDynamically("java.time.Duration", false);
+				addImmutableTypeDynamically("java.time.Instant", false);
+				addImmutableTypeDynamically("java.time.LocalDate", false);
+				addImmutableTypeDynamically("java.time.LocalDateTime", false);
+				addImmutableTypeDynamically("java.time.LocalTime", false);
+				addImmutableTypeDynamically("java.time.MonthDay", false);
+				addImmutableTypeDynamically("java.time.OffsetDateTime", false);
+				addImmutableTypeDynamically("java.time.OffsetTime", false);
+				addImmutableTypeDynamically("java.time.Period", false);
+				addImmutableTypeDynamically("java.time.Year", false);
+				addImmutableTypeDynamically("java.time.YearMonth", false);
+				addImmutableTypeDynamically("java.time.ZonedDateTime", false);
+				addImmutableTypeDynamically("java.time.ZoneId", false);
+				addImmutableTypeDynamically("java.time.ZoneOffset", false);
+				addImmutableTypeDynamically("java.time.ZoneRegion", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.HijrahChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.HijrahDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.IsoChronology",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.JapaneseChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseDate",
+						false);
+				addImmutableTypeDynamically("java.time.chrono.JapaneseEra",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.MinguoChronology", false);
+				addImmutableTypeDynamically("java.time.chrono.MinguoDate",
+						false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistChronology", false);
+				addImmutableTypeDynamically(
+						"java.time.chrono.ThaiBuddhistDate", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Field", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.IsoFields$Unit", false);
+				addImmutableTypeDynamically(
+						"java.time.temporal.JulianFields$Field", false);
+			}
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,7 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            Class type = JVM.loadClassForName("java.nio.file.Paths");
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,7 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        addImmutableType(Class.class, false);
}

/**
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new ExternalizableConverter(mapper,
+				classLoaderReference), PRIORITY_LOW);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new ExternalizableConverter(mapper,
+				classLoaderReference), PRIORITY_LOW);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,10 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            registerConverterDynamically(
+					"com.thoughtworks.xstream.converters.enums.EnumSetConverter",
+					PRIORITY_NORMAL, new Class[] { Mapper.class },
+					new Object[] { mapper });
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            alias("field", Field.class);
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2360,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            alias("field", Field.class);
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2360,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new JavaMethodConverter(classLoaderReference),
+				PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
@@ -711,90 +713,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1397,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new JavaMethodConverter(classLoaderReference),
+				PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:162)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:272)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:334)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,11 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                alias("number", Number.class);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:162)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:325)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1480,7 +1396,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                setupAliases();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,13 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.RegexPatternConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            alias("field", Field.class);
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2360,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,7 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
+            alias("field", Field.class);
+			if (insecureWarning) {
insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
@@ -2359,7 +2360,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,27 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            if (JVM.isVersion(7)) {
+				Class type = JVM.loadClassForName("java.nio.file.Paths");
+				if (type != null) {
+					Method methodGet;
+					try {
+						methodGet = type.getDeclaredMethod("get", new Class[] {
+								String.class, String[].class });
+						if (methodGet != null) {
+							Object path = methodGet.invoke(null, new Object[] {
+									".", new String[0] });
+							if (path != null) {
+								addImmutableType(path.getClass(), false);
+							}
+						}
+					} catch (NoSuchMethodException e) {
+					} catch (SecurityException e) {
+					} catch (IllegalAccessException e) {
+					} catch (InvocationTargetException e) {
+					}
+				}
+			}
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new JavaMethodConverter(classLoaderReference),
+				PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new JavaMethodConverter(classLoaderReference),
+				PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,7 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            alias("hashtable", Hashtable.class);
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            this.mapper = mapper == null ? buildMapper() : mapper;
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,7 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        Class type = JVM.loadClassForName("java.nio.file.Paths");
}

/**
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2362,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1480,7 +1396,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new LocaleConverter(), PRIORITY_NORMAL);
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -2359,7 +2275,11 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (JVM.isVersion(7)) {
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.PathConverter",
+						PRIORITY_NORMAL, null, null);
+			}
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream Closed
	at java.io.FileInputStream.available(Native Method)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:342)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,8 +1479,14 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            setMarshallingStrategy(new ReferenceByXPathMarshallingStrategy(
+					ReferenceByXPathMarshallingStrategy.RELATIVE
+							| ReferenceByXPathMarshallingStrategy.SINGLE_NODE));
+			if (insecureWarning) {
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2365,13 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			if (JVM.isSwingAvailable()) {
+				registerConverter(new LookAndFeelConverter(mapper,
+						reflectionProvider), PRIORITY_NORMAL);
+			}
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 37
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1480,7 +1396,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,7 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            alias("string", String.class);
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,8 +1479,14 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
+            setMarshallingStrategy(new ReferenceByXPathMarshallingStrategy(
+					ReferenceByXPathMarshallingStrategy.RELATIVE
+							| ReferenceByXPathMarshallingStrategy.SINGLE_NODE));
+			if (insecureWarning) {
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2365,13 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			if (JVM.isSwingAvailable()) {
+				registerConverter(new LookAndFeelConverter(mapper,
+						reflectionProvider), PRIORITY_NORMAL);
+			}
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 37
Fitness: 37.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,7 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
+        final XStream outer = new XStream();
}

protected void setupAliases() {
@@ -1480,7 +1397,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            setupDefaultImplementations();
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
@@ -1479,10 +1478,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            registerConverter(new DateConverter(), PRIORITY_NORMAL);
+			alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2357,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 1.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
@@ -1479,10 +1478,8 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            registerConverter(new DateConverter(), PRIORITY_NORMAL);
+			alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 178
Fitness: 179.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1479,10 +1395,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
@@ -1479,10 +1478,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        if (reflectionProvider == null) {
+			reflectionProvider = JVM.newReflectionProvider();
+		}
}

/**
@@ -1479,10 +1481,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:162)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:325)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,6 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
}

/**
@@ -1480,7 +1479,11 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                mapper = new DefaultImplementationsMapper(mapper);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,8 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new FontConverter(mapper), PRIORITY_NORMAL);
+				insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2360,30 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (JVM.isVersion(5)) {
+				if (JVM.loadClassForName("javax.xml.datatype.Duration") != null) {
+					registerConverterDynamically(
+							"com.thoughtworks.xstream.converters.extended.DurationConverter",
+							PRIORITY_NORMAL, null, null);
+				}
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumSetConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.enums.EnumMapConverter",
+						PRIORITY_NORMAL, new Class[] { Mapper.class },
+						new Object[] { mapper });
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.StringBuilderConverter",
+						PRIORITY_NORMAL, null, null);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.basic.UUIDConverter",
+						PRIORITY_NORMAL, null, null);
+			}
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,7 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter(new BigIntegerConverter(), PRIORITY_NORMAL);
}

/**
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            ignoreUnknownElements(IGNORE_ALL);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,7 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            addImmutableTypeDynamically("java.nio.charset.Charset", true);
securityMapper.addPermission(permission);
}
}
Number of failed tests: 181
Fitness: 182.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            setupDefaultImplementations();
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        classAliasingMapper = (ClassAliasingMapper) this.mapper
+				.lookupMapperOfType(ClassAliasingMapper.class);
}

/**
@@ -1479,10 +1480,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2357,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,9 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        if (JVM.isVersion(5)) {
+			addImmutableTypeDynamically("java.util.UUID", true);
+		}
}

/**
@@ -1479,10 +1481,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2357,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2362,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,8 +1480,8 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
+                addDefaultImplementation(HashMap.class, Map.class);
+				System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2356,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -2359,7 +2359,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            setupDefaultImplementations();
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        setupSecurity();
+		insecureWarning = true;
}

/**
@@ -2359,7 +2360,8 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            setupDefaultImplementations();
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 11
Fitness: 11.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,11 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                addImmutableType(Byte.class, false);
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream Closed
	at java.io.FileInputStream.available(Native Method)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:342)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.readLine(BufferedReader.java:317)
	at java.io.BufferedReader.readLine(BufferedReader.java:382)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,7 +711,8 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
+        xstream.allowTypeHierarchy(Calendar.class);
+		if (xstream.insecureWarning) {
xstream.addPermission(NoTypePermission.NONE);
xstream.addPermission(NullPermission.NULL);
xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,90 +711,6 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
-            xstream.addPermission(NoTypePermission.NONE);
-            xstream.addPermission(NullPermission.NULL);
-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
-            xstream.addPermission(ArrayTypePermission.ARRAYS);
-            xstream.addPermission(InterfaceTypePermission.INTERFACES);
-            xstream.allowTypeHierarchy(Calendar.class);
-            xstream.allowTypeHierarchy(Collection.class);
-            xstream.allowTypeHierarchy(Map.class);
-            xstream.allowTypeHierarchy(Map.Entry.class);
-            xstream.allowTypeHierarchy(Member.class);
-            xstream.allowTypeHierarchy(Number.class);
-            xstream.allowTypeHierarchy(Throwable.class);
-            xstream.allowTypeHierarchy(TimeZone.class);
-
-            Class type = JVM.loadClassForName("java.lang.Enum");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-            type = JVM.loadClassForName("java.nio.file.Path");
-            if (type != null) {
-                xstream.allowTypeHierarchy(type);
-            }
-
-            final Set types = new HashSet();
-            types.add(BitSet.class);
-            types.add(Charset.class);
-            types.add(Class.class);
-            types.add(Currency.class);
-            types.add(Date.class);
-            types.add(DecimalFormatSymbols.class);
-            types.add(File.class);
-            types.add(Locale.class);
-            types.add(Object.class);
-            types.add(Pattern.class);
-            types.add(StackTraceElement.class);
-            types.add(String.class);
-            types.add(StringBuffer.class);
-            types.add(JVM.loadClassForName("java.lang.StringBuilder"));
-            types.add(URL.class);
-            types.add(URI.class);
-            types.add(JVM.loadClassForName("java.util.UUID"));
-            if (JVM.isSQLAvailable()) {
-                types.add(JVM.loadClassForName("java.sql.Timestamp"));
-                types.add(JVM.loadClassForName("java.sql.Time"));
-                types.add(JVM.loadClassForName("java.sql.Date"));
-            }
-            if (JVM.isVersion(8)) {
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.Clock"));
-                types.add(JVM.loadClassForName("java.time.Duration"));
-                types.add(JVM.loadClassForName("java.time.Instant"));
-                types.add(JVM.loadClassForName("java.time.LocalDate"));
-                types.add(JVM.loadClassForName("java.time.LocalDateTime"));
-                types.add(JVM.loadClassForName("java.time.LocalTime"));
-                types.add(JVM.loadClassForName("java.time.MonthDay"));
-                types.add(JVM.loadClassForName("java.time.OffsetDateTime"));
-                types.add(JVM.loadClassForName("java.time.OffsetTime"));
-                types.add(JVM.loadClassForName("java.time.Period"));
-                types.add(JVM.loadClassForName("java.time.Ser"));
-                types.add(JVM.loadClassForName("java.time.Year"));
-                types.add(JVM.loadClassForName("java.time.YearMonth"));
-                types.add(JVM.loadClassForName("java.time.ZonedDateTime"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.ZoneId"));
-                types.add(JVM.loadClassForName("java.time.chrono.HijrahDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.JapaneseEra"));
-                types.add(JVM.loadClassForName("java.time.chrono.MinguoDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.ThaiBuddhistDate"));
-                types.add(JVM.loadClassForName("java.time.chrono.Ser"));
-                xstream.allowTypeHierarchy(JVM.loadClassForName("java.time.chrono.Chronology"));
-                types.add(JVM.loadClassForName("java.time.temporal.ValueRange"));
-                types.add(JVM.loadClassForName("java.time.temporal.WeekFields"));
-            }
-            types.remove(null);
-
-            final Iterator iter = types.iterator();
-            final Class[] classes = new Class[types.size()];
-            for (int i = 0; i < classes.length; ++i) {
-                classes[i] = (Class)iter.next();
-            }
-            xstream.allowTypes(classes);
-        } else {
-            throw new IllegalArgumentException("Security framework of XStream instance already initialized");
-        }
}

protected void setupAliases() {
@@ -1480,7 +1396,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,6 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,8 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new FontConverter(mapper), PRIORITY_NORMAL);
+				insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter((Converter) new CharConverter(), PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (classAliasingMapper == null) {
+				return;
+			}
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,8 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverter(new FontConverter(mapper), PRIORITY_NORMAL);
+				insecureWarning = false;
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,9 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            defaultImplementationsMapper = (DefaultImplementationsMapper) this.mapper
+					.lookupMapperOfType(DefaultImplementationsMapper.class);
+			insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,7 +711,8 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
+        xstream.allowTypeHierarchy(Calendar.class);
+		if (xstream.insecureWarning) {
xstream.addPermission(NoTypePermission.NONE);
xstream.addPermission(NullPermission.NULL);
xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,7 +711,8 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
+        xstream.allowTypeHierarchy(Calendar.class);
+		if (xstream.insecureWarning) {
xstream.addPermission(NoTypePermission.NONE);
xstream.addPermission(NullPermission.NULL);
xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,7 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
+            alias("tree-map", TreeMap.class);
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,44 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        if (JVM.isVersion(8)) {
+			addImmutableTypeDynamically("java.time.Duration", false);
+			addImmutableTypeDynamically("java.time.Instant", false);
+			addImmutableTypeDynamically("java.time.LocalDate", false);
+			addImmutableTypeDynamically("java.time.LocalDateTime", false);
+			addImmutableTypeDynamically("java.time.LocalTime", false);
+			addImmutableTypeDynamically("java.time.MonthDay", false);
+			addImmutableTypeDynamically("java.time.OffsetDateTime", false);
+			addImmutableTypeDynamically("java.time.OffsetTime", false);
+			addImmutableTypeDynamically("java.time.Period", false);
+			addImmutableTypeDynamically("java.time.Year", false);
+			addImmutableTypeDynamically("java.time.YearMonth", false);
+			addImmutableTypeDynamically("java.time.ZonedDateTime", false);
+			addImmutableTypeDynamically("java.time.ZoneId", false);
+			addImmutableTypeDynamically("java.time.ZoneOffset", false);
+			addImmutableTypeDynamically("java.time.ZoneRegion", false);
+			addImmutableTypeDynamically("java.time.chrono.HijrahChronology",
+					false);
+			addImmutableTypeDynamically("java.time.chrono.HijrahDate", false);
+			addImmutableTypeDynamically("java.time.chrono.IsoChronology", false);
+			addImmutableTypeDynamically("java.time.chrono.JapaneseChronology",
+					false);
+			addImmutableTypeDynamically("java.time.chrono.JapaneseDate", false);
+			addImmutableTypeDynamically("java.time.chrono.JapaneseEra", false);
+			addImmutableTypeDynamically("java.time.chrono.MinguoChronology",
+					false);
+			addImmutableTypeDynamically("java.time.chrono.MinguoDate", false);
+			addImmutableTypeDynamically(
+					"java.time.chrono.ThaiBuddhistChronology", false);
+			addImmutableTypeDynamically("java.time.chrono.ThaiBuddhistDate",
+					false);
+			addImmutableTypeDynamically("java.time.temporal.IsoFields$Field",
+					false);
+			addImmutableTypeDynamically("java.time.temporal.IsoFields$Unit",
+					false);
+			addImmutableTypeDynamically(
+					"java.time.temporal.JulianFields$Field", false);
+		}
}

/**
@@ -1480,7 +1517,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 177
Fitness: 178.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,12 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                alias("trace",
+						JVM.loadClassForName("java.lang.StackTraceElement"));
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,7 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                Writer writer = new StringWriter();
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2359,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,7 +711,8 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
+        xstream.allowTypeHierarchy(Calendar.class);
+		if (xstream.insecureWarning) {
xstream.addPermission(NoTypePermission.NONE);
xstream.addPermission(NullPermission.NULL);
xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2363,7 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            setupDefaultImplementations();
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 1.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -711,7 +711,8 @@ public class XStream {
* @since 1.4.10
*/
public static void setupDefaultSecurity(final XStream xstream) {
-        if (xstream.insecureWarning) {
+        xstream.allowTypeHierarchy(Calendar.class);
+		if (xstream.insecureWarning) {
xstream.addPermission(NoTypePermission.NONE);
xstream.addPermission(NullPermission.NULL);
xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
@@ -1479,10 +1480,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,12 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                alias("trace",
+						JVM.loadClassForName("java.lang.StackTraceElement"));
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter((Converter) new CharConverter(), PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter((Converter) new CharConverter(), PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
Number of failed tests: 1
Fitness: 2.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2362,11 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            if (JVM.isVersion(7)) {
+				registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.PathConverter",
+						PRIORITY_NORMAL, null, null);
+			}
securityMapper.addPermission(permission);
}
}
Number of failed tests: 1
Fitness: 1.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

@@ -2359,7 +2355,6 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
securityMapper.addPermission(permission);
}
}
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1479,10 +1479,6 @@ public class XStream {
*/
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
-            if (insecureWarning) {
-                insecureWarning = false;
-                System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
-            }
return marshallingStrategy.unmarshal(
root, reader, dataHolder, converterLookup, mapper);

Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -696,7 +696,8 @@ public class XStream {
}

addPermission(AnyTypePermission.ANY);
-        insecureWarning = true;
+        registerConverter((Converter) new CharConverter(), PRIORITY_NORMAL);
+		insecureWarning = true;
}

/**
@@ -1480,7 +1481,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
Number of failed tests: 0
Fitness: 0.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -1480,7 +1480,10 @@ public class XStream {
public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {
try {
if (insecureWarning) {
-                insecureWarning = false;
+                registerConverterDynamically(
+						"com.thoughtworks.xstream.converters.extended.ThrowableConverter",
+						PRIORITY_NORMAL, new Class[] { ConverterLookup.class },
+						new Object[] { converterLookup });
System.err.println("Security framework of XStream not initialized, XStream is probably vulnerable.");
}
return marshallingStrategy.unmarshal(
@@ -2359,7 +2362,10 @@ public class XStream {
*/
public void addPermission(TypePermission permission) {
if (securityMapper != null) {
-            insecureWarning &= permission != NoTypePermission.NONE;
+            registerConverterDynamically(
+					"com.thoughtworks.xstream.converters.enums.EnumSetConverter",
+					PRIORITY_NORMAL, new Class[] { Mapper.class },
+					new Object[] { mapper });
securityMapper.addPermission(permission);
}
}


Node: 2c8178711f7b



Date: Wed Oct  5 14:27:17 EDT 2022

