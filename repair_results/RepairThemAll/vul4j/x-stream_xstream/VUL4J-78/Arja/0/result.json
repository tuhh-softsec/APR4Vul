{
  "repair_end": "2022-09-17 06:42:31.264192", 
  "repair_begin": "2022-09-17 02:42:17.968262", 
  "patches": [
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:32:57.037845299 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_75/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:32:57.049845363 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:41:37.516618509 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_89/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:41:37.528618572 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:28:08.763097043 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_270/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:28:08.771097086 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:57:59.645313181 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_222/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:57:59.661313267 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:17:56.968291821 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_154/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:17:56.980291886 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:27:51.259444942 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_170/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:27:51.271445005 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:35:24.242630935 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_79/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:35:24.254630999 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:47:40.621948330 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_205/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:47:40.633948395 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:50:59.243030918 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_210/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:50:59.247030940 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:00:36.726649138 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_123/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:00:36.734649181 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:38:08.962815491 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_187/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:38:08.974815557 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:33:37.717319384 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_181/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:33:37.733319472 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:26:36.939051357 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_168/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:26:36.947051400 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:05:24.229015936 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_34/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:05:24.241016000 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:11:34.163001688 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_42/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:11:34.163001688 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:49:52.651245655 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_106/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:49:52.663245718 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:31:34.620638215 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_176/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:31:34.628638259 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:46:34.546195732 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_98/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:46:34.558195796 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:15:27.211495016 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_149/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:15:27.219495058 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:09:06.278208810 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_40/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:09:06.282208832 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:05:01.247590581 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_234/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:05:01.259590646 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:38:33.398949955 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_188/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:38:33.410950021 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:36:05.770136811 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_185/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:36:05.786136900 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:57:34.825178765 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_221/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:57:34.837178830 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:58:08.793868614 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_119/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:58:08.797868635 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:47:23.906457476 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_100/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:47:23.914457518 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:33:12.877182042 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_180/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:33:12.889182109 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:46:19.182957385 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_20/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:46:19.186957406 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:40:31.993155557 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_16/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:40:32.005155620 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:31:09.916501339 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_175/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:31:09.924501384 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:26:06.903657581 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_63/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:26:06.911657623 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:57:27.954472762 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_28/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:57:27.966472826 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:44:34.702415353 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_18/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:44:34.710415394 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:32:32.333713345 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_74/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:32:32.337713366 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:18:13.175859903 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_256/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:18:13.183859946 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:46:59.018325515 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_99/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:46:59.022325536 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:37:34.372233002 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_14/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:37:34.388233087 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:20:50.177212249 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_160/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:20:50.189212314 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:01:25.910910924 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_125/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:01:25.918910967 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:43:31.552586590 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_197/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:43:31.564586655 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:45:35.925267171 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_201/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:45:35.937267236 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:13:41.538386915 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_248/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:13:41.546386958 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:05:07.788102961 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_132/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:05:07.796103006 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:59:39.461853355 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_225/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:59:39.469853399 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:19:26.372258648 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_257/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:19:26.380258692 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2274,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:15:02.243362078 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_148/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:15:02.255362142 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:39:41.610843529 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_288/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:39:41.618843572 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:28:16.231577137 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_171/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:28:16.243577200 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:32:40.728569976 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_278/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:32:40.744570063 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:49:44.182622136 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_208/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:49:44.194622201 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:17:23.651589957 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_255/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:17:23.659590001 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:36:39.247030833 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_82/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:36:39.259030897 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:53:35.664425797 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_111/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:53:35.676425860 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:06:47.224653027 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_135/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:06:47.236653094 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:11:58.835133850 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_43/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:11:58.843133893 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:51:31.879770987 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_107/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:51:31.895771072 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:39:22.451219726 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_189/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:39:22.459219770 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:29:06.511843257 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_172/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:29:06.527843342 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:34:19.113102061 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_280/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:34:19.125102126 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:29:47.519632263 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_273/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:29:47.527632306 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:21:00.822028972 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_54/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:21:00.834029036 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:10:05.825748891 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_140/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:10:05.837748957 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:34:59.598499480 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_78/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:34:59.602499501 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:35:16.885867133 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_184/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:35:16.893867177 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:14:25.519918897 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_46/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:14:25.523918917 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:35:47.671678555 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_13/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:35:47.683678616 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:24:09.082267743 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_165/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:24:09.090267786 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:07:53.255140913 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_4/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:07:53.263140954 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:55:15.192951866 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_114/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:55:15.204951930 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:59:47.038386962 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_121/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:59:47.054387047 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:10:24.045327213 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_243/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:10:24.053327256 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:42:41.968314917 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_195/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:42:41.976314961 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:18:32.421237746 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_50/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:18:32.433237810 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:33:45.942106420 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_76/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:33:45.950106463 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:56:16.362095238 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_27/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:56:16.370095279 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:00:11.814517632 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_122/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:00:11.822517675 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:15:40.241540533 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_5/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:15:40.249540574 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:09:16.401476507 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_139/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:09:16.413476573 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:30:28.385050836 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_69/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:30:28.389050857 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:31:42.725448281 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_72/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:31:42.737448345 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:02:33.178791963 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_230/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:02:33.194792049 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:30:53.029182621 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_70/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:30:53.033182642 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:20:36.177897650 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_53/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:20:36.185897693 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:52:55.653035852 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_23/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:52:55.657035873 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:20:25.297080115 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_159/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:20:25.305080157 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:05:26.211725098 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_235/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:05:26.223725163 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:42:52.241015648 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_91/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:42:52.249015690 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:23:19.890006847 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_164/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:23:19.902006910 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:20:40.868664209 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_258/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:20:40.880664274 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:12:02.525855892 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_246/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:12:02.529855914 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:10:48.585459002 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_244/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:10:48.593459045 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:40:22.704220656 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_87/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:40:22.708220678 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:41:21.771383609 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_292/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:41:21.779383652 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:01:01.186779342 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_124/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:01:01.194779385 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:54:00.824558816 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_112/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:54:00.836558880 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:29:53.097854654 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_11/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:29:53.101854674 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:55:48.021945739 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_26/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:55:48.033945803 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:10:54.994019647 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_141/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:10:55.002019691 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:24:33.854399091 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_166/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:24:33.866399154 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:30:44.948363978 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_174/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:30:44.964364062 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:31:18.113316729 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_71/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:31:18.121316771 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:25:39.498287302 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_265/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:25:39.510287367 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:56:04.857214241 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_116/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:56:04.869214305 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:32:07.581581105 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_73/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:32:07.589581148 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:12:33.886563575 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_144/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:12:33.902563663 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:35:08.849370895 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_282/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:35:08.857370938 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:27:18.650825301 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_268/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:27:18.658825344 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:17:06.544023631 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_152/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:17:06.548023652 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:27:55.824236098 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_66/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:27:55.828236118 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:40:56.587247843 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_291/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:40:56.595247887 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:40:12.003492039 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_191/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:40:12.019492127 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:05:48.937148813 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_35/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:05:48.945148857 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:34:27.281593260 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_183/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:34:27.293593326 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:14:50.304051427 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_47/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:14:50.308051448 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:14:06.362519973 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_249/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:14:06.366519995 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:17:53.594225632 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_6/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:17:53.614225735 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:21:15.377346062 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_161/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:21:15.393346147 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:03:53.923698097 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_130/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:03:53.931698140 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:54:51.119147470 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_2/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:54:51.135147552 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:54:07.825416963 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_24/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:54:07.837417027 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:21:40.329478531 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_162/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:21:40.341478594 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:02:15.203173179 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_126/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:02:15.219173265 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:56:20.360775252 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_218/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:56:20.368775296 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:37:44.126678773 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_186/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:37:44.130678795 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:37:37.742175111 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_284/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:37:37.754175176 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:12:58.734700112 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_145/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:12:58.746700178 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:56:29.973346895 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_117/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:56:29.977346916 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:02:57.882925293 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_231/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:02:57.890925336 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:21:29.419314272 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_8/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:21:29.423314292 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:00:48.695531536 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_29/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:00:48.703531580 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:13:23.850837930 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_146/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:13:23.854837952 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:28:40.377487577 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_10/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:28:40.389487638 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2274,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:37:03.899162204 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_83/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:37:03.899162204 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:16:58.831454628 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_254/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:16:58.847454715 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:32:15.980436071 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_277/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:32:15.988436114 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:24:49.586016311 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_263/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:24:49.602016398 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:44:06.477409962 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_94/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:44:06.485410004 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:25:14.466151408 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_264/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:25:14.470151430 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:24:44.651220375 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_61/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:24:44.663220439 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:08:41.466075658 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_39/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:08:41.478075723 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:40:37.179630315 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_192/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:40:37.187630358 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:02:39.847304256 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_127/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:02:39.859304319 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:27:43.786961618 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_269/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:27:43.798961683 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:03:04.427434961 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_128/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:03:04.439435025 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:39:08.199824192 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_85/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:39:08.211824256 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:17:43.060974328 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_49/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:17:43.064974349 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:29:23.007499460 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_272/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:29:23.015499503 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:08:26.789202864 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_138/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:08:26.801202930 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:20:00.644949164 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_158/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:20:00.656949228 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:24:20.011089335 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_60/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:24:20.015089356 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:38:51.934575536 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_286/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:38:51.942575579 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:23:30.882827976 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_58/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:23:30.894828040 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:33:05.772705456 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_279/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:33:05.784705521 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:44:21.812861767 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_199/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:44:21.820861811 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:40:31.587113047 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_290/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:40:31.603113133 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:02:06.775952684 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_31/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:02:06.783952727 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:41:46.623517559 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_293/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:41:46.635517624 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:45:10.649128956 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_200/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:45:10.661129022 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:47:48.470587698 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_101/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:47:48.478587740 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:34:44.081237030 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_281/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:34:44.093237095 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:53:03.319705742 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_214/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:53:03.323705765 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:15:20.798919782 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_252/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:15:20.806919826 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:55:55.468640285 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_217/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:55:55.476640329 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:58:49.269581809 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_223/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:58:49.285581895 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:46:01.465406782 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_202/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:46:01.469406804 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:19:10.996685359 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_156/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:19:11.004685402 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:41:52.148041752 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_194/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:41:52.152041774 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:49:08.319834495 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_22/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:49:08.331834558 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:39:57.824088287 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_86/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:39:57.828088309 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:38:02.326307818 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_285/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:38:02.334307862 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:06:38.301414183 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_36/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:06:38.305414204 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:26:33.563799230 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_64/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:26:33.567799252 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:47:15.909813433 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_204/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:47:15.921813498 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:42:02.696752360 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_90/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:42:02.700752381 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:35:49.370764941 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_80/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:35:49.382765004 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:49:34.025537083 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_1/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:49:34.037537143 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:51:48.495298915 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_211/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:51:48.503298959 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:19:46.281631677 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_51/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:19:46.289631720 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:10:44.790737115 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_41/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:10:44.802737180 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:07:12.208791088 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_136/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:07:12.212791111 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:45:44.953932655 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_96/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:45:44.965932718 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:54:25.488689192 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_113/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:54:25.504689277 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:17:31.512156440 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_153/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:17:31.524156503 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:25:23.518662347 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_167/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:25:23.534662431 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:50:34.046893748 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_209/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:50:34.058893813 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:23:55.534959139 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_59/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:23:55.538959160 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:47:38.768951998 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_0/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:47:38.804952181 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:09:58.973192535 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_242/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:09:58.985192599 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:20:11.249764787 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_52/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:20:11.253764808 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:42:11.539651833 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_294/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:42:11.551651897 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:49:27.723113620 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_105/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:49:27.731113662 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:56:54.809478050 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_118/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:56:54.821478114 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:23:05.682693869 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_57/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:23:05.690693912 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:21:25.626161114 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_55/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:21:25.638161177 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:30:12.487767511 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_274/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:30:12.495767554 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:57:35.395982036 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_3/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 22:57:35.395982036 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:48:05.194082417 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_206/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:48:05.210082504 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:54:41.996241674 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_216/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:54:42.004241717 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:16:41.767891821 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_151/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:16:41.775891863 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:25:38.675507569 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_62/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:25:38.679507590 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:39:18.424773505 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_15/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:39:18.432773547 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:08:01.905065532 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_137/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:08:01.909065554 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:11:13.053590371 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_245/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:11:13.057590393 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:08:19.628658549 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_239/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:08:19.636658592 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:57:09.957044049 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_220/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:57:09.973044135 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:36:48.517909332 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_283/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:36:48.521909353 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:05:32.852241704 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_133/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:05:32.856241726 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:14:31.230653236 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_250/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:14:31.246653322 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:29:31.047973085 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_173/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:29:31.055973127 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:21:50.310292591 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_56/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:21:50.318292634 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:23:09.613473176 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_261/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:23:09.625473242 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:09:34.113058959 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_241/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:09:34.125059025 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:19:35.676816506 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_157/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:19:35.688816570 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:12:27.177988155 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_247/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:12:27.185988198 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:27:01.759182822 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_169/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:27:01.775182907 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2274,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:47:57.635467993 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_21/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:47:57.655468097 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:31:59.400775454 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_177/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:31:59.408775498 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:26:28.762554663 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_266/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:26:28.770554706 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:34:10.594238003 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_77/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:34:10.602238045 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:43:41.825279045 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_93/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:43:41.829279067 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:04:36.515457272 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_233/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:04:36.527457336 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:07:27.509678571 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_38/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:07:27.517678614 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:06:15.563990921 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_236/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:06:15.571990964 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:03:47.171191194 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_232/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:03:47.179191238 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:43:17.021147295 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_92/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:43:17.033147359 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:22:55.293876362 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_163/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:22:55.309876447 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:30:24.314012255 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_12/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:30:24.326012315 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:21:30.188932557 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_259/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:21:30.200932622 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:52:13.551435192 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_212/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:52:13.559435235 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:55:39.989082873 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_115/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:55:39.997082916 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:23:34.461608214 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_262/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:23:34.473608280 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:59:22.578257937 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_120/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:59:22.582257958 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:41:02.213312465 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_17/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:41:02.237312589 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:30:37.763904401 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_275/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:30:37.767904424 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:45:48.854800063 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_19/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:45:48.866800125 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:00:04.665989648 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_226/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:00:04.677989713 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:41:02.371768625 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_193/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:41:02.383768690 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:31:51.356302812 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_276/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:31:51.364302856 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:00:54.606259593 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_227/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:00:54.614259636 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:34:02.505456384 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_182/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:34:02.525456494 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:51:56.975903789 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_108/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:51:56.983903831 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:12:09.322428545 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_143/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:12:09.326428567 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:36:14.518899019 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_81/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:36:14.522899040 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:15:40.120317713 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_48/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:15:40.124317734 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:12:47.743395730 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_44/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:12:47.747395751 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:06:40.812126860 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_237/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:06:40.824126924 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:39:47.375356723 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_190/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:39:47.387356788 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2274,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:29:38.368783275 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_67/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:29:38.380783339 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:30:03.268916495 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_68/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:30:03.272916516 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:07:05.572260136 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_238/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:07:05.576260157 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:48:54.718352531 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_207/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:48:54.734352618 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:54:35.897565148 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_25/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:54:35.901565169 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:08:44.424791882 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_240/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:08:44.432791925 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:01:42.047819349 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_30/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:01:42.063819435 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:25:09.988426148 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_9/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:25:10.004426229 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:03:29.091566101 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_129/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:03:29.103566164 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:44:31.137540889 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_95/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:44:31.145540932 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:16:09.427185148 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_253/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:16:09.431185170 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:32:23.908911131 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_178/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:32:23.916911176 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:48:13.094718214 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_102/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:48:13.106718277 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:18:21.792423813 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_155/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:18:21.804423877 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:56:45.224910030 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_219/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:56:45.240910116 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:28:58.039364158 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_271/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:28:58.051364223 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:48:38.242851481 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_103/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:48:38.250851523 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:26:53.694689929 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_267/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:26:53.698689951 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2358,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:52:21.408033051 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_109/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:52:21.416033094 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:40:47.512352612 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_88/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:40:47.524352675 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:04:43.219966908 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_131/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:04:43.223966931 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:43:06.744450691 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_196/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:43:06.752450734 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:22:44.429336284 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_260/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:22:44.445336371 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:52:46.276164600 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_110/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:52:46.288164663 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:02:31.460085736 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_32/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:02:31.472085800 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:38:43.371692021 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_84/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:38:43.379692064 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:59:14.285717169 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_224/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:59:14.301717256 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:03:45.772486067 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_33/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:03:45.776486090 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:40:06.410977285 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_289/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:40:06.418977328 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:15:52.091627455 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_150/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:15:52.095627476 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:43:56.580723646 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_198/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:43:56.584723668 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:53:27.983839757 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_215/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:53:27.991839801 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:52:38.643571618 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_213/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:52:38.647571639 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:27:01.359946881 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_65/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:27:01.363946903 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:13:48.426968895 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_147/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:13:48.434968937 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:14:55.958785717 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_251/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:14:55.962785738 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:01:44.286527982 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_229/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:01:44.290528003 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2271,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:07:02.789545772 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_37/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:07:02.793545793 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:11:19.374153818 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_142/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:11:19.390153906 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:01:19.650394909 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_228/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:01:19.654394931 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:49:02.950982395 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_104/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:49:02.962982458 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:32:48.301046104 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_179/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:32:48.313046171 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:46:26.905545798 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_203/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:46:26.909545820 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:06:22.064513935 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_134/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 01:06:22.076514002 -0400\n@@ -1480,7 +1480,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:19:01.386568629 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_7/patched/com/thoughtworks/xstream/XStream.java\t2022-09-16 23:19:01.402568709 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1479,10 +1395,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 714, 
          "faulty": "if (xstream.insecureWarning) {\n  xstream.addPermission(NoTypePermission.NONE);\n  xstream.addPermission(NullPermission.NULL);\n  xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n  xstream.addPermission(ArrayTypePermission.ARRAYS);\n  xstream.addPermission(InterfaceTypePermission.INTERFACES);\n  xstream.allowTypeHierarchy(Calendar.class);\n  xstream.allowTypeHierarchy(Collection.class);\n  xstream.allowTypeHierarchy(Map.class);\n  xstream.allowTypeHierarchy(Map.Entry.class);\n  xstream.allowTypeHierarchy(Member.class);\n  xstream.allowTypeHierarchy(Number.class);\n  xstream.allowTypeHierarchy(Throwable.class);\n  xstream.allowTypeHierarchy(TimeZone.class);\n  Class type=JVM.loadClassForName(\"java.lang.Enum\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  type=JVM.loadClassForName(\"java.nio.file.Path\");\n  if (type != null) {\n    xstream.allowTypeHierarchy(type);\n  }\n  final Set types=new HashSet();\n  types.add(BitSet.class);\n  types.add(Charset.class);\n  types.add(Class.class);\n  types.add(Currency.class);\n  types.add(Date.class);\n  types.add(DecimalFormatSymbols.class);\n  types.add(File.class);\n  types.add(Locale.class);\n  types.add(Object.class);\n  types.add(Pattern.class);\n  types.add(StackTraceElement.class);\n  types.add(String.class);\n  types.add(StringBuffer.class);\n  types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n  types.add(URL.class);\n  types.add(URI.class);\n  types.add(JVM.loadClassForName(\"java.util.UUID\"));\n  if (JVM.isSQLAvailable()) {\n    types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n    types.add(JVM.loadClassForName(\"java.sql.Time\"));\n    types.add(JVM.loadClassForName(\"java.sql.Date\"));\n  }\n  if (JVM.isVersion(8)) {\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n    types.add(JVM.loadClassForName(\"java.time.Duration\"));\n    types.add(JVM.loadClassForName(\"java.time.Instant\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n    types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n    types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n    types.add(JVM.loadClassForName(\"java.time.Period\"));\n    types.add(JVM.loadClassForName(\"java.time.Ser\"));\n    types.add(JVM.loadClassForName(\"java.time.Year\"));\n    types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n    types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n    types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n    xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n    types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n  }\n  types.remove(null);\n  final Iterator iter=types.iterator();\n  final Class[] classes=new Class[types.size()];\n  for (int i=0; i < classes.length; ++i) {\n    classes[i]=(Class)iter.next();\n  }\n  xstream.allowTypes(classes);\n}\n else {\n  throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:14:01.003787770 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_45/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:14:01.015787835 -0400\n@@ -711,90 +711,6 @@\n      * @since 1.4.10\n      */\n     public static void setupDefaultSecurity(final XStream xstream) {\n-        if (xstream.insecureWarning) {\n-            xstream.addPermission(NoTypePermission.NONE);\n-            xstream.addPermission(NullPermission.NULL);\n-            xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);\n-            xstream.addPermission(ArrayTypePermission.ARRAYS);\n-            xstream.addPermission(InterfaceTypePermission.INTERFACES);\n-            xstream.allowTypeHierarchy(Calendar.class);\n-            xstream.allowTypeHierarchy(Collection.class);\n-            xstream.allowTypeHierarchy(Map.class);\n-            xstream.allowTypeHierarchy(Map.Entry.class);\n-            xstream.allowTypeHierarchy(Member.class);\n-            xstream.allowTypeHierarchy(Number.class);\n-            xstream.allowTypeHierarchy(Throwable.class);\n-            xstream.allowTypeHierarchy(TimeZone.class);\n-\n-            Class type = JVM.loadClassForName(\"java.lang.Enum\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-            type = JVM.loadClassForName(\"java.nio.file.Path\");\n-            if (type != null) {\n-                xstream.allowTypeHierarchy(type);\n-            }\n-\n-            final Set types = new HashSet();\n-            types.add(BitSet.class);\n-            types.add(Charset.class);\n-            types.add(Class.class);\n-            types.add(Currency.class);\n-            types.add(Date.class);\n-            types.add(DecimalFormatSymbols.class);\n-            types.add(File.class);\n-            types.add(Locale.class);\n-            types.add(Object.class);\n-            types.add(Pattern.class);\n-            types.add(StackTraceElement.class);\n-            types.add(String.class);\n-            types.add(StringBuffer.class);\n-            types.add(JVM.loadClassForName(\"java.lang.StringBuilder\"));\n-            types.add(URL.class);\n-            types.add(URI.class);\n-            types.add(JVM.loadClassForName(\"java.util.UUID\"));\n-            if (JVM.isSQLAvailable()) {\n-                types.add(JVM.loadClassForName(\"java.sql.Timestamp\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Time\"));\n-                types.add(JVM.loadClassForName(\"java.sql.Date\"));\n-            }\n-            if (JVM.isVersion(8)) {\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.Clock\"));\n-                types.add(JVM.loadClassForName(\"java.time.Duration\"));\n-                types.add(JVM.loadClassForName(\"java.time.Instant\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.LocalTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.MonthDay\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetDateTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.OffsetTime\"));\n-                types.add(JVM.loadClassForName(\"java.time.Period\"));\n-                types.add(JVM.loadClassForName(\"java.time.Ser\"));\n-                types.add(JVM.loadClassForName(\"java.time.Year\"));\n-                types.add(JVM.loadClassForName(\"java.time.YearMonth\"));\n-                types.add(JVM.loadClassForName(\"java.time.ZonedDateTime\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.ZoneId\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.HijrahDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.JapaneseEra\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.MinguoDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.ThaiBuddhistDate\"));\n-                types.add(JVM.loadClassForName(\"java.time.chrono.Ser\"));\n-                xstream.allowTypeHierarchy(JVM.loadClassForName(\"java.time.chrono.Chronology\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.ValueRange\"));\n-                types.add(JVM.loadClassForName(\"java.time.temporal.WeekFields\"));\n-            }\n-            types.remove(null);\n-\n-            final Iterator iter = types.iterator();\n-            final Class[] classes = new Class[types.size()];\n-            for (int i = 0; i < classes.length; ++i) {\n-                classes[i] = (Class)iter.next();\n-            }\n-            xstream.allowTypes(classes);\n-        } else {\n-            throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");\n-        }\n     }\n \n     protected void setupAliases() {\n@@ -1480,7 +1396,6 @@\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n             if (insecureWarning) {\n-                insecureWarning = false;\n                 System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n             }\n             return marshallingStrategy.unmarshal(\n@@ -2359,7 +2274,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 2362, 
          "faulty": "insecureWarning&=permission != NoTypePermission.NONE;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:46:09.706063972 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_97/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 00:46:09.718064036 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n@@ -2359,7 +2355,6 @@\n      */\n     public void addPermission(TypePermission permission) {\n         if (securityMapper != null) {\n-            insecureWarning &= permission != NoTypePermission.NONE;\n             securityMapper.addPermission(permission);\n         }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1482, 
          "faulty": "if (insecureWarning) {\n  insecureWarning=false;\n  System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "xstream/src/java/com/thoughtworks/xstream/XStream.java", 
          "line": 1483, 
          "faulty": "insecureWarning=false;", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/xstream/src/java/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:39:16.682709058 -0400\n+++ /workdir/Arja_vul4j_x-stream_xstream_VUL4J-78/patches_07po/Patch_287/patched/com/thoughtworks/xstream/XStream.java\t2022-09-17 02:39:16.694709123 -0400\n@@ -1479,10 +1479,6 @@\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n-            if (insecureWarning) {\n-                insecureWarning = false;\n-                System.err.println(\"Security framework of XStream not initialized, XStream is probably vulnerable.\");\n-            }\n             return marshallingStrategy.unmarshal(\n                 root, reader, dataHolder, converterLookup, mapper);\n \n\n\n"
    }
  ]
}