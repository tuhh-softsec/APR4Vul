cd /workdir/GenProg_vul4j_apache_sling-org-apache-sling-xss_VUL4J-25;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-8-openjdk-amd64/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	GenProg \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/GenProg_vul4j_apache_sling-org-apache-sling-xss_VUL4J-25 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/GenProg_vul4j_apache_sling-org-apache-sling-xss_VUL4J-25/src/main/java \
	-DbinJavaDir /workdir/GenProg_vul4j_apache_sling-org-apache-sling-xss_VUL4J-25/target/classes \
	-DbinTestDir /workdir/GenProg_vul4j_apache_sling-org-apache-sling-xss_VUL4J-25/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-25 \
	-Ddependences /root/.m2/repository/org/reflections/reflections/0.9.9/reflections-0.9.9.jar:/root/.m2/repository/commons-configuration/commons-configuration/1.5/commons-configuration-1.5.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.models.api/1.2.2/org.apache.sling.models.api-1.2.2.jar:/root/.m2/repository/org/javassist/javassist/3.18.2-GA/javassist-3.18.2-GA.jar:/root/.m2/repository/org/powermock/powermock-reflect/1.6.5/powermock-reflect-1.6.5.jar:/root/.m2/repository/commons-beanutils/commons-beanutils-core/1.7.0/commons-beanutils-core-1.7.0.jar:/root/.m2/repository/xom/xom/1.2.5/xom-1.2.5.jar:/root/.m2/repository/org/mockito/mockito-core/1.10.19/mockito-core-1.10.19.jar:/root/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.11.3/jackrabbit-api-2.11.3.jar:/root/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/root/.m2/repository/org/apache/jackrabbit/vault/org.apache.jackrabbit.vault/3.1.18/org.apache.jackrabbit.vault-3.1.18.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.i18n/2.4.4/org.apache.sling.i18n-2.4.4.jar:/root/.m2/repository/xml-apis/xml-apis-ext/1.3.04/xml-apis-ext-1.3.04.jar:/root/.m2/repository/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar:/root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:/root/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/root/.m2/repository/batik/batik-util/1.6/batik-util-1.6.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.6/commons-lang3-3.6.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.testing.osgi-mock/2.3.4/org.apache.sling.testing.osgi-mock-2.3.4.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.adapter/2.1.6/org.apache.sling.adapter-2.1.6.jar:/root/.m2/repository/log4j/log4j/1.2.16/log4j-1.2.16.jar:/root/.m2/repository/org/owasp/encoder/encoder/1.1.1/encoder-1.1.1.jar:/root/.m2/repository/org/powermock/powermock-api-mockito/1.6.5/powermock-api-mockito-1.6.5.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.api/2.11.0/org.apache.sling.api-2.11.0.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.models.impl/1.2.2/org.apache.sling.models.impl-1.2.2.jar:/root/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.settings/1.3.8/org.apache.sling.settings-1.3.8.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.resourcebuilder/1.0.2/org.apache.sling.resourcebuilder-1.0.2.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.testing.sling-mock/2.2.14/org.apache.sling.testing.sling-mock-2.2.14.jar:/root/.m2/repository/xalan/xalan/2.7.0/xalan-2.7.0.jar:/root/.m2/repository/com/google/code/findbugs/annotations/2.0.1/annotations-2.0.1.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.scripting.api/2.1.8/org.apache.sling.scripting.api-2.1.8.jar:/root/.m2/repository/commons-fileupload/commons-fileupload/1.2/commons-fileupload-1.2.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.testing.resourceresolver-mock/1.1.20/org.apache.sling.testing.resourceresolver-mock-1.1.20.jar:/root/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.8.0/jackrabbit-jcr-commons-2.8.0.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.testing.jcr-mock/1.3.2/org.apache.sling.testing.jcr-mock-1.3.2.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.resourceresolver/1.4.8/org.apache.sling.resourceresolver-1.4.8.jar:/root/.m2/repository/org/mockito/mockito-all/1.10.19/mockito-all-1.10.19.jar:/root/.m2/repository/org/powermock/powermock-api-mockito-common/1.6.5/powermock-api-mockito-common-1.6.5.jar:/root/.m2/repository/org/slf4j/slf4j-simple/1.7.6/slf4j-simple-1.7.6.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.commons.mime/2.1.8/org.apache.sling.commons.mime-2.1.8.jar:/root/.m2/repository/org/apache/geronimo/specs/geronimo-json_1.0_spec/1.0-alpha-1/geronimo-json_1.0_spec-1.0-alpha-1.jar:/root/.m2/repository/commons-lang/commons-lang/2.5/commons-lang-2.5.jar:/root/.m2/repository/com/google/guava/guava/15.0/guava-15.0.jar:/root/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar:/root/.m2/repository/com/google/code/findbugs/jsr305/2.0.0/jsr305-2.0.0.jar:/root/.m2/repository/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.commons.johnzon/1.0.0/org.apache.sling.commons.johnzon-1.0.0.jar:/root/.m2/repository/org/osgi/osgi.cmpn/6.0.0/osgi.cmpn-6.0.0.jar:/root/.m2/repository/org/beanshell/bsh-core/2.0b4/bsh-core-2.0b4.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.jcr.contentparser/1.2.4/org.apache.sling.jcr.contentparser-1.2.4.jar:/root/.m2/repository/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar:/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/root/.m2/repository/batik/batik-css/1.6/batik-css-1.6.jar:/root/.m2/repository/org/apache/johnzon/johnzon-core/1.0.0/johnzon-core-1.0.0.jar:/root/.m2/repository/org/apache/geronimo/specs/geronimo-atinject_1.0_spec/1.0/geronimo-atinject_1.0_spec-1.0.jar:/root/.m2/repository/net/sourceforge/nekohtml/nekohtml/1.9.16/nekohtml-1.9.16.jar:/root/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar:/root/.m2/repository/commons-digester/commons-digester/1.8/commons-digester-1.8.jar:/root/.m2/repository/org/powermock/powermock-core/1.6.5/powermock-core-1.6.5.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.scripting.core/2.0.36/org.apache.sling.scripting.core-2.0.36.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.servlet-helpers/1.1.2/org.apache.sling.servlet-helpers-1.1.2.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.3.0/org.apache.sling.jcr.api-2.3.0.jar:/root/.m2/repository/org/osgi/org.osgi.service.component.annotations/1.3.0/org.osgi.service.component.annotations-1.3.0.jar:/root/.m2/repository/org/osgi/osgi.core/6.0.0/osgi.core-6.0.0.jar:/root/.m2/repository/commons-collections/commons-collections/3.2/commons-collections-3.2.jar:/root/.m2/repository/org/powermock/powermock-api-support/1.6.5/powermock-api-support-1.6.5.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.jcr.resource/2.7.4/org.apache.sling.jcr.resource-2.7.4.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.commons.classloader/1.3.2/org.apache.sling.commons.classloader-1.3.2.jar:/root/.m2/repository/org/osgi/org.osgi.service.metatype.annotations/1.3.0/org.osgi.service.metatype.annotations-1.3.0.jar:/root/.m2/repository/org/owasp/antisamy/antisamy/1.5.2/antisamy-1.5.2.jar:/root/.m2/repository/batik/batik-gui-util/1.6/batik-gui-util-1.6.jar:/root/.m2/repository/xml-apis/xml-apis/1.3.03/xml-apis-1.3.03.jar:/root/.m2/repository/org/slf4j/slf4j-api/1.7.6/slf4j-api-1.7.6.jar:/root/.m2/repository/batik/batik-ext/1.6/batik-ext-1.6.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.serviceusermapper/1.2.0/org.apache.sling.serviceusermapper-1.2.0.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/org/osgi/osgi.annotation/6.0.1/osgi.annotation-6.0.1.jar:/root/.m2/repository/org/apache/sling/org.apache.sling.commons.osgi/2.4.0/org.apache.sling.commons.osgi-2.4.0.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
Fault localization starts...
Number of positive tests: 24
Number of negative tests: 2
Negative tests: [org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidHref, org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidHrefWithoutHrefConfig]
Faulty Lines: 
org.apache.sling.xss.impl.XSSAPIImpl#232:1.0
org.apache.sling.xss.impl.XSSAPIImpl#231:1.0
org.apache.sling.xss.impl.XSSAPIImpl#241:1.0
org.apache.sling.xss.impl.XSSAPIImpl#237:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 24
Filtering of the tests is finished!
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,10 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,9 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                LongValidationRule ivr = new LongValidationRule("number",
+						ESAPI.encoder(), -9000000000000000000L,
+						9000000000000000000L);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            StringWriter output = new StringWriter();
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.initPopulation(GenProgGA.java:107)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:49)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,10 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,10 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            StringWriter output = new StringWriter();
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,13 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            StringWriter output = new StringWriter();
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,12 +230,8 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
+				// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
String encodedUrl = unescapedURL.replaceAll("\"", "%22")
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:85)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,10 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,10 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,10 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream Closed
	at java.io.FileInputStream.available0(Native Method)
	at java.io.FileInputStream.available(FileInputStream.java:306)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:353)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,11 +230,6 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,8 +228,12 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory = SAXParserFactory.newInstance();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,8 +228,12 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,8 +228,12 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,7 +230,8 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
+                StringWriter output = new StringWriter();
+				/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
*/
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                Thread currentThread = Thread.currentThread();
+				factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory = SAXParserFactory.newInstance();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,8 +228,12 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory = SAXParserFactory.newInstance();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,8 +228,12 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,8 +228,12 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                Thread currentThread = Thread.currentThread();
+				factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory = SAXParserFactory.newInstance();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            return "\"auto\"";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,12 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+                Thread currentThread = Thread.currentThread();
+				factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
// Percent-encode characters that are not allowed in unquoted
// HTML attributes: ", ', >, <, ` and space. We don't encode =
// since this would break links with query parameters.
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,7 +230,8 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
+                factory.setNamespaceAware(true);
+				/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
*/
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,9 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                factory.setValidating(false);
+				Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -229,7 +229,8 @@ public class XSSAPIImpl implements XSSAPI {
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
+                Thread currentThread = Thread.currentThread();
+				String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,7 +230,8 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
+                StringWriter output = new StringWriter();
+				/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
*/
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Map<String, Object> config = new HashMap<>();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -230,7 +230,8 @@ public class XSSAPIImpl implements XSSAPI {
if (StringUtils.isNotEmpty(url)) {
try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
+                StringWriter output = new StringWriter();
+				/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
commons-text, which is not an OSGi bundle
*/
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,7 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			try {
String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
/*
StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            return "\"auto\"";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            return "\"auto\"";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            return "\"auto\"";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setNamespaceAware(true);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			return "";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Bad file descriptor
	at java.io.FileInputStream.available0(Native Method)
	at java.io.FileInputStream.available(FileInputStream.java:306)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:353)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            return "";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			return "";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,30 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,32 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            return "";
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,30 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,30 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,30 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            Thread currentThread = Thread.currentThread();
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:53)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,8 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
+			PolicyHandler handler = null;
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:336)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:44)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			factory.setValidating(false);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,29 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            if (StringUtils.isNotEmpty(url)) {
+				try {
+					String unescapedURL = URLDecoder.decode(url,
+							StandardCharsets.UTF_8.name());
+					unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
+					String encodedUrl = unescapedURL.replaceAll("\"", "%22")
+							.replaceAll("'", "%27").replaceAll(">", "%3E")
+							.replaceAll("<", "%3C").replaceAll("`", "%60")
+							.replaceAll(" ", "%20");
+					int qMarkIx = encodedUrl.indexOf('?');
+					if (qMarkIx > 0) {
+						encodedUrl = encodedUrl.substring(0, qMarkIx)
+								+ encodedUrl.substring(qMarkIx).replaceAll(":",
+										"%3A");
+					}
+					encodedUrl = mangleNamespaces(encodedUrl);
+					if (xssFilter.isValidHref(encodedUrl)) {
+						return encodedUrl;
+					}
+				} catch (UnsupportedEncodingException e) {
+					LOGGER.error("Unable to decode url: {}.", url);
+				}
+			}
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
java.io.IOException: Stream closed
	at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:283)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at us.msu.cse.repair.core.util.StreamReaderThread.run(StreamReaderThread.java:36)
java.lang.IllegalStateException: Exception Occurred
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runShell(RExternalTestExecutor.java:108)
	at us.msu.cse.repair.core.testexecutors.RExternalTestExecutor.runTests(RExternalTestExecutor.java:64)
	at us.msu.cse.repair.ec.problems.GenProgProblem.invokeTestExecutor(GenProgProblem.java:144)
	at us.msu.cse.repair.ec.problems.GenProgProblem.evaluate(GenProgProblem.java:99)
	at us.msu.cse.repair.ec.algorithms.GenProgGA.execute(GenProgGA.java:76)
	at us.msu.cse.repair.core.AbstractRepairAlgorithm.execute(AbstractRepairAlgorithm.java:18)
	at us.msu.cse.repair.GenProgMain.main(GenProgMain.java:65)
	at us.msu.cse.repair.Main.main(Main.java:10)
java.lang.NullPointerException
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
Compilation fails!
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            factory = SAXParserFactory.newInstance();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,9 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,7 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,10 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
+            LongValidationRule ivr = new LongValidationRule("number",
+					ESAPI.encoder(), -9000000000000000000L,
+					9000000000000000000L);
+			StringWriter output = new StringWriter();
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";
Number of failed tests: 2
Fitness: 4.0
One fitness evaluation is finished...
One fitness evaluation starts...
----------------------------------
Patch Candidate:
@@ -228,34 +228,6 @@ public class XSSAPIImpl implements XSSAPI {
@Nonnull
public String getValidHref(final String url) {
if (StringUtils.isNotEmpty(url)) {
-            try {
-                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());
-                /*
-                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from
-                    commons-text, which is not an OSGi bundle
-                */
-                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);
-                // Percent-encode characters that are not allowed in unquoted
-                // HTML attributes: ", ', >, <, ` and space. We don't encode =
-                // since this would break links with query parameters.
-                String encodedUrl = unescapedURL.replaceAll("\"", "%22")
-                        .replaceAll("'", "%27")
-                        .replaceAll(">", "%3E")
-                        .replaceAll("<", "%3C")
-                        .replaceAll("`", "%60")
-                        .replaceAll(" ", "%20");
-                int qMarkIx = encodedUrl.indexOf('?');
-                if (qMarkIx > 0) {
-                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(":", "%3A");
-                }
-
-                encodedUrl = mangleNamespaces(encodedUrl);
-                if (xssFilter.isValidHref(encodedUrl)) {
-                    return encodedUrl;
-                }
-            } catch (UnsupportedEncodingException e) {
-                LOGGER.error("Unable to decode url: {}.", url);
-            }
}
// fall through to empty string
return "";


Node: 2c8178711f7b



Date: Fri Sep 30 07:28:15 EDT 2022

