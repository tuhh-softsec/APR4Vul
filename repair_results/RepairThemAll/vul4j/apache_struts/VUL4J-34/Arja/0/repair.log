cd /workdir/Arja_vul4j_apache_struts_VUL4J-34;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/jdk1.7.0_80/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/jdk1.7.0_80";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	Arja \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/Arja_vul4j_apache_struts_VUL4J-34 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -pl core -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/Arja_vul4j_apache_struts_VUL4J-34/core/src/main/java \
	-DbinJavaDir /workdir/Arja_vul4j_apache_struts_VUL4J-34/core/target/classes \
	-DbinTestDir /workdir/Arja_vul4j_apache_struts_VUL4J-34/core/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-34 \
	-Ddependences /root/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar:/root/.m2/repository/org/objenesis/objenesis/2.2/objenesis-2.2.jar:/root/.m2/repository/org/slf4j/slf4j-simple/1.7.12/slf4j-simple-1.7.12.jar:/root/.m2/repository/org/testng/testng/5.1/testng-5.1-jdk15.jar:/root/.m2/repository/org/slf4j/slf4j-api/1.7.12/slf4j-api-1.7.12.jar:/root/.m2/repository/dom4j/dom4j/1.1/dom4j-1.1.jar:/root/.m2/repository/commons-chain/commons-chain/1.1/commons-chain-1.1.jar:/root/.m2/repository/asm/asm-tree/3.3/asm-tree-3.3.jar:/root/.m2/repository/org/springframework/spring-aspects/4.1.6.RELEASE/spring-aspects-4.1.6.RELEASE.jar:/root/.m2/repository/org/springframework/spring-context-support/4.1.6.RELEASE/spring-context-support-4.1.6.RELEASE.jar:/root/.m2/repository/org/apache/struts/struts-taglib/1.3.8/struts-taglib-1.3.8.jar:/root/.m2/repository/org/apache/logging/log4j/log4j-core/2.5/log4j-core-2.5.jar:/root/.m2/repository/org/springframework/spring-web/4.1.6.RELEASE/spring-web-4.1.6.RELEASE.jar:/root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:/root/.m2/repository/mockobjects/mockobjects-core/0.09/mockobjects-core-0.09.jar:/root/.m2/repository/org/apache/velocity/velocity-tools/2.0/velocity-tools-2.0.jar:/root/.m2/repository/org/apache/struts/struts-core/1.3.8/struts-core-1.3.8.jar:/root/.m2/repository/mockobjects/mockobjects-alt-jdk1.3-j2ee1.3/0.09/mockobjects-alt-jdk1.3-j2ee1.3-0.09.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/root/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/root/.m2/repository/commons-beanutils/commons-beanutils/1.9.2/commons-beanutils-1.9.2.jar:/root/.m2/repository/mockobjects/mockobjects-alt-jdk1.3/0.09/mockobjects-alt-jdk1.3-0.09.jar:/root/.m2/repository/commons-validator/commons-validator/1.3.1/commons-validator-1.3.1.jar:/root/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/root/.m2/repository/org/springframework/spring-core/4.1.6.RELEASE/spring-core-4.1.6.RELEASE.jar:/root/.m2/repository/org/springframework/spring-beans/4.1.6.RELEASE/spring-beans-4.1.6.RELEASE.jar:/root/.m2/repository/org/springframework/spring-expression/4.1.6.RELEASE/spring-expression-4.1.6.RELEASE.jar:/root/.m2/repository/commons-digester/commons-digester/2.1/commons-digester-2.1.jar:/root/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar:/root/.m2/repository/org/springframework/spring-aop/4.1.6.RELEASE/spring-aop-4.1.6.RELEASE.jar:/root/.m2/repository/mockobjects/mockobjects-jdk1.3-j2ee1.3/0.09/mockobjects-jdk1.3-j2ee1.3-0.09.jar:/root/.m2/repository/jmock/jmock/1.2.0/jmock-1.2.0.jar:/root/.m2/repository/javassist/javassist/3.11.0.GA/javassist-3.11.0.GA.jar:/root/.m2/repository/org/apache/velocity/velocity/1.7/velocity-1.7.jar:/root/.m2/repository/asm/asm-commons/3.3/asm-commons-3.3.jar:/root/.m2/repository/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar:/root/.m2/repository/asm/asm/3.3/asm-3.3.jar:/root/.m2/repository/mockobjects/mockobjects-jdk1.3/0.09/mockobjects-jdk1.3-0.09.jar:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/root/.m2/repository/org/apache/logging/log4j/log4j-api/2.5/log4j-api-2.5.jar:/root/.m2/repository/org/springframework/spring-context/4.1.6.RELEASE/spring-context-4.1.6.RELEASE.jar:/root/.m2/repository/sslext/sslext/1.2-0/sslext-1.2-0.jar:/root/.m2/repository/cglib/cglib-nodep/2.1_3/cglib-nodep-2.1_3.jar:/root/.m2/repository/antlr/antlr/2.7.2/antlr-2.7.2.jar:/root/.m2/repository/org/apache/struts/struts-tiles/1.3.8/struts-tiles-1.3.8.jar:/root/.m2/repository/ognl/ognl/3.1.2/ognl-3.1.2.jar:/root/.m2/repository/org/easymock/easymock/3.4/easymock-3.4.jar:/root/.m2/repository/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar:/root/.m2/repository/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar:/root/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/root/.m2/repository/commons-fileupload/commons-fileupload/1.3.1/commons-fileupload-1.3.1.jar:/root/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar:/root/.m2/repository/org/freemarker/freemarker/2.3.23/freemarker-2.3.23.jar:/root/.m2/repository/junit/junit/4.12/junit-4.12.jar:/root/.m2/repository/org/apache/struts/struts-annotations/1.0.6/struts-annotations-1.0.6.jar:/root/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar:/root/.m2/repository/org/aspectj/aspectjweaver/1.8.5/aspectjweaver-1.8.5.jar:/root/.m2/repository/org/springframework/spring-test/4.1.6.RELEASE/spring-test-4.1.6.RELEASE.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Fault localization starts...
Number of positive tests: 2047
Number of negative tests: 1
Negative tests: [com.opensymphony.xwork2.interceptor.I18nInterceptorTest#testCVE_2016_2162]
Faulty Lines: 
com.opensymphony.xwork2.interceptor.I18nInterceptor#214:1.0
com.opensymphony.xwork2.interceptor.I18nInterceptor#221:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 2047
Filtering of the tests is finished!
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566
----------------------------------
Patch Candidate:
@@ -211,9 +211,6 @@ public class I18nInterceptor extends AbstractInterceptor {
protected Locale getLocaleFromParam(Object requestedLocale) {
Locale locale = null;
if (requestedLocale != null) {
-            locale = (requestedLocale instanceof Locale) ?
-                    (Locale) requestedLocale :
-                    LocalizedTextUtil.localeFromString(requestedLocale.toString(), null);
if (locale != null) {
LOG.debug("Applied request locale: {}", locale);
}
Number of failed tests: 1, 10
Weighted failure rate: 1.0024425989252566


Node: 7bf757db1356



Date: Wed Nov 30 20:48:36 EST 2022

