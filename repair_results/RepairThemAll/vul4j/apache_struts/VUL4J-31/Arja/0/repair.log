cd /workdir/Arja_vul4j_apache_struts_VUL4J-31;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/jdk1.7.0_80/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/jdk1.7.0_80";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	Arja \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/Arja_vul4j_apache_struts_VUL4J-31 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -pl core -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/Arja_vul4j_apache_struts_VUL4J-31/core/src/main/java \
	-DbinJavaDir /workdir/Arja_vul4j_apache_struts_VUL4J-31/core/target/classes \
	-DbinTestDir /workdir/Arja_vul4j_apache_struts_VUL4J-31/core/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-31 \
	-Ddependences /root/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar:/root/.m2/repository/org/apache/struts/xwork/xwork-core/2.3.29-SNAPSHOT/xwork-core-2.3.29-SNAPSHOT.jar:/root/.m2/repository/mockobjects/mockobjects-jdk1.3-j2ee1.3/0.09/mockobjects-jdk1.3-j2ee1.3-0.09.jar:/root/.m2/repository/jmock/jmock/1.2.0/jmock-1.2.0.jar:/root/.m2/repository/javassist/javassist/3.11.0.GA/javassist-3.11.0.GA.jar:/root/.m2/repository/org/easymock/easymock/2.4/easymock-2.4.jar:/root/.m2/repository/asm/asm-commons/3.3/asm-commons-3.3.jar:/root/.m2/repository/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar:/root/.m2/repository/org/testng/testng/5.1/testng-5.1-jdk15.jar:/root/.m2/repository/asm/asm/3.3/asm-3.3.jar:/root/.m2/repository/mockobjects/mockobjects-jdk1.3/0.09/mockobjects-jdk1.3-0.09.jar:/root/.m2/repository/asm/asm-tree/3.3/asm-tree-3.3.jar:/root/.m2/repository/org/apache/struts/struts-annotations/1.0.5/struts-annotations-1.0.5.jar:/root/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.2/commons-lang3-3.2.jar:/root/.m2/repository/mockobjects/mockobjects-core/0.09/mockobjects-core-0.09.jar:/root/.m2/repository/sslext/sslext/1.2-0/sslext-1.2-0.jar:/root/.m2/repository/mockobjects/mockobjects-alt-jdk1.3-j2ee1.3/0.09/mockobjects-alt-jdk1.3-j2ee1.3-0.09.jar:/root/.m2/repository/org/apache/velocity/velocity/1.6.4/velocity-1.6.4.jar:/root/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar:/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/root/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/root/.m2/repository/org/apache/velocity/velocity-tools/1.3/velocity-tools-1.3.jar:/root/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/root/.m2/repository/mockobjects/mockobjects-alt-jdk1.3/0.09/mockobjects-alt-jdk1.3-0.09.jar:/root/.m2/repository/commons-validator/commons-validator/1.3.1/commons-validator-1.3.1.jar:/root/.m2/repository/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar:/root/.m2/repository/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar:/root/.m2/repository/commons-io/commons-io/2.2/commons-io-2.2.jar:/root/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/root/.m2/repository/commons-digester/commons-digester/2.0/commons-digester-2.0.jar:/root/.m2/repository/commons-fileupload/commons-fileupload/1.3.1/commons-fileupload-1.3.1.jar:/root/.m2/repository/org/freemarker/freemarker/2.3.22/freemarker-2.3.22.jar:/root/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar:/root/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/root/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/root/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar:/root/.m2/repository/ognl/ognl/3.0.14/ognl-3.0.14.jar:/root/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Fault localization starts...
Number of positive tests: 885
Number of negative tests: 1
Negative tests: [org.apache.struts2.dispatcher.mapper.DefaultActionMapperTest#testAllowedActionNames]
Faulty Lines: 
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#387:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#391:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#392:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#395:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#398:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 885
Filtering of the tests is finished!
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,19 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,11 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
@@ -395,7 +394,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.extensions = null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,13 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
+            this.extensions = null;
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,19 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return null;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,9 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            this.extensions = null;
+			String cleanActionName = rawActionName;
+            this.container = container;
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,16 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,21 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,12 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            this.container = container;
+			String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,16 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,6 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,10 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,12 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,10 +389,16 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,12 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            setSlashesInActionNames("true");
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,10 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.container = container;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
@@ -395,7 +392,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return null;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,7 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.container = container;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,18 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,12 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.extensions = null;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.extensions = null;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,17 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+            return rawActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
+            this.extensions = null;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,16 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,21 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,12 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,23 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.extensions = null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,21 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,11 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,11 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,17 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return null;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,19 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            setSlashesInActionNames("true");
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.extensions = null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.extensions = null;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,10 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,24 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,19 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,8 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            this.extensions = null;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,7 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            setSlashesInActionNames("true");
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,17 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
+            setSlashesInActionNames("true");
if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,22 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+            setSlashesInActionNames("true");
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,12 +388,15 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
+                cleanActionName = cleanActionName.replace(chunk, "");
}
return cleanActionName;
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,6 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
@@ -395,7 +391,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return null;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return rawActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,12 +384,12 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            setSlashesInActionNames("true");
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,17 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return null;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,12 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            setSlashesInActionNames("true");
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,13 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -393,8 +393,8 @@ public class DefaultActionMapper implements ActionMapper {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,17 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            setSlashesInActionNames("true");
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            this.container = container;
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,14 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,21 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,10 +392,11 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            this.extensions = null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,8 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            setSlashesInActionNames("true");
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -385,6 +385,11 @@ public class DefaultActionMapper implements ActionMapper {
return rawActionName;
} else {
if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
@@ -395,7 +400,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.container = container;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,17 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,10 +389,14 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            this.extensions = null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,11 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (extensions == null) {
+				return null;
+			} else {
+				return extensions.get(0);
+			}
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,12 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,12 +389,8 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            setSlashesInActionNames("true");
+            setSlashesInActionNames("true");
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,11 +388,21 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,11 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (extensions == null) {
+				return null;
+			} else {
+				return extensions.get(0);
+			}
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,8 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            this.container = container;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,13 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,10 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
@@ -393,8 +396,8 @@ public class DefaultActionMapper implements ActionMapper {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,16 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
+            this.extensions = null;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,8 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,7 +392,8 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            this.extensions = null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,19 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (extensions == null) {
+				return null;
+			} else {
+				return extensions.get(0);
+			}
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,13 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            this.container = container;
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.extensions = null;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,15 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return rawActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            setSlashesInActionNames("true");
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,10 +392,11 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+            this.extensions = null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,10 +392,8 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            setSlashesInActionNames("true");
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
@@ -395,7 +396,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.container = container;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,13 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,18 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.container = container;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.container = container;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,10 +392,8 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -390,11 +390,14 @@ public class DefaultActionMapper implements ActionMapper {
}
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,11 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            this.extensions = null;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			String cleanActionName = rawActionName;
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return rawActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.container = container;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,13 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,10 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,12 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,15 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,14 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,6 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,11 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            setSlashesInActionNames("true");
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,7 +392,8 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            this.extensions = null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,15 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,11 +388,20 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,17 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.extensions = null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,13 +389,13 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return null;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,10 +392,10 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
-            return cleanActionName;
+            for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+            return rawActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.extensions = null;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,14 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,12 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            setSlashesInActionNames("true");
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,14 +384,15 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            setSlashesInActionNames("true");
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,15 +384,18 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            this.extensions = null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
@@ -395,7 +394,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,17 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,12 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,12 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,18 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,12 +384,11 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,11 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,7 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            setSlashesInActionNames("true");
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,10 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
@@ -393,8 +396,8 @@ public class DefaultActionMapper implements ActionMapper {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,15 +384,15 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            setSlashesInActionNames("true");
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
+				LOG.debug("Cleaned action/method name [#0]", cleanActionName);
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.extensions = null;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,18 +384,23 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            this.container = container;
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,8 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            this.extensions = null;
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,12 +384,16 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+            this.container = container;
+			String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,10 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
@@ -392,9 +395,7 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.container = container;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,7 +384,11 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,8 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            this.extensions = null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,11 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,7 +392,8 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            this.extensions = null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,12 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.extensions = null;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.container = container;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,13 +388,14 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+				LOG.debug("exhausted from ActionMapper that could return a uri");
+			}
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,7 +388,10 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,10 +388,12 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            setSlashesInActionNames("true");
+			String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,7 +392,10 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,7 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.container = container;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,14 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.extensions = null;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,7 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            return extensions.get(0);
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,19 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            setSlashesInActionNames("true");
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,10 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.extensions = null;
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -395,7 +395,10 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,12 +384,12 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
+            this.extensions = null;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,12 +384,13 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            setSlashesInActionNames("true");
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (!isSlashesInActionNames()) {
+				throw new IllegalStateException(
+						"This action mapper requires the setting 'slashesInActionNames' to be set to 'true'");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,14 +388,19 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            this.extensions = null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (extensions == null) {
+				return null;
+			} else {
+				return extensions.get(0);
+			}
}
}

Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,10 +389,12 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
+            if (LOG.isWarnEnabled()) {
+				LOG.warn(
+						"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+						rawActionName, allowedActionNames);
+			}
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,17 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
+            this.container = container;
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
+            this.extensions = null;
return cleanActionName;
}
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,11 +384,17 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -384,12 +384,11 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
+				cleanActionName = cleanActionName.replace(chunk, "");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,7 +389,10 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -388,8 +388,12 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            this.extensions = null;
+			String cleanActionName = rawActionName;
+            if (LOG.isDebugEnabled()) {
+				LOG.debug("exhausted from ActionMapper that could return an ActionMapping");
+			}
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
Weighted failure rate: 1.0
----------------------------------
Patch Candidate:
@@ -389,9 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
+            LOG.warn(
+					"Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
+					rawActionName, allowedActionNames);
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}


Node: 7bf757db1356



Date: Wed Nov 30 18:29:37 EST 2022

