cd /workdir/Kali_vul4j_apache_struts_VUL4J-31;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/jdk1.7.0_80/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/jdk1.7.0_80";
timeout 240m java -Xmx4g -Xms1g -XX:MaxPermSize=512m -cp /script/../libs/jmetal.jar:/script/../repair_tools/arja.jar us.msu.cse.repair.Main \
	Kali \
	-DexternalProjRoot /script/../libs/arja_external \
	-DprojectDir /workdir/Kali_vul4j_apache_struts_VUL4J-31 \
    -DtestFiltered false \
    -DrunTestCommand "mvn test -pl core -Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B" \
	-DsrcJavaDir /workdir/Kali_vul4j_apache_struts_VUL4J-31/core/src/main/java \
	-DbinJavaDir /workdir/Kali_vul4j_apache_struts_VUL4J-31/core/target/classes \
	-DbinTestDir /workdir/Kali_vul4j_apache_struts_VUL4J-31/core/target/test-classes \
	-DdiffFormat true \
	-Dseed 0 \
	-DgzoltarDataDir /script/../data/benchmarks/vul4j/perfectfl/VUL4J-31 \
	-Ddependences /root/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar:/root/.m2/repository/org/apache/struts/xwork/xwork-core/2.3.29-SNAPSHOT/xwork-core-2.3.29-SNAPSHOT.jar:/root/.m2/repository/mockobjects/mockobjects-jdk1.3-j2ee1.3/0.09/mockobjects-jdk1.3-j2ee1.3-0.09.jar:/root/.m2/repository/jmock/jmock/1.2.0/jmock-1.2.0.jar:/root/.m2/repository/javassist/javassist/3.11.0.GA/javassist-3.11.0.GA.jar:/root/.m2/repository/org/easymock/easymock/2.4/easymock-2.4.jar:/root/.m2/repository/asm/asm-commons/3.3/asm-commons-3.3.jar:/root/.m2/repository/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar:/root/.m2/repository/org/testng/testng/5.1/testng-5.1-jdk15.jar:/root/.m2/repository/asm/asm/3.3/asm-3.3.jar:/root/.m2/repository/mockobjects/mockobjects-jdk1.3/0.09/mockobjects-jdk1.3-0.09.jar:/root/.m2/repository/asm/asm-tree/3.3/asm-tree-3.3.jar:/root/.m2/repository/org/apache/struts/struts-annotations/1.0.5/struts-annotations-1.0.5.jar:/root/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.2/commons-lang3-3.2.jar:/root/.m2/repository/mockobjects/mockobjects-core/0.09/mockobjects-core-0.09.jar:/root/.m2/repository/sslext/sslext/1.2-0/sslext-1.2-0.jar:/root/.m2/repository/mockobjects/mockobjects-alt-jdk1.3-j2ee1.3/0.09/mockobjects-alt-jdk1.3-j2ee1.3-0.09.jar:/root/.m2/repository/org/apache/velocity/velocity/1.6.4/velocity-1.6.4.jar:/root/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar:/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/root/.m2/repository/org/springframework/spring-test/3.0.5.RELEASE/spring-test-3.0.5.RELEASE.jar:/root/.m2/repository/org/apache/velocity/velocity-tools/1.3/velocity-tools-1.3.jar:/root/.m2/repository/org/springframework/spring-core/3.0.5.RELEASE/spring-core-3.0.5.RELEASE.jar:/root/.m2/repository/mockobjects/mockobjects-alt-jdk1.3/0.09/mockobjects-alt-jdk1.3-0.09.jar:/root/.m2/repository/commons-validator/commons-validator/1.3.1/commons-validator-1.3.1.jar:/root/.m2/repository/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar:/root/.m2/repository/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar:/root/.m2/repository/commons-io/commons-io/2.2/commons-io-2.2.jar:/root/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/root/.m2/repository/commons-digester/commons-digester/2.0/commons-digester-2.0.jar:/root/.m2/repository/commons-fileupload/commons-fileupload/1.3.1/commons-fileupload-1.3.1.jar:/root/.m2/repository/org/freemarker/freemarker/2.3.22/freemarker-2.3.22.jar:/root/.m2/repository/javax/servlet/jsp-api/2.0/jsp-api-2.0.jar:/root/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/root/.m2/repository/org/springframework/spring-asm/3.0.5.RELEASE/spring-asm-3.0.5.RELEASE.jar:/root/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar:/root/.m2/repository/ognl/ognl/3.0.14/ognl-3.0.14.jar:/root/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
Fault localization starts...
Number of positive tests: 885
Number of negative tests: 1
Negative tests: [org.apache.struts2.dispatcher.mapper.DefaultActionMapperTest#testAllowedActionNames]
Faulty Lines: 
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#387:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#391:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#392:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#395:1.0
org.apache.struts2.dispatcher.mapper.DefaultActionMapper#398:1.0
Fault localization is finished!
AST parsing starts...
AST parsing is finished!
Detection of local variables starts...
Detection of local variables is finished!
Detection of fields starts...
Detection of fields is finished!
Detection of methods starts...
Detection of methods is finished!
Ingredient screener starts...
Ingredient screener is finished!
Initialization of manipulations starts...
Initialization of manipulations is finished!
Filtering of the tests starts...
Number of positive tests considered: 885
Filtering of the tests is finished!
----------------------------------
Patch Candidate:
@@ -384,7 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (true) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -384,7 +384,7 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (false) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -392,7 +392,7 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            if (true) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -392,7 +392,7 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            if (false) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -384,7 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (true)
+				return null;
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -384,7 +384,9 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
+            if (true)
+				return null;
+			if (LOG.isWarnEnabled()) {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -388,7 +388,9 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (true)
+				return null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -388,7 +388,9 @@ public class DefaultActionMapper implements ActionMapper {
LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
rawActionName, allowedActionNames);
}
-            String cleanActionName = rawActionName;
+            if (true)
+				return null;
+			String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -389,7 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (true)
+				return null;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -389,7 +389,9 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
+            if (true)
+				return null;
+			for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
if (LOG.isDebugEnabled()) {
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -392,7 +392,9 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            if (true)
+				return null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -392,7 +392,9 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
+            if (true)
+				return null;
+			if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
return cleanActionName;
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -395,7 +395,9 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (true)
+				return null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -395,7 +395,9 @@ public class DefaultActionMapper implements ActionMapper {
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
-            return cleanActionName;
+            if (true)
+				return null;
+			return cleanActionName;
}
}

Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -384,10 +384,6 @@ public class DefaultActionMapper implements ActionMapper {
if (allowedActionNames.matcher(rawActionName).matches()) {
return rawActionName;
} else {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Action/method [#0] does not match allowed action names pattern [#1], cleaning it up!",
-                        rawActionName, allowedActionNames);
-            }
String cleanActionName = rawActionName;
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -389,9 +389,6 @@ public class DefaultActionMapper implements ActionMapper {
rawActionName, allowedActionNames);
}
String cleanActionName = rawActionName;
-            for (String chunk : allowedActionNames.split(rawActionName)) {
-                cleanActionName = cleanActionName.replace(chunk, "");
-            }
if (LOG.isDebugEnabled()) {
LOG.debug("Cleaned action/method name [#0]", cleanActionName);
}
Number of failed tests: 1, 0
----------------------------------
Patch Candidate:
@@ -392,9 +392,6 @@ public class DefaultActionMapper implements ActionMapper {
for (String chunk : allowedActionNames.split(rawActionName)) {
cleanActionName = cleanActionName.replace(chunk, "");
}
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Cleaned action/method name [#0]", cleanActionName);
-            }
return cleanActionName;
}
}
Number of failed tests: 1, 0


Node: 2c8178711f7b



Date: Fri Oct  7 06:25:25 EDT 2022

